<!--
This file is part of Codemancer.
Copyright 2015 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="big">
<cpu name="pic17"/>

<style>
 <property name="base" value="16"/>
 <property name="prefix" value="0x"/>
 <property name="suffix" value=""/>
 <property name="whitespace" value=" "/>
 <select class="daddr">
  <property name="width" value="2"/>
 </select>
 <select class="paddr">
  <property name="width" value="4"/>
 </select>
 <select class="imm">
  <property name="width" value="2"/>
 </select>
 <select class="inc">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
 <select class="bit">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
</style>

<register name="W" size="8"/>
<register name="SP" size="4"/>
<register name="PC" size="16"/>
<register name="C" size="1"/>
<register name="TBLAT" size="16"/>
<register name="TBLATL" size="8"/>
<register name="TBLATH" size="8"/>

<define name="nop-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
   <const>00000000</const>
  </pattern>
  <phrase>
   <literal>NOP</literal>
  </phrase>
  <phrase></phrase>
  <effect></effect>
 </fragment>
</define>

<define name="return-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
   <const>00000010</const>
  </pattern>
  <phrase>
   <literal>RETURN</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>1</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <memory size="16" as="stack">
     <register name="SP"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sleep-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
   <const>00000011</const>
  </pattern>
  <phrase>
   <literal>SLEEP</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<define name="retfie-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
   <const>00000101</const>
  </pattern>
  <phrase>
   <literal>RETFIE</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>1</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <memory size="16" as="stack">
     <register name="SP"/>
    </memory>
   </assign>
   <assign>
    <memory size="8" encoding="u">
     <const>0x06</const>
    </memory>
    <and>
     <memory size="8" encoding="u">
      <const>0x06</const>
     </memory>
     <const>0xEF</const>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="clrwdt-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
   <const>00001000</const>
  </pattern>
  <phrase>
   <literal>CLRWDT</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<define name="movwf-op">
 <fragment>
  <pattern>
   <const>00000</const>
  </pattern>
  <phrase>
   <literal>MOVWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <register name="W"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="subwfb-op">
 <fragment>
  <pattern>
   <const>00001</const>
  </pattern>
  <phrase>
   <literal>SUBWFB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <register name="W"/>
     <register name="C"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="subwf-op">
 <fragment>
  <pattern>
   <const>00010</const>
  </pattern>
  <phrase>
   <literal>SUBWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <register name="W"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="decf-op">
 <fragment>
  <pattern>
   <const>00011</const>
  </pattern>
  <phrase>
   <literal>DECF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="iorwf-op">
 <fragment>
  <pattern>
   <const>00100</const>
  </pattern>
  <phrase>
   <literal>IORWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <or>
     <register name="W"/>
     <ref name="src"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="andwf-op">
 <fragment>
  <pattern>
   <const>00101</const>
  </pattern>
  <phrase>
   <literal>ANDWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <and>
     <register name="W"/>
     <ref name="src"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xorwf-op">
 <fragment>
  <pattern>
   <const>00110</const>
  </pattern>
  <phrase>
   <literal>XORWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <xor>
     <register name="W"/>
     <ref name="src"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="addwf-op">
 <fragment>
  <pattern>
   <const>00111</const>
  </pattern>
  <phrase>
   <literal>ADDWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <register name="W"/>
     <ref name="src"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="addwfc-op">
 <fragment>
  <pattern>
   <const>01000</const>
  </pattern>
  <phrase>
   <literal>ADDWFC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <register name="W"/>
     <ref name="src"/>
     <register name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="comf-op">
 <fragment>
  <pattern>
   <const>01001</const>
  </pattern>
  <phrase>
   <literal>COMF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <xor>
     <ref name="src"/>
     <const>0xFF</const>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="incf-op">
 <fragment>
  <pattern>
   <const>01010</const>
  </pattern>
  <phrase>
   <literal>INCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="decfsz-op">
 <fragment>
  <pattern>
   <const>01011</const>
  </pattern>
  <phrase>
   <literal>DECFSZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="rrcf-op">
 <fragment>
  <pattern>
   <const>01100</const>
  </pattern>
  <phrase>
   <literal>RRCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="extended">
     <ref name="src"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rlcf-op">
 <fragment>
  <pattern>
   <const>01101</const>
  </pattern>
  <phrase>
   <literal>RLCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="extended">
     <ref name="src"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="swapf-op">
 <fragment>
  <pattern>
   <const>01110</const>
  </pattern>
  <phrase>
   <literal>SWAPF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <or>
     <shift width="8" method="logical">
      <and>
       <ref name="src"/>
       <const>0x0F</const>
      </and>
      <const>4</const>
     </shift>
     <shift width="8" method="logical">
      <and>
       <ref name="src"/>
       <const>0xF0</const>
      </and>
      <const>-4</const>
     </shift>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="incfsz-op">
 <fragment>
  <pattern>
   <const>01111</const>
  </pattern>
  <phrase>
   <literal>INCFSZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="rrncf-op">
 <fragment>
  <pattern>
   <const>10000</const>
  </pattern>
  <phrase>
   <literal>RRNCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="rotation">
     <ref name="src"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rlncf-op">
 <fragment>
  <pattern>
   <const>10001</const>
  </pattern>
  <phrase>
   <literal>RLNCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="rotation">
     <ref name="src"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="infsnz-op">
 <fragment>
  <pattern>
   <const>10010</const>
  </pattern>
  <phrase>
   <literal>INFSNZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <else>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </else>
   </if>
  </effect>
 </fragment>
</define>

<define name="dcfsnz-op">
 <fragment>
  <pattern>
   <const>10011</const>
  </pattern>
  <phrase>
   <literal>DCFSNZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <else>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </else>
   </if>
  </effect>
 </fragment>
</define>

<define name="clrf-op">
 <fragment>
  <pattern>
   <const>10100</const>
  </pattern>
  <phrase>
   <literal>CLRF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="setf-op">
 <fragment>
  <pattern>
   <const>10101</const>
  </pattern>
  <phrase>
   <literal>SETF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <const>0xff</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="negw-op">
 <fragment>
  <pattern>
   <const>10110</const>
  </pattern>
  <phrase>
   <literal>NEGW</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <const>0</const>
     <register name="W"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="daw-op">
 <fragment>
  <pattern>
   <const>10111</const>
  </pattern>
  <phrase>
   <literal>DAW</literal>
  </phrase>
 </fragment>
</define>

<define name="cpfslt-op">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>CPFSLT</literal>
  </phrase>
  <effect>
   <is-less>
    <ref name="src"/>
    <register name="W"/>
   </is-less>
  </effect>
 </fragment>
</define>

<define name="cpfseq-op">
 <fragment>
  <pattern>
   <const>0001</const>
  </pattern>
  <phrase>
   <literal>CPFSEQ</literal>
  </phrase>
  <effect>
   <is-equal>
    <ref name="src"/>
    <register name="W"/>
   </is-equal>
  </effect>
 </fragment>
</define>

<define name="cpfsgt-op">
 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>CPFSGT</literal>
  </phrase>
  <effect>
   <is-greater>
    <ref name="src"/>
    <register name="W"/>
   </is-greater>
  </effect>
 </fragment>
</define>

<define name="tstfsz-op">
 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>TSTFSZ</literal>
  </phrase>
  <effect>
   <is-equal>
    <ref name="src"/>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>
</define>

<define name="cp-instr">
 <fragment>
  <var name="opcode">
   <ref name="cpfslt-op"/>
   <ref name="cpfseq-op"/>
   <ref name="cpfsgt-op"/>
   <ref name="tstfsz-op"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>0011</const>
   <ref name="opcode"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="f"/>
  </phrase>
  <effect>
   <if>
    <test>
     <ref name="opcode">
      <bind name="src">
       <memory size="8">
        <ref name="f"/>
       </memory>
      </bind>
     </ref>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="movpf-instr">
 <fragment>
  <var name="p">
   <integer class="daddr" size="5" encoding="u"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>010</const>
   <ref name="p"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>MOVPF</literal>
  </phrase>
  <phrase>
   <ref name="p"/>
   <literal>,</literal><ws/>
   <ref name="f"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="f"/>
    </memory>
    <memory>
     <ref name="p"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movfp-instr">
 <fragment>
  <var name="p">
   <integer class="daddr" size="5" encoding="u"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>011</const>
   <ref name="p"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>MOVFP</literal>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <ref name="p"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="f"/>
    </memory>
    <memory>
     <ref name="p"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bit-mask">
 <fragment>
  <var name="n">
   <integer class="bit" size="3"/>
  </var>
  <pattern>
   <ref name="n"/>
  </pattern>
  <phrase>
   <ref name="n"/>
  </phrase>
  <effect>
   <shift width="8" mode="logical">
    <ref name="n"/>
   </shift>
  </effect>
 </fragment>
</define>

<define name="bit-value">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>S</literal>
  </phrase>
  <effect>
   <const>0xFF</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <const>0x00</const>
  </effect>
 </fragment>
</define>

<define name="tblat">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>0</literal>
  </phrase>
  <effect>
   <register name="TBLATL"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>1</literal>
  </phrase>
  <effect>
   <register name="TBLATH"/>
  </effect>
 </fragment>
</define>

<define name="tlrd-instr">
 <fragment>
  <var name="t">
   <ref name="tblat"/>
  </var>
  <var name="x">
   <integer size="1"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>101000</const>
   <ref name="t"/>
   <ref name="x"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>TLRD</literal>
  </phrase>
  <phrase>
   <ref name="t"/>
   <literal>,</literal><ws/>
   <ref name="f"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="f"/>
    </memory>
    <ref name="t"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tlwt-instr">
 <fragment>
  <var name="t">
   <ref name="tblat"/>
  </var>
  <var name="x">
   <integer size="1"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>101001</const>
   <ref name="t"/>
   <ref name="x"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>TLWT</literal>
  </phrase>
  <phrase>
   <ref name="t"/>
   <literal>,</literal><ws/>
   <ref name="f"/>
  </phrase>
  <effect>
   <assign>
    <ref name="t"/>
    <memory size="8">
     <ref name="f"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tablrd-instr">
 <fragment>
  <var name="t">
   <ref name="tblat"/>
  </var>
  <var name="i">
   <integer class="inc" size="1" encoding="u"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>101010</const>
   <ref name="t"/>
   <ref name="i"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>TABLRD</literal>
  </phrase>
  <phrase>
   <ref name="t"/>
   <literal>,</literal><ws/>
   <ref name="i"/>
   <literal>,</literal><ws/>
   <ref name="f"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="f"/>
    </memory>
    <ref name="t"/>
   </assign>
   <assign>
    <register name="TBLAT"/>
    <memory size="16" as="prog">
     <memory size="16" encoding="u" endian="little">
      <const>0x0D</const>
     </memory>
    </memory>
   </assign>
   <assign>
    <memory size="16" as="prog">
     <memory size="16" encoding="u" endian="little">
      <const>0x0D</const>
     </memory>
    </memory>
    <add>
     <memory size="16" as="prog">
      <memory size="16" encoding="u" endian="little">
       <const>0x0D</const>
      </memory>
     </memory>
     <ref name="i"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tablwt-instr">
 <fragment>
  <var name="t">
   <ref name="tblat"/>
  </var>
  <var name="i">
   <integer class="inc" size="1" encoding="u"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>101011</const>
   <ref name="t"/>
   <ref name="i"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>TABLWT</literal>
  </phrase>
  <phrase>
   <ref name="t"/>
   <literal>,</literal><ws/>
   <ref name="i"/>
   <literal>,</literal><ws/>
   <ref name="f"/>
  </phrase>
  <effect>
   <assign>
    <ref name="t"/>
    <memory size="8">
     <ref name="f"/>
    </memory>
   </assign>
   <assign>
    <memory size="16" as="prog">
     <memory size="16" encoding="u" endian="little">
      <const>0x0D</const>
     </memory>
    </memory>
    <register name="TBLAT"/>
   </assign>
   <assign>
    <memory size="16" as="prog">
     <memory size="16" encoding="u" endian="little">
      <const>0x0D</const>
     </memory>
    </memory>
    <add>
     <memory size="16" as="prog">
      <memory size="16" encoding="u" endian="little">
       <const>0x0D</const>
      </memory>
     </memory>
     <ref name="i"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>10110000</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>MOVLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <ref name="k"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="addlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>10110001</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>ADDLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <add>
     <register name="W"/>
     <ref name="k"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sublw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>10110010</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>SUBLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <sub>
     <ref name="k"/>
     <register name="W"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="iorlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>10110011</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>IORLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <or>
     <register name="W"/>
     <ref name="k"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xorlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>10110100</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>XORLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <xor>
     <register name="W"/>
     <ref name="k"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="andlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>10110101</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>ANDLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <and>
     <register name="W"/>
     <ref name="k"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="retlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>10110110</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>RETLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <ref name="k"/>
   </assign>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>1</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <memory size="16" as="stack">
     <register name="SP"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="lcall-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>10110111</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>LCALL</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <memory size="16" as="stack">
     <register name="SP"/>
    </memory>
    <add>
     <register name="PC"/>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <register name="PC"/>
    <or>
     <shift width="8" method="logical">
      <memory size="8">
       <const>0x03</const>
      </memory>
     </shift>
     <ref name="k"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movlb-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>10111000</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>MOVLB</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <const>0xF</const>
    </memory>
    <ref name="k"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="goto-instr">
 <fragment>
  <var name="k">
   <integer class="paddr" size="13" encoding="u"/>
  </var>
  <pattern>
   <const>110</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>GOTO</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <or>
     <and>
      <memory size="8">
       <const>0x03</const>
      </memory>
      <const>0xE0</const>
     </and>
     <ref name="k"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="call-instr">
 <fragment>
  <var name="k">
   <integer class="paddr" size="13" encoding="u"/>
  </var>
  <pattern>
   <const>111</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>CALL</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <memory size="16" as="stack">
     <register name="SP"/>
    </memory>
    <add>
     <register name="PC"/>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <register name="PC"/>
    <or>
     <and>
      <register name="PC"/>
      <const>0x1FFF</const>
     </and>
     <ref name="k"/>
    </or>
   </assign>
   <assign>
    <memory size="8">
     <const>0x03</const>
    </memory>
    <shift width="16" method="logical">
     <register name="PC"/>
     <const>-8</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<start>
 <ref name="nop-instr"/>
 <ref name="return-instr"/>
 <ref name="sleep-instr"/>
 <ref name="retfie-instr"/>
 <ref name="clrwdt-instr"/>

 <fragment>
  <var name="opcode">
   <ref name="movwf-op"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00</const>
   <ref name="opcode"/>
   <const>1</const>
   <ref name="f"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="f"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <memory size="8">
      <ref name="f"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="subwf-op"/>
   <ref name="subwfb-op"/>
   <ref name="decf-op"/>
   <ref name="iorwf-op"/>
   <ref name="andwf-op"/>
   <ref name="xorwf-op"/>
   <ref name="addwf-op"/>
   <ref name="addwfc-op"/>
   <ref name="comf-op"/>
   <ref name="incf-op"/>
   <ref name="decfsz-op"/>
   <ref name="rrcf-op"/>
   <ref name="rlcf-op"/>
   <ref name="swapf-op"/>
   <ref name="incfsz-op"/>
   <ref name="rrncf-op"/>
   <ref name="rlncf-op"/>
   <ref name="infsnz-op"/>
   <ref name="dcfsnz-op"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00</const>
   <ref name="opcode"/>
   <const>0</const>
   <ref name="f"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <literal>0</literal>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <register name="W"/>
    </bind>
    <bind name="src">
     <memory size="8">
      <ref name="f"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="clrf-op"/>
   <ref name="setf-op"/>
   <ref name="negw-op"/>
   <ref name="daw-op"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00</const>
   <ref name="opcode"/>
   <const>0</const>
   <ref name="f"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <literal>0</literal>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <register name="W"/>
    </bind>
   </ref>
   <assign>
    <memory size="8">
     <ref name="f"/>
    </memory>
    <register name="W"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="subwf-op"/>
   <ref name="subwfb-op"/>
   <ref name="decf-op"/>
   <ref name="iorwf-op"/>
   <ref name="andwf-op"/>
   <ref name="xorwf-op"/>
   <ref name="addwf-op"/>
   <ref name="addwfc-op"/>
   <ref name="comf-op"/>
   <ref name="incf-op"/>
   <ref name="decfsz-op"/>
   <ref name="rrcf-op"/>
   <ref name="rlcf-op"/>
   <ref name="swapf-op"/>
   <ref name="incfsz-op"/>
   <ref name="rrncf-op"/>
   <ref name="rlncf-op"/>
   <ref name="infsnz-op"/>
   <ref name="dcfsnz-op"/>
   <ref name="clrf-op"/>
   <ref name="setf-op"/>
   <ref name="negw-op"/>
   <ref name="daw-op"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00</const>
   <ref name="opcode"/>
   <const>1</const>
   <ref name="f"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <literal>1</literal>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <memory size="8">
      <ref name="f"/>
     </memory>
    </bind>
    <bind name="src">
     <memory size="8">
      <ref name="f"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <ref name="cp-instr"/>

 <fragment>
  <var name="mask">
   <ref name="bit-mask"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00111</const>
   <ref name="mask"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>BTG</literal>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <ref name="mask"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="f"/>
    </memory>
    <xor>
     <memory size="8">
      <ref name="f"/>
     </memory>
     <ref name="mask"/>
    </xor>
   </assign>
  </effect>
 </fragment>

 <ref name="movpf-instr"/>
 <ref name="movfp-instr"/>

 <fragment>
  <var name="value">
   <ref name="bit-value"/>
  </var>
  <var name="mask">
   <ref name="bit-mask"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>1000</const>
   <ref name="value"/>
   <ref name="mask"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>B</literal>
   <ref name="value"/>
   <literal>F</literal>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <ref name="mask"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="f"/>
    </memory>
    <or>
     <and>
      <memory size="8">
       <ref name="f"/>
      </memory>
      <xor>
       <ref name="mask"/>
       <const>0xFF</const>
      </xor>
     </and>
     <and>
      <ref name="value"/>
      <ref name="mask"/>
     </and>
    </or>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="value">
   <ref name="bit-value"/>
  </var>
  <var name="mask">
   <ref name="bit-mask"/>
  </var>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>1001</const>
   <ref name="value"/>
   <ref name="mask"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>BTFS</literal>
   <ref name="value"/>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <ref name="mask"/>
  </phrase>
  <effect>
   <if>
    <test>
     <is-equal>
      <and>
       <memory size="8">
        <ref name="f"/>
       </memory>
       <ref name="mask"/>
      </and>
      <and>
       <ref name="value"/>
       <ref name="mask"/>
      </and>
     </is-equal>
    </test>
    <then>
     <register name="PC"/>
     <add>
      <register name="PC"/>
      <const>2</const>
     </add>
    </then>
   </if>
  </effect>
 </fragment>

 <ref name="tlrd-instr"/>
 <ref name="tlwt-instr"/>
 <ref name="tablrd-instr"/>
 <ref name="tablwt-instr"/>

 <ref name="movlw-instr"/>
 <ref name="addlw-instr"/>
 <ref name="sublw-instr"/>
 <ref name="iorlw-instr"/>
 <ref name="xorlw-instr"/>
 <ref name="andlw-instr"/>
 <ref name="retlw-instr"/>
 <ref name="lcall-instr"/>
 <ref name="movlb-instr"/>

 <ref name="goto-instr"/>
 <ref name="call-instr"/>
</start>
</cpudl>
