<!--
This file is part of Codemancer.
Copyright 2014 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="little">
<cpu name="x86"/>

<style>
 <property name="base" value="16"/>
 <property name="prefix" value=""/>
 <property name="suffix" value="H"/>
 <property name="whitespace" value=" "/>
</style>

<register name="AL" size="8"/>
<register name="CL" size="8"/>
<register name="DL" size="8"/>
<register name="BL" size="8"/>
<register name="AH" size="8"/>
<register name="CH" size="8"/>
<register name="DH" size="8"/>
<register name="BH" size="8"/>

<register name="AX" size="16"/>
<register name="CX" size="16"/>
<register name="DX" size="16"/>
<register name="BX" size="16"/>
<register name="SP" size="16"/>
<register name="BP" size="16"/>
<register name="SI" size="16"/>
<register name="DI" size="16"/>

<register name="EAX" size="32"/>
<register name="ECX" size="32"/>
<register name="EDX" size="32"/>
<register name="EBX" size="32"/>
<register name="ESP" size="32"/>
<register name="EBP" size="32"/>
<register name="ESI" size="32"/>
<register name="EDI" size="32"/>

<register name="CF" size="1"/>
<register name="PF" size="1"/>
<register name="AF" size="1"/>
<register name="ZF" size="1"/>
<register name="SF" size="1"/>
<register name="TF" size="1"/>
<register name="IF" size="1"/>
<register name="DF" size="1"/>
<register name="OF" size="1"/>

<define name="al">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>AL</literal>
  </phrase>
  <effect>
   <register name="AL"/>
  </effect>
 </fragment>
</define>

<define name="cl">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>CL</literal>
  </phrase>
  <effect>
   <register name="CL"/>
  </effect>
 </fragment>
</define>

<define name="dl">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>DL</literal>
  </phrase>
  <effect>
   <register name="DL"/>
  </effect>
 </fragment>
</define>

<define name="bl">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>BL</literal>
  </phrase>
  <effect>
   <register name="BL"/>
  </effect>
 </fragment>
</define>

<define name="ah">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>AH</literal>
  </phrase>
  <effect>
   <register name="AH"/>
  </effect>
 </fragment>
</define>

<define name="ch">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>CH</literal>
  </phrase>
  <effect>
   <register name="CH"/>
  </effect>
 </fragment>
</define>

<define name="dh">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>DH</literal>
  </phrase>
  <effect>
   <register name="DH"/>
  </effect>
 </fragment>
</define>

<define name="bh">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>BH</literal>
  </phrase>
  <effect>
   <register name="BH"/>
  </effect>
 </fragment>
</define>

<define name="ax">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>AX</literal>
  </phrase>
  <effect>
   <register name="AX"/>
  </effect>
 </fragment>
</define>

<define name="cx">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>CX</literal>
  </phrase>
  <effect>
   <register name="CX"/>
  </effect>
 </fragment>
</define>

<define name="dx">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>DX</literal>
  </phrase>
  <effect>
   <register name="DX"/>
  </effect>
 </fragment>
</define>

<define name="bx">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>BX</literal>
  </phrase>
  <effect>
   <register name="BX"/>
  </effect>
 </fragment>
</define>

<define name="sp">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>SP</literal>
  </phrase>
  <effect>
   <register name="SP"/>
  </effect>
 </fragment>
</define>

<define name="bp">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>BP</literal>
  </phrase>
  <effect>
   <register name="BP"/>
  </effect>
 </fragment>
</define>

<define name="si">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>SI</literal>
  </phrase>
  <effect>
   <register name="SI"/>
  </effect>
 </fragment>
</define>

<define name="di">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>DI</literal>
  </phrase>
  <effect>
   <register name="DI"/>
  </effect>
 </fragment>
</define>

<define name="eax">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>EAX</literal>
  </phrase>
  <effect>
   <register name="EAX"/>
  </effect>
 </fragment>
</define>

<define name="ecx">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>ECX</literal>
  </phrase>
  <effect>
   <register name="ECX"/>
  </effect>
 </fragment>
</define>

<define name="edx">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>EDX</literal>
  </phrase>
  <effect>
   <register name="EDX"/>
  </effect>
 </fragment>
</define>

<define name="ebx">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>EBX</literal>
  </phrase>
  <effect>
   <register name="EBX"/>
  </effect>
 </fragment>
</define>

<define name="esp">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>ESP</literal>
  </phrase>
  <effect>
   <register name="ESP"/>
  </effect>
 </fragment>
</define>

<define name="ebp">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>EBP</literal>
  </phrase>
  <effect>
   <register name="EBP"/>
  </effect>
 </fragment>
</define>

<define name="esi">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>ESI</literal>
  </phrase>
  <effect>
   <register name="ESI"/>
  </effect>
 </fragment>
</define>

<define name="edi">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>EDI</literal>
  </phrase>
  <effect>
   <register name="EDI"/>
  </effect>
 </fragment>
</define>

<define name="r8">
 <ref name="al"/>
 <ref name="cl"/>
 <ref name="dl"/>
 <ref name="bl"/>
 <ref name="ah"/>
 <ref name="ch"/>
 <ref name="dh"/>
 <ref name="bh"/>
</define>

<define name="r16">
 <ref name="ax"/>
 <ref name="cx"/>
 <ref name="dx"/>
 <ref name="bx"/>
 <ref name="sp"/>
 <ref name="bp"/>
 <ref name="si"/>
 <ref name="di"/>
</define>

<define name="r32">
 <ref name="eax"/>
 <ref name="ecx"/>
 <ref name="edx"/>
 <ref name="ebx"/>
 <ref name="esp"/>
 <ref name="ebp"/>
 <ref name="esi"/>
 <ref name="edi"/>
</define>

<define name="r32-no-sp">
 <ref name="eax"/>
 <ref name="ecx"/>
 <ref name="edx"/>
 <ref name="ebx"/>
 <ref name="ebp"/>
 <ref name="esi"/>
 <ref name="edi"/>
</define>

<define name="r32-no-bp">
 <ref name="eax"/>
 <ref name="ecx"/>
 <ref name="edx"/>
 <ref name="ebx"/>
 <ref name="esp"/>
 <ref name="esi"/>
 <ref name="edi"/>
</define>

<define name="r32-no-sp-bp">
 <ref name="eax"/>
 <ref name="ecx"/>
 <ref name="edx"/>
 <ref name="ebx"/>
 <ref name="esi"/>
 <ref name="edi"/>
</define>

<define name="segment">
 <require name="!esvp"><require name="!csvp"><require name="!ssvp">
 <require name="!dsvp"><require name="!fsvp"><require name="!gsvp">
  <fragment>
   <pattern></pattern>
   <phrase></phrase>
  </fragment>
 </require></require></require>
 </require></require></require>

 <require name="esvp"><require name="!csvp"><require name="!ssvp">
 <require name="!dsvp"><require name="!fsvp"><require name="!gsvp">
  <fragment>
   <pattern></pattern>
   <phrase>
    <literal>ES:</literal>
   </phrase>
  </fragment>
 </require></require></require>
 </require></require></require>

 <require name="!esvp"><require name="csvp"><require name="!ssvp">
 <require name="!dsvp"><require name="!fsvp"><require name="!gsvp">
  <fragment>
   <pattern></pattern>
   <phrase>
    <literal>CS:</literal>
   </phrase>
  </fragment>
 </require></require></require>
 </require></require></require>

 <require name="!esvp"><require name="!csvp"><require name="ssvp">
 <require name="!dsvp"><require name="!fsvp"><require name="!gsvp">
  <fragment>
   <pattern></pattern>
   <phrase>
    <literal>SS:</literal>
   </phrase>
  </fragment>
 </require></require></require>
 </require></require></require>

 <require name="!esvp"><require name="!csvp"><require name="!ssvp">
 <require name="dsvp"><require name="!fsvp"><require name="!gsvp">
  <fragment>
   <pattern></pattern>
   <phrase>
    <literal>DS:</literal>
   </phrase>
  </fragment>
 </require></require></require>
 </require></require></require>

 <require name="!esvp"><require name="!csvp"><require name="!ssvp">
 <require name="!dsvp"><require name="fsvp"><require name="!gsvp">
  <fragment>
   <pattern></pattern>
   <phrase>
    <literal>FS:</literal>
   </phrase>
  </fragment>
 </require></require></require>
 </require></require></require>

 <require name="!esvp"><require name="!csvp"><require name="!ssvp">
 <require name="!dsvp"><require name="!fsvp"><require name="gsvp">
  <fragment>
   <pattern></pattern>
   <phrase>
    <literal>GS:</literal>
   </phrase>
  </fragment>
 </require></require></require>
 </require></require></require>
</define>

<define name="sib-ss">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase></phrase>
  <effect>
   <const>1</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>*2</literal>
  </phrase>
  <effect>
   <const>2</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>*4</literal>
  </phrase>
  <effect>
   <const>4</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>*8</literal>
  </phrase>
  <effect>
   <const>8</const>
  </effect>
 </fragment>
</define>

<define name="sib-ss-index">
 <fragment>
  <var name="index">
   <ref name="r32-no-sp"/>
  </var>
  <var name="ss">
   <ref name="sib-ss"/>
  </var>
  <pattern>
   <ref name="index"/>
   <ref name="ss"/>
  </pattern>
  <phrase>
   <literal>+</literal>
   <ref name="index"/>
   <ref name="ss"/>
  </phrase>
  <effect>
   <mul>
    <ref name="index"/>
    <ref name="ss"/>
   </mul>
  </effect>
 </fragment>

 <fragment>
  <var name="ss">
   <ref name="sib-ss"/>
  </var>
  <pattern>
   <const>001</const>
   <ref name="ss"/>
  </pattern>
  <phrase></phrase>
  <effect>
   <const>0</const>
  </effect>
 </fragment>
</define>

<define name="sib">
 <fragment>
  <var name="base">
   <ref name="r32"/>
  </var>
  <var name="ss-index">
   <ref name="sib-ss-index"/>
  </var>
  <pattern>
   <ref name="base"/>
   <ref name="ss-index"/>
  </pattern>
  <phrase>
   <ref name="base"/>
   <ref name="ss-index"/>
  </phrase>
 </fragment>
</define>

<define name="sib-mod00">
 <fragment>
  <var name="base">
   <ref name="r32-no-bp"/>
  </var>
  <var name="ss-index">
   <ref name="sib-ss-index"/>
  </var>
  <pattern>
   <ref name="base"/>
   <ref name="ss-index"/>
  </pattern>
  <phrase>
   <ref name="base"/>
   <ref name="ss-index"/>
  </phrase>
 </fragment>

 <fragment>
  <var name="ss-index">
   <ref name="sib-ss-index"/>
  </var>
  <var name="disp">
   <integer size="32" encoding="2c"/>
  </var>
  <pattern>
   <const>101</const>
   <ref name="ss-index"/>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="disp"/>
   <ref name="ss-index"/>
  </phrase>
 </fragment>
</define>

<define name="ea16-base-no-bp">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>BX+SI</literal>
  </phrase>
  <effect>
   <add>
    <register name="BX"/>
    <register name="SI"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>BX+DI</literal>
  </phrase>
  <effect>
   <add>
    <register name="BX"/>
    <register name="DI"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>BP+SI</literal>
  </phrase>
  <effect>
   <add>
    <register name="BP"/>
    <register name="SI"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>BP+DI</literal>
  </phrase>
  <effect>
   <add>
    <register name="BP"/>
    <register name="DI"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>SI</literal>
  </phrase>
  <effect>
   <add>
    <register name="SI"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>DI</literal>
  </phrase>
  <effect>
   <add>
    <register name="DI"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>BX</literal>
  </phrase>
  <effect>
   <add>
    <register name="BX"/>
   </add>
  </effect>
 </fragment>
</define>

<define name="ea16-base-bp">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>BP</literal>
  </phrase>
  <effect>
   <add>
    <register name="BP"/>
   </add>
  </effect>
 </fragment>
</define>

<define name="ea16-base">
 <ref name="ea16-base-no-bp"/>
 <ref name="ea16-base-bp"/>
</define>

<define name="ea16">
 <fragment>
  <var name="base">
   <ref name="ea16-base-no-bp"/>
  </var>
  <pattern>
   <ref name="base"/>
  </pattern>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="base"/>
  </phrase>
  <effect>
   <ref name="base"/>
  </effect>
 </fragment>

 <fragment>
  <var name="disp">
   <integer size="16" encoding="2c"/>
  </var>
  <pattern>
   <const>011</const>
  </pattern>
  <pattern>
   <const>00</const>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="disp"/>
  </phrase>
  <effect>
   <ref name="disp"/>
  </effect>
 </fragment>

 <fragment>
  <var name="base">
   <ref name="ea16-base"/>
  </var>
  <var name="disp">
   <integer size="8" encoding="2c"/>
  </var>
  <pattern>
   <ref name="base"/>
  </pattern>
  <pattern>
   <const>10</const>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="base"/>
   <literal>+</literal>
   <ref name="disp"/>
  </phrase>
  <effect>
   <add>
    <ref name="base"/>
    <ref name="disp"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <var name="base">
   <ref name="ea16-base"/>
  </var>
  <var name="disp">
   <integer size="32" encoding="2c"/>
  </var>
  <pattern>
   <ref name="base"/>
  </pattern>
  <pattern>
   <const>01</const>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="base"/>
   <literal>+</literal>
   <ref name="disp"/>
  </phrase>
  <effect>
   <add>
    <ref name="base"/>
    <ref name="disp"/>
   </add>
  </effect>
 </fragment>
</define>

<define name="ea32">
 <fragment>
  <var name="rm">
   <ref name="r32-no-sp-bp"/>
  </var>
  <pattern>
   <ref name="rm"/>
  </pattern>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
  </phrase>
  <effect>
   <ref name="rm"/>
  </effect>
 </fragment>

 <fragment>
  <var name="sib">
   <ref name="sib-mod00"/>
  </var>
  <pattern>
   <const>001</const>
  </pattern>
  <pattern>
   <const>00</const>
   <ref name="sib"/>
  </pattern>
  <phrase>
   <ref name="sib"/>
  </phrase>
  <effect>
   <ref name="sib"/>
  </effect>
 </fragment>

 <fragment>
  <var name="disp">
   <integer size="32" encoding="2c"/>
  </var>
  <pattern>
   <const>101</const>
  </pattern>
  <pattern>
   <const>00</const>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="disp"/>
  </phrase>
  <effect>
   <ref name="disp"/>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="r32-no-sp"/>
  </var>
  <var name="disp">
   <integer size="8" encoding="2c"/>
  </var>
  <pattern>
   <ref name="rm"/>
  </pattern>
  <pattern>
   <const>10</const>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>+</literal>
   <ref name="disp"/>
  </phrase>
  <effect>
   <add>
    <ref name="rm"/>
    <ref name="disp"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <var name="sib">
   <ref name="sib"/>
  </var>
  <var name="disp">
   <integer size="8" encoding="2c"/>
  </var>
  <pattern>
   <const>001</const>
  </pattern>
  <pattern>
   <const>10</const>
   <ref name="sib"/>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="sib"/>
   <literal>+</literal>
   <ref name="disp"/>
  </phrase>
  <effect>
   <add>
    <ref name="sib"/>
    <ref name="disp"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="r32-no-sp"/>
  </var>
  <var name="disp">
   <integer size="32" encoding="2c"/>
  </var>
  <pattern>
   <ref name="rm"/>
  </pattern>
  <pattern>
   <const>01</const>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>+</literal>
   <ref name="disp"/>
  </phrase>
  <effect>
   <add>
    <ref name="rm"/>
    <ref name="disp"/>
   </add>
  </effect>
 </fragment>

 <fragment>
  <var name="sib">
   <ref name="sib"/>
  </var>
  <var name="disp">
   <integer size="32" encoding="2c"/>
  </var>
  <pattern>
   <const>001</const>
  </pattern>
  <pattern>
   <const>01</const>
   <ref name="sib"/>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="sib"/>
   <literal>+</literal>
   <ref name="disp"/>
  </phrase>
  <effect>
   <add>
    <ref name="sib"/>
    <ref name="disp"/>
   </add>
  </effect>
 </fragment>
</define>

<define name="rm8-r8-mode">
 <fragment>
  <var name="ea">
   <require name="!asvp">
    <ref name="ea32"/>
   </require>
   <require name="asvp">
    <ref name="ea16"/>
   </require>
  </var>
  <var name="seg">
   <ref name="segment"/>
  </var>
  <var name="r">
   <ref name="r8"/>
  </var>
  <pattern>
   <ref name="ea"/>
   <ref name="r"/>
   <ref name="ea"/>
   <ref name="seg"/>
  </pattern>
  <phrase>
   <literal>BYTE PTR </literal>
   <ref name="seg"/>
   <literal>[</literal>
   <ref name="ea"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="8">
      <ref name="ea"/>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r8"/>
  </var>
  <var name="rm">
   <ref name="r8"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>11</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="rm"/>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="r8-rm8-mode">
 <fragment>
  <var name="ea">
   <require name="!asvp">
    <ref name="ea32"/>
   </require>
   <require name="asvp">
    <ref name="ea16"/>
   </require>
  </var>
  <var name="seg">
   <ref name="segment"/>
  </var>
  <var name="r">
   <ref name="r8"/>
  </var>
  <pattern>
   <ref name="ea"/>
   <ref name="r"/>
   <ref name="ea"/>
   <ref name="seg"/>
  </pattern>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <literal>BYTE PTR </literal>
   <ref name="seg"/>
   <literal>[</literal>
   <ref name="ea"/>
   <literal>]</literal>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="r"/>
    <bind name="rhs">
     <memory size="8">
      <ref name="ea"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r8"/>
  </var>
  <var name="rm">
   <ref name="r8"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>11</const>
  </pattern>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <ref name="rm"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="r"/>
    <bind name="rhs" src="rm"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="rm16-r16-mode">
 <fragment>
  <var name="ea">
   <require name="!asvp">
    <ref name="ea32"/>
   </require>
   <require name="asvp">
    <ref name="ea16"/>
   </require>
  </var>
  <var name="seg">
   <ref name="segment"/>
  </var>
  <var name="r">
   <ref name="r16"/>
  </var>
  <pattern>
   <ref name="ea"/>
   <ref name="r"/>
   <ref name="ea"/>
   <ref name="seg"/>
  </pattern>
  <phrase>
   <literal>WORD PTR </literal>
   <ref name="seg"/>
   <literal>[</literal>
   <ref name="ea"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="16">
      <ref name="ea"/>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r16"/>
  </var>
  <var name="rm">
   <ref name="r16"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>11</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="rm"/>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="r16-rm16-mode">
 <fragment>
  <var name="ea">
   <require name="!asvp">
    <ref name="ea32"/>
   </require>
   <require name="asvp">
    <ref name="ea16"/>
   </require>
  </var>
  <var name="seg">
   <ref name="segment"/>
  </var>
  <var name="r">
   <ref name="r16"/>
  </var>
  <pattern>
   <ref name="ea"/>
   <ref name="r"/>
   <ref name="ea"/>
   <ref name="seg"/>
  </pattern>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <literal>WORD PTR </literal>
   <ref name="seg"/>
   <literal>[</literal>
   <ref name="ea"/>
   <literal>]</literal>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="r"/>
    <bind name="rhs">
     <memory size="16">
      <ref name="ea"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r16"/>
  </var>
  <var name="rm">
   <ref name="r16"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>11</const>
  </pattern>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <ref name="rm"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="r"/>
    <bind name="rhs" src="rm"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="rm32-r32-mode">
 <fragment>
  <var name="ea">
   <require name="!asvp">
    <ref name="ea32"/>
   </require>
   <require name="asvp">
    <ref name="ea16"/>
   </require>
  </var>
  <var name="seg">
   <ref name="segment"/>
  </var>
  <var name="r">
   <ref name="r32"/>
  </var>
  <pattern>
   <ref name="ea"/>
   <ref name="r"/>
   <ref name="ea"/>
   <ref name="seg"/>
  </pattern>
  <phrase>
   <literal>DWORD PTR </literal>
   <ref name="seg"/>
   <literal>[</literal>
   <ref name="ea"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="32">
      <ref name="ea"/>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r32"/>
  </var>
  <var name="rm">
   <ref name="r32"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>11</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="rm"/>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="r32-rm32-mode">
 <fragment>
  <var name="ea">
   <require name="!asvp">
    <ref name="ea32"/>
   </require>
   <require name="asvp">
    <ref name="ea16"/>
   </require>
  </var>
  <var name="seg">
   <ref name="segment"/>
  </var>
  <var name="r">
   <ref name="r32"/>
  </var>
  <pattern>
   <ref name="ea"/>
   <ref name="r"/>
   <ref name="ea"/>
   <ref name="seg"/>
  </pattern>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <literal>DWORD PTR </literal>
   <ref name="seg"/>
   <literal>[</literal>
   <ref name="ea"/>
   <literal>]</literal>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="r"/>
    <bind name="rhs">
     <memory size="32">
      <ref name="ea"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r32"/>
  </var>
  <var name="rm">
   <ref name="r32"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>11</const>
  </pattern>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <ref name="rm"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="r"/>
    <bind name="rhs" src="rm"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="rm-r-mode">
 <require name="!osvp">
  <ref name="rm32-r32-mode"/>
 </require>
 <require name="osvp">
  <ref name="rm16-r16-mode"/>
 </require>
</define>

<define name="r-rm-mode">
 <require name="!osvp">
  <ref name="r32-rm32-mode"/>
 </require>
 <require name="osvp">
  <ref name="r16-rm16-mode"/>
 </require>
</define>

<define name="add-instr">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <add>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="or-instr">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>OR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <or>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="adc-instr">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <add>
     <ref name="lhs"/>
     <ref name="rhs"/>
     <register name="CF"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sbb-instr">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>SBB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <sub>
     <ref name="lhs"/>
     <ref name="rhs"/>
     <register name="CF"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <and>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sub-instr">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>SUB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <sub>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xor-instr">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>XOR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <xor>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cmp-instr">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>CMP</literal>
  </phrase>
  <effect>
   <sub>
    <ref name="lhs"/>
    <ref name="rhs"/>
   </sub>
  </effect>
 </fragment>
</define>

<start>
 <prefix name="osvp">01100110</prefix>
 <prefix name="asvp">11100110</prefix>
 <prefix name="esvp">01100100</prefix>
 <prefix name="csvp">01110100</prefix>
 <prefix name="ssvp">01101100</prefix>
 <prefix name="dsvp">01111100</prefix>
 <prefix name="fsvp">00100110</prefix>
 <prefix name="gsvp">10100110</prefix>

 <fragment>
  <var name="opcode">
   <ref name="add-instr"/>
   <ref name="or-instr"/>
   <ref name="adc-instr"/>
   <ref name="sbb-instr"/>
   <ref name="and-instr"/>
   <ref name="sub-instr"/>
   <ref name="xor-instr"/>
   <ref name="cmp-instr"/>
  </var>
  <var name="operand">
   <ref name="rm8-r8-mode"/>
  </var>
  <pattern>
   <const>000</const>
   <ref name="opcode"/>
   <const>00</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operand">
    <bind name="opcode" ref="opcode"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="add-instr"/>
   <ref name="or-instr"/>
   <ref name="adc-instr"/>
   <ref name="sbb-instr"/>
   <ref name="and-instr"/>
   <ref name="sub-instr"/>
   <ref name="xor-instr"/>
   <ref name="cmp-instr"/>
  </var>
  <var name="operand">
   <ref name="rm-r-mode"/>
  </var>
  <pattern>
   <const>100</const>
   <ref name="opcode"/>
   <const>00</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operand">
    <bind name="opcode" ref="opcode"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="add-instr"/>
   <ref name="or-instr"/>
   <ref name="adc-instr"/>
   <ref name="sbb-instr"/>
   <ref name="and-instr"/>
   <ref name="sub-instr"/>
   <ref name="xor-instr"/>
   <ref name="cmp-instr"/>
  </var>
  <var name="operand">
   <ref name="r-rm-mode"/>
  </var>
  <pattern>
   <const>110</const>
   <ref name="opcode"/>
   <const>00</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operand">
    <bind name="opcode" ref="opcode"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="add-instr"/>
   <ref name="or-instr"/>
   <ref name="adc-instr"/>
   <ref name="sbb-instr"/>
   <ref name="and-instr"/>
   <ref name="sub-instr"/>
   <ref name="xor-instr"/>
   <ref name="cmp-instr"/>
  </var>
  <var name="operand">
   <ref name="r8-rm8-mode"/>
  </var>
  <pattern>
   <const>010</const>
   <ref name="opcode"/>
   <const>00</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operand">
    <bind name="opcode" ref="opcode"/>
   </ref>
  </effect>
 </fragment>
</start>
</cpudl>
