<!--
This file is part of Codemancer.
Copyright 2014 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="little">
<cpu name="x86"/>

<style>
 <property name="base" value="16"/>
 <property name="prefix" value=""/>
 <property name="suffix" value="H"/>
 <property name="whitespace" value=" "/>
</style>

<register name="EAX" size="32"/>
<register name="ECX" size="32"/>
<register name="EDX" size="32"/>
<register name="EBX" size="32"/>
<register name="ESP" size="32"/>
<register name="EBP" size="32"/>
<register name="ESI" size="32"/>
<register name="EDI" size="32"/>

<register name="CF" size="1"/>
<register name="PF" size="1"/>
<register name="AF" size="1"/>
<register name="ZF" size="1"/>
<register name="SF" size="1"/>
<register name="TF" size="1"/>
<register name="IF" size="1"/>
<register name="DF" size="1"/>
<register name="OF" size="1"/>

<define name="eax">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>EAX</literal>
  </phrase>
  <effect>
   <register name="EAX"/>
  </effect>
 </fragment>
</define>

<define name="ecx">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>ECX</literal>
  </phrase>
  <effect>
   <register name="ECX"/>
  </effect>
 </fragment>
</define>

<define name="edx">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>EDX</literal>
  </phrase>
  <effect>
   <register name="EDX"/>
  </effect>
 </fragment>
</define>

<define name="ebx">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>EBX</literal>
  </phrase>
  <effect>
   <register name="EBX"/>
  </effect>
 </fragment>
</define>

<define name="esp">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>ESP</literal>
  </phrase>
  <effect>
   <register name="ESP"/>
  </effect>
 </fragment>
</define>

<define name="ebp">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>EBP</literal>
  </phrase>
  <effect>
   <register name="EBP"/>
  </effect>
 </fragment>
</define>

<define name="esi">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>ESI</literal>
  </phrase>
  <effect>
   <register name="ESI"/>
  </effect>
 </fragment>
</define>

<define name="edi">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>EDI</literal>
  </phrase>
  <effect>
   <register name="EDI"/>
  </effect>
 </fragment>
</define>

<define name="r32">
 <ref name="eax"/>
 <ref name="ecx"/>
 <ref name="edx"/>
 <ref name="ebx"/>
 <ref name="esp"/>
 <ref name="ebp"/>
 <ref name="esi"/>
 <ref name="edi"/>
</define>

<define name="r32-no-sp">
 <ref name="eax"/>
 <ref name="ecx"/>
 <ref name="edx"/>
 <ref name="ebx"/>
 <ref name="ebp"/>
 <ref name="esi"/>
 <ref name="edi"/>
</define>

<define name="r32-no-bp">
 <ref name="eax"/>
 <ref name="ecx"/>
 <ref name="edx"/>
 <ref name="ebx"/>
 <ref name="esp"/>
 <ref name="esi"/>
 <ref name="edi"/>
</define>

<define name="r32-no-sp-bp">
 <ref name="eax"/>
 <ref name="ecx"/>
 <ref name="edx"/>
 <ref name="ebx"/>
 <ref name="esi"/>
 <ref name="edi"/>
</define>

<define name="sib-ss">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase></phrase>
  <effect>
   <const>1</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>*2</literal>
  </phrase>
  <effect>
   <const>2</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>*4</literal>
  </phrase>
  <effect>
   <const>4</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>*8</literal>
  </phrase>
  <effect>
   <const>8</const>
  </effect>
 </fragment>
</define>

<define name="sib-ss-index">
 <fragment>
  <var name="index">
   <ref name="r32-no-sp"/>
  </var>
  <var name="ss">
   <ref name="sib-ss"/>
  </var>
  <pattern>
   <ref name="index"/>
   <ref name="ss"/>
  </pattern>
  <phrase>
   <literal>+</literal>
   <ref name="index"/>
   <ref name="ss"/>
  </phrase>
  <effect>
   <mul>
    <ref name="index"/>
    <ref name="ss"/>
   </mul>
  </effect>
 </fragment>

 <fragment>
  <var name="ss">
   <ref name="sib-ss"/>
  </var>
  <pattern>
   <const>001</const>
   <ref name="ss"/>
  </pattern>
  <phrase></phrase>
  <effect>
   <const>0</const>
  </effect>
 </fragment>
</define>

<define name="sib">
 <fragment>
  <var name="base">
   <ref name="r32"/>
  </var>
  <var name="ss-index">
   <ref name="sib-ss-index"/>
  </var>
  <pattern>
   <ref name="base"/>
   <ref name="ss-index"/>
  </pattern>
  <phrase>
   <ref name="base"/>
   <ref name="ss-index"/>
  </phrase>
 </fragment>
</define>

<define name="sib-mod00">
 <fragment>
  <var name="base">
   <ref name="r32-no-bp"/>
  </var>
  <var name="ss-index">
   <ref name="sib-ss-index"/>
  </var>
  <pattern>
   <ref name="base"/>
   <ref name="ss-index"/>
  </pattern>
  <phrase>
   <ref name="base"/>
   <ref name="ss-index"/>
  </phrase>
 </fragment>

 <fragment>
  <var name="ss-index">
   <ref name="sib-ss-index"/>
  </var>
  <var name="disp">
   <integer size="32" encoding="2c"/>
  </var>
  <pattern>
   <const>101</const>
   <ref name="ss-index"/>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <ref name="disp"/>
   <ref name="ss-index"/>
  </phrase>
 </fragment>
</define>

<define name="rm8-r8-mode">
 <fragment>
  <var name="rm">
   <ref name="r32-no-sp-bp"/>
  </var>
  <var name="r">
   <ref name="r32"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>00</const>
  </pattern>
  <phrase>
   <literal>DWORD PTR [</literal>
   <ref name="rm"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="32">
      <ref name="rm"/>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r32"/>
  </var>
  <var name="sib">
   <ref name="sib-mod00"/>
  </var>
  <pattern>
   <const>001</const>
   <ref name="r"/>
   <const>00</const>
   <ref name="sib"/>
  </pattern>
  <phrase>
   <literal>DWORD PTR [</literal>
   <ref name="sib"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="32">
      <ref name="sib"/>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r32"/>
  </var>
  <var name="disp">
   <integer size="32" encoding="2c"/>
  </var>
  <pattern>
   <const>101</const>
   <ref name="r"/>
   <const>00</const>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <literal>DWORD PTR [</literal>
   <ref name="disp"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="32">
      <ref name="disp"/>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="r32-no-sp"/>
  </var>
  <var name="r">
   <ref name="r32"/>
  </var>
  <var name="disp">
   <integer size="8" encoding="2c"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>10</const>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <literal>DWORD PTR [</literal>
   <ref name="rm"/>
   <literal>+</literal>
   <ref name="disp"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="32">
      <add>
       <ref name="rm"/>
       <ref name="disp"/>
      </add>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r32"/>
  </var>
  <var name="sib">
   <ref name="sib"/>
  </var>
  <var name="disp">
   <integer size="8" encoding="2c"/>
  </var>
  <pattern>
   <const>001</const>
   <ref name="r"/>
   <const>10</const>
   <ref name="sib"/>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <literal>DWORD PTR [</literal>
   <ref name="sib"/>
   <literal>+</literal>
   <ref name="disp"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="32">
      <add>
       <ref name="sib"/>
       <ref name="disp"/>
      </add>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="r32-no-sp"/>
  </var>
  <var name="r">
   <ref name="r32"/>
  </var>
  <var name="disp">
   <integer size="32" encoding="2c"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>01</const>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <literal>DWORD PTR [</literal>
   <ref name="rm"/>
   <literal>+</literal>
   <ref name="disp"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="32">
      <add>
       <ref name="rm"/>
       <ref name="disp"/>
      </add>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r32"/>
  </var>
  <var name="sib">
   <ref name="sib"/>
  </var>
  <var name="disp">
   <integer size="32" encoding="2c"/>
  </var>
  <pattern>
   <const>001</const>
   <ref name="r"/>
   <const>01</const>
   <ref name="sib"/>
   <ref name="disp"/>
  </pattern>
  <phrase>
   <literal>DWORD PTR [</literal>
   <ref name="sib"/>
   <literal>+</literal>
   <ref name="disp"/>
   <literal>],</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs">
     <memory size="32">
      <add>
       <ref name="sib"/>
       <ref name="disp"/>
      </add>
     </memory>
    </bind>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="r32"/>
  </var>
  <var name="rm">
   <ref name="r32"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="r"/>
   <const>11</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="lhs" src="rm"/>
    <bind name="rhs" src="r"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="add-instr">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <add>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="or-instr">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>OR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <or>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="adc-instr">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <add>
     <ref name="lhs"/>
     <ref name="rhs"/>
     <register name="CF"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sbb-instr">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>SBB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <sub>
     <ref name="lhs"/>
     <ref name="rhs"/>
     <register name="CF"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <and>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sub-instr">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>SUB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <sub>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xor-instr">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>XOR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="lhs"/>
    <xor>
     <ref name="lhs"/>
     <ref name="rhs"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cmp-instr">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>CMP</literal>
  </phrase>
  <effect>
   <sub>
    <ref name="lhs"/>
    <ref name="rhs"/>
   </sub>
  </effect>
 </fragment>
</define>

<start>
 <fragment>
  <var name="opcode">
   <ref name="add-instr"/>
   <ref name="or-instr"/>
   <ref name="adc-instr"/>
   <ref name="sbb-instr"/>
   <ref name="and-instr"/>
   <ref name="sub-instr"/>
   <ref name="xor-instr"/>
   <ref name="cmp-instr"/>
  </var>
  <var name="operand">
   <ref name="rm8-r8-mode"/>
  </var>
  <pattern>
   <const>100</const>
   <ref name="opcode"/>
   <const>00</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operand">
    <bind name="opcode" ref="opcode"/>
   </ref>
  </effect>
 </fragment>
</start>
</cpudl>
