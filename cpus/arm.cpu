<!--
This file is part of libcpudl.
Copyright 2013 Graham Shaw
Redistribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl>
<style>
 <property name="base" value="16"/>
 <property name="prefix" value="&amp;"/>
</style>

<register name="R0" size="32"/>
<register name="R1" size="32"/>
<register name="R2" size="32"/>
<register name="R3" size="32"/>
<register name="R4" size="32"/>
<register name="R5" size="32"/>
<register name="R6" size="32"/>
<register name="R7" size="32"/>
<register name="R8" size="32"/>
<register name="R9" size="32"/>
<register name="R10" size="32"/>
<register name="R11" size="32"/>
<register name="R12" size="32"/>
<register name="R13" size="32"/>
<register name="LR" size="32"/>
<register name="PC" size="32"/>

<register name="V" size="1"/>
<register name="C" size="1"/>
<register name="Z" size="1"/>
<register name="N" size="1"/>

<define name="register">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>R0</literal>
  </phrase>
  <effect>
   <register name="R0"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>R1</literal>
  </phrase>
  <effect>
   <register name="R1"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>R2</literal>
  </phrase>
  <effect>
   <register name="R2"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>R3</literal>
  </phrase>
  <effect>
   <register name="R3"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>R4</literal>
  </phrase>
  <effect>
   <register name="R4"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>R5</literal>
  </phrase>
  <effect>
   <register name="R5"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>R6</literal>
  </phrase>
  <effect>
   <register name="R6"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>R7</literal>
  </phrase>
  <effect>
   <register name="R7"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0001</const>
  </pattern>
  <phrase>
   <literal>R8</literal>
  </phrase>
  <effect>
   <register name="R8"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>R9</literal>
  </phrase>
  <effect>
   <register name="R9"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>R10</literal>
  </phrase>
  <effect>
   <register name="R10"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1101</const>
  </pattern>
  <phrase>
   <literal>R11</literal>
  </phrase>
  <effect>
   <register name="R11"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>R12</literal>
  </phrase>
  <effect>
   <register name="R12"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>R13</literal>
  </phrase>
  <effect>
   <register name="R13"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal>LR</literal>
  </phrase>
  <effect>
   <register name="LR"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>PC</literal>
  </phrase>
  <effect>
   <register name="PC"/>
  </effect>
 </fragment>
</define>

<define name="cc">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>EQ</literal>
  </phrase>
  <effect>
   <equals>
    <register name="Z"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>NE</literal>
  </phrase>
  <effect>
   <equals>
    <register name="Z"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>CS</literal>
  </phrase>
  <effect>
   <equals>
    <register name="C"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>CC</literal>
  </phrase>
  <effect>
   <equals>
    <register name="C"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>MI</literal>
  </phrase>
  <effect>
   <equals>
    <register name="N"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>PL</literal>
  </phrase>
  <effect>
   <equals>
    <register name="N"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>VS</literal>
  </phrase>
  <effect>
   <equals>
    <register name="V"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>VC</literal>
  </phrase>
  <effect>
   <equals>
    <register name="V"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0001</const>
  </pattern>
  <phrase>
   <literal>HI</literal>
  </phrase>
  <effect>
   <and>
    <equals>
     <register name="Z"/>
     <const>0</const>
    </equals>
    <equals>
     <register name="C"/>
     <const>1</const>
    </equals>
   </and>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>LS</literal>
  </phrase>
  <effect>
   <and>
    <equals>
     <register name="Z"/>
     <const>1</const>
    </equals>
    <equals>
     <register name="C"/>
     <const>0</const>
    </equals>
   </and>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>GE</literal>
  </phrase>
  <effect>
   <equals>
    <xor>
     <register name="N"/>
     <register name="V"/>
    </xor>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1101</const>
  </pattern>
  <phrase>
   <literal>LT</literal>
  </phrase>
  <effect>
   <equals>
    <xor>
     <register name="N"/>
     <register name="V"/>
    </xor>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>GT</literal>
  </phrase>
  <effect>
   <and>
    <equals>
     <register name="Z"/>
     <const>0</const>
    </equals>
    <equals>
     <xor>
      <register name="N"/>
      <register name="V"/>
     </xor>
     <const>0</const>
    </equals>
   </and>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>LE</literal>
  </phrase>
  <effect>
   <or>
    <equals>
     <register name="Z"/>
     <const>1</const>
    </equals>
    <equals>
     <xor>
      <register name="N"/>
      <register name="V"/>
     </xor>
     <const>1</const>
    </equals>
   </or>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal></literal>
  </phrase>
  <effect>
   <const>1</const>
  </effect>
 </fragment>
</define>

<define name="s-bit">
 <choice>
  <fragment>
   <pattern>
    <const>0</const>
   </pattern>
   <phrase></phrase>
  </fragment>

  <fragment>
   <pattern>
    <const>1</const>
   </pattern>
   <phrase>
    <literal>S</literal>
   </phrase>
  </fragment>
 </choice>
</define>

<define name="alu-operand">
 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <const>00000000</const>
  </pattern>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
  </phrase>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <and>
     <ref name="rn"/>
     <ref name="operand"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <and>
     <ref name="rn"/>
     <ref name="operand"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="eor-instr">
 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>EOR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <xor>
     <ref name="rn"/>
     <ref name="operand"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sub-instr">
 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>SUB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <sub>
     <ref name="rn"/>
     <ref name="operand"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rsb-instr">
 <fragment>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>RSB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <sub>
     <ref name="operand"/>
     <ref name="rn"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="add-instr">
 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <add>
     <ref name="rn"/>
     <ref name="operand"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="adc-instr">
 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <add>
     <ref name="rn"/>
     <ref name="operand"/>
     <ref name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sbc-instr">
 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>SBC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <sub>
     <ref name="rn"/>
     <ref name="operand"/>
     <xor>
      <ref name="C"/>
      <const>1</const>
     </xor>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rsc-instr">
 <fragment>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>RSC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <sub>
     <ref name="operand"/>
     <ref name="rn"/>
     <xor>
      <ref name="C"/>
      <const>1</const>
     </xor>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tst-instr">
 <fragment>
  <pattern>
   <const>0001</const>
  </pattern>
  <phrase>
   <literal>TST</literal>
  </phrase>
  <effect>
   <and>
    <ref name="operand"/>
    <ref name="rn"/>
   </and>
  </effect>
 </fragment>
</define>

<define name="teq-instr">
 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>TEQ</literal>
  </phrase>
  <effect>
   <xor>
    <ref name="operand"/>
    <ref name="rn"/>
   </xor>
  </effect>
 </fragment>
</define>

<define name="cmp-instr">
 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>CMP</literal>
  </phrase>
  <effect>
   <sub>
    <ref name="operand"/>
    <ref name="rn"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="cmn-instr">
 <fragment>
  <pattern>
   <const>1101</const>
  </pattern>
  <phrase>
   <literal>CMN</literal>
  </phrase>
  <effect>
   <add>
    <ref name="operand"/>
    <ref name="rn"/>
   </add>
  </effect>
 </fragment>
</define>

<define name="orr-instr">
 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>ORR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <or>
     <ref name="rn"/>
     <ref name="operand"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="mov-instr">
 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>MOV</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bic-instr">
 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal>BIC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <and>
     <ref name="rn"/>
     <xor>
      <ref name="operand"/>
      <const>0xFFFFFFFF</const>
     </xor>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="mvn-instr">
 <fragment>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>MVN</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <xor>
     <ref name="operand"/>
     <const>0xFFFFFFFF</const>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="alu-instr">
 <fragment>
  <var name="opcode">
   <ref name="and-instr"/>
   <ref name="eor-instr"/>
   <ref name="sub-instr"/>
   <ref name="rsb-instr"/>
   <ref name="add-instr"/>
   <ref name="adc-instr"/>
   <ref name="sbc-instr"/>
   <ref name="rsc-instr"/>
   <ref name="orr-instr"/>
   <ref name="bic-instr"/>
  </var>
  <var name="rd">
   <ref name="register"/>
  </var>
  <var name="rn">
   <ref name="register"/>
  </var>
  <var name="operand">
   <ref name="alu-operand"/>
  </var>
  <var name="s">
   <ref name="s-bit"/>
  </var>
  <pattern>
   <ref name="operand"/>
   <ref name="rd"/>
   <ref name="rn"/>
   <ref name="s"/>
   <ref name="opcode"/>
   <ref name="operand"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="s"/>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="rn"/>
   <literal>,</literal><ws/>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="rd" src="rd"/>
    <bind name="rn" src="rd"/>
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="tst-instr"/>
   <ref name="teq-instr"/>
   <ref name="cmp-instr"/>
   <ref name="cmn-instr"/>
  </var>
  <var name="rn">
   <ref name="register"/>
  </var>
  <var name="operand">
   <ref name="alu-operand"/>
  </var>
  <pattern>
   <ref name="operand"/>
   <const>0000</const>
   <ref name="rn"/>
   <const>1</const>
   <ref name="opcode"/>
   <ref name="operand"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase></phrase>
  <phrase>
   <ref name="rn"/>
   <literal>,</literal><ws/>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="rn" src="rd"/>
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="mov-instr"/>
   <ref name="mvn-instr"/>
  </var>
  <var name="rd">
   <ref name="register"/>
  </var>
  <var name="operand">
   <ref name="alu-operand"/>
  </var>
  <var name="s">
   <ref name="s-bit"/>
  </var>
  <pattern>
   <ref name="operand"/>
   <ref name="rd"/>
   <const>0000</const>
   <ref name="s"/>
   <ref name="opcode"/>
   <ref name="operand"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="s"/>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="rd" src="rd"/>
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>
</define>

<start>
 <fragment>
  <var name="opcode">
   <ref name="alu-instr"/>
  </var>
  <var name="cc">
   <ref name="cc"/>
  </var>
  <pattern>
   <ref name="opcode"/>
   <ref name="cc"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
   <ref name="cc"/>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <effect>
   <ref name="opcode"/>
  </effect>
 </fragment>
</start>
</cpudl>
