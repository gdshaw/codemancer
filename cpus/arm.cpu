<!--
This file is part of libcpudl.
Copyright 2013 Graham Shaw
Redistribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl>
<style>
 <property name="whitespace" value=" "/>
 <property name="base" value="16"/>
 <property name="prefix" value="&amp;"/>
 <select class="shift">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
 <select class="offset">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
 <select class="addr">
  <property name="width" value="8"/>
 </select>
 <select class="registers">
  <property name="separator" value=", "/>
 </select>
 <select class="swi">
  <property name="width" value="6"/>
 </select>
</style>

<register name="R0" size="32"/>
<register name="R1" size="32"/>
<register name="R2" size="32"/>
<register name="R3" size="32"/>
<register name="R4" size="32"/>
<register name="R5" size="32"/>
<register name="R6" size="32"/>
<register name="R7" size="32"/>
<register name="R8" size="32"/>
<register name="R9" size="32"/>
<register name="R10" size="32"/>
<register name="R11" size="32"/>
<register name="R12" size="32"/>
<register name="R13" size="32"/>
<register name="LR" size="32"/>
<register name="PC" size="32"/>

<register name="V" size="1"/>
<register name="C" size="1"/>
<register name="Z" size="1"/>
<register name="N" size="1"/>

<define name="register">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>R0</literal>
  </phrase>
  <effect>
   <register name="R0"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>R1</literal>
  </phrase>
  <effect>
   <register name="R1"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>R2</literal>
  </phrase>
  <effect>
   <register name="R2"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>R3</literal>
  </phrase>
  <effect>
   <register name="R3"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>R4</literal>
  </phrase>
  <effect>
   <register name="R4"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>R5</literal>
  </phrase>
  <effect>
   <register name="R5"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>R6</literal>
  </phrase>
  <effect>
   <register name="R6"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>R7</literal>
  </phrase>
  <effect>
   <register name="R7"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0001</const>
  </pattern>
  <phrase>
   <literal>R8</literal>
  </phrase>
  <effect>
   <register name="R8"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>R9</literal>
  </phrase>
  <effect>
   <register name="R9"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>R10</literal>
  </phrase>
  <effect>
   <register name="R10"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1101</const>
  </pattern>
  <phrase>
   <literal>R11</literal>
  </phrase>
  <effect>
   <register name="R11"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>R12</literal>
  </phrase>
  <effect>
   <register name="R12"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>R13</literal>
  </phrase>
  <effect>
   <register name="R13"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal>LR</literal>
  </phrase>
  <effect>
   <register name="LR"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>PC</literal>
  </phrase>
  <effect>
   <register name="PC"/>
  </effect>
 </fragment>
</define>

<define name="register-list">
 <bitmap class="registers" count="i" total="n" effect="r">
  <bit name="R0">
   <register name="R0"/>
  </bit>
  <bit name="R1">
   <register name="R1"/>
  </bit>
  <bit name="R2">
   <register name="R2"/>
  </bit>
  <bit name="R3">
   <register name="R3"/>
  </bit>
  <bit name="R4">
   <register name="R4"/>
  </bit>
  <bit name="R5">
   <register name="R5"/>
  </bit>
  <bit name="R6">
   <register name="R6"/>
  </bit>
  <bit name="R7">
   <register name="R7"/>
  </bit>
  <bit name="R8">
   <register name="R8"/>
  </bit>
  <bit name="R9">
   <register name="R9"/>
  </bit>
  <bit name="R10">
   <register name="R10"/>
  </bit>
  <bit name="R11">
   <register name="R11"/>
  </bit>
  <bit name="R12">
   <register name="R12"/>
  </bit>
  <bit name="R13">
   <register name="R13"/>
  </bit>
  <bit name="LR">
   <register name="LR"/>
  </bit>
  <bit name="PC">
   <register name="PC"/>
  </bit>
  <effect name="foreach">
   <ref name="foreach">
    <bind name="r" src="r"/>
    <bind name="i" src="i"/>
    <bind name="n" src="n"/>
   </ref>
  </effect>
 </bitmap>
</define>

<define name="cc">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>EQ</literal>
  </phrase>
  <effect>
   <equals>
    <register name="Z"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>NE</literal>
  </phrase>
  <effect>
   <equals>
    <register name="Z"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>CS</literal>
  </phrase>
  <effect>
   <equals>
    <register name="C"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>CC</literal>
  </phrase>
  <effect>
   <equals>
    <register name="C"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>MI</literal>
  </phrase>
  <effect>
   <equals>
    <register name="N"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>PL</literal>
  </phrase>
  <effect>
   <equals>
    <register name="N"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>VS</literal>
  </phrase>
  <effect>
   <equals>
    <register name="V"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>VC</literal>
  </phrase>
  <effect>
   <equals>
    <register name="V"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0001</const>
  </pattern>
  <phrase>
   <literal>HI</literal>
  </phrase>
  <effect>
   <and>
    <equals>
     <register name="Z"/>
     <const>0</const>
    </equals>
    <equals>
     <register name="C"/>
     <const>1</const>
    </equals>
   </and>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>LS</literal>
  </phrase>
  <effect>
   <and>
    <equals>
     <register name="Z"/>
     <const>1</const>
    </equals>
    <equals>
     <register name="C"/>
     <const>0</const>
    </equals>
   </and>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>GE</literal>
  </phrase>
  <effect>
   <equals>
    <xor>
     <register name="N"/>
     <register name="V"/>
    </xor>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1101</const>
  </pattern>
  <phrase>
   <literal>LT</literal>
  </phrase>
  <effect>
   <equals>
    <xor>
     <register name="N"/>
     <register name="V"/>
    </xor>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>GT</literal>
  </phrase>
  <effect>
   <and>
    <equals>
     <register name="Z"/>
     <const>0</const>
    </equals>
    <equals>
     <xor>
      <register name="N"/>
      <register name="V"/>
     </xor>
     <const>0</const>
    </equals>
   </and>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>LE</literal>
  </phrase>
  <effect>
   <or>
    <equals>
     <register name="Z"/>
     <const>1</const>
    </equals>
    <equals>
     <xor>
      <register name="N"/>
      <register name="V"/>
     </xor>
     <const>1</const>
    </equals>
   </or>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal></literal>
  </phrase>
  <effect>
   <const>1</const>
  </effect>
 </fragment>
</define>

<define name="shift-opcode">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <literal>LSL</literal>
  </phrase>
  <effect>
   <shift width="32" method="logical" carry="C">
    <ref name="rm"/>
    <ref name="distance"/>
   </shift>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>LSR</literal>
  </phrase>
  <effect>
   <shift width="32" method="logical" carry="C">
    <ref name="rm"/>
    <sub>
     <const>0</const>
     <ref name="distance"/>
    </sub>
   </shift>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>ASR</literal>
  </phrase>
  <effect>
   <shift width="32" method="arithmetic" carry="C">
    <ref name="rm"/>
    <sub>
     <const>0</const>
     <ref name="distance"/>
    </sub>
   </shift>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>ROR</literal>
  </phrase>
  <effect>
   <shift width="32" method="rotation" carry="C">
    <ref name="rm"/>
    <sub>
     <const>0</const>
     <ref name="distance"/>
    </sub>
   </shift>
  </effect>
 </fragment>
</define>

<define name="ls-opcode">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>ST</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <ref name="rd"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="s-bit">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase></phrase>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>S</literal>
  </phrase>
 </fragment>
</define>

<define name="u-bit">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>-</literal>
  </phrase>
  <effect>
   <sub>
    <const>0</const>
    <ref name="offset"/>
   </sub>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>+</literal>
  </phrase>
  <effect>
   <ref name="offset"/>
  </effect>
 </fragment>
</define>

<define name="w-bit">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal></literal>
  </phrase>
  <effect>
   <const>0</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>!</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rn"/>
    <ref name="wrn"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="b-bit">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal></literal>
  </phrase>
  <effect>
   <const>4</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>B</literal>
  </phrase>
  <effect>
   <const>1</const>
  </effect>
 </fragment>
</define>

<define name="l-bit">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase></phrase>
  <effect></effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>L</literal>
  </phrase>
  <effect>
   <assign>
    <register name="LR"/>
    <register name="PC"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="p-suffix">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal></literal>
  </phrase>
 </fragment>

 <fragment>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>P</literal>
  </phrase>
 </fragment>
</define>

<define name="alu-operand">
 <priority level="1">
  <fragment>
   <var name="imm">
    <integer size="8"/>
   </var>
   <var name="rot-imm">
    <integer size="4"/>
   </var>
   <var name="imm2">
    <integer size="32"/>
   </var>
   <where>
    <equals>
     <ref name="imm2"/>
     <shift width="32" method="rotation">
      <ref name="imm"/>
      <sub>
       <const>0</const>
       <mul>
        <ref name="rot-imm"/>
        <const>2</const>
       </mul>
      </sub>
     </shift>
    </equals>
   </where>
   <where>
    <xor>
     <equals>
      <and>
       <ref name="imm"/>
       <const>3</const>
      </and>
      <const>0</const>
     </equals>
     <const>1</const>
    </xor>
   </where>
   <pattern>
    <ref name="imm"/>
    <ref name="rot-imm"/>
   </pattern>
   <pattern>
    <const>1</const>
   </pattern>
   <phrase>
    <literal>#</literal>
    <ref name="imm2"/>
   </phrase>
   <effect>
    <shift width="32" method="rotation">
     <ref name="imm"/>
     <sub>
      <const>0</const>
      <ref name="rot-imm"/>
      <ref name="rot-imm"/>
     </sub>
    </shift>
   </effect>
  </fragment>
 </priority>

 <fragment>
  <var name="imm">
   <integer size="8"/>
  </var>
  <var name="rot-imm">
   <integer size="4"/>
  </var>
  <var name="rot-imm2">
   <integer class="shift" size="5"/>
  </var>
  <where>
   <equals>
    <ref name="rot-imm2"/>
    <mul>
     <ref name="rot-imm"/>
     <const>2</const>
    </mul>
   </equals>
  </where>
  <pattern>
   <ref name="imm"/>
   <ref name="rot-imm"/>
  </pattern>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>#</literal>
   <ref name="imm"/>
   <literal>,</literal><ws class="shift"/>
   <ref name="rot-imm2"/>
  </phrase>
  <effect>
   <shift width="32" method="rotation">
    <ref name="imm"/>
    <sub>
     <const>0</const>
     <ref name="rot-imm"/>
     <ref name="rot-imm"/>
    </sub>
   </shift>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <const>00000000</const>
  </pattern>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
  </phrase>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <const>01000000</const>
  </pattern>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <literal>LSR</literal><ws class="shift"/>
   <literal>#32</literal>
  </phrase>
  <effect>
   <shift width="32" method="logical" carry="C">
    <ref name="rm"/>
    <const>-32</const>
   </shift>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <const>00100000</const>
  </pattern>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <literal>ASR</literal><ws class="shift"/>
   <literal>#32</literal>
  </phrase>
  <effect>
   <shift width="32" method="arithmetic" carry="C">
    <ref name="rm"/>
    <const>-32</const>
   </shift>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <const>01100000</const>
  </pattern>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <literal>RRX</literal>
  </phrase>
  <effect>
   <shift width="32" method="extended" carry="C">
   <ref name="rm"/>
    <const>-1</const>
   </shift>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <var name="shift">
   <ref name="shift-opcode"/>
  </var>
  <var name="distance">
   <integer size="5" class="shift"/>
  </var>
  <where>
   <not>
    <equal>
     <ref name="distance"/>
     <const>0</const>
    </equal>
   </not>
  </where>
  <pattern>
   <ref name="rm"/>
   <const>0</const>
   <ref name="shift"/>
   <ref name="distance"/>
  </pattern>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <ref name="shift"/><ws class="shift"/>
   <literal>#</literal>
   <ref name="distance"/>
  </phrase>
  <effect>
   <ref name="shift">
    <bind name="rm" src="rm"/>
    <bind name="distance" src="distance"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <var name="shift">
   <ref name="shift-opcode"/>
  </var>
  <var name="distance">
   <ref name="register"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <const>1</const>
   <ref name="shift"/>
   <const>0</const>
   <ref name="distance"/>
  </pattern>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <ref name="shift"/><ws class="shift"/>
   <ref name="distance"/>
  </phrase>
  <effect>
   <ref name="shift">
    <bind name="rm" src="rm"/>
    <bind name="distance" src="distance"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="ls-shifted-offset">
 <fragment>
  <pattern>
   <const>00000000</const>
  </pattern>
  <phrase></phrase>
  <effect>
   <ref name="rm"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01000000</const>
  </pattern>
  <phrase>
   <literal>,</literal><ws/>
   <literal>LSR</literal><ws class="shift"/>
   <literal>#0</literal>
  </phrase>
  <effect>
   <ref name="rm"/>
  </effect>
 </fragment>
 <fragment>
  <pattern>
   <const>00100000</const>
  </pattern>
  <phrase>
   <literal>,</literal><ws/>
   <literal>ASR</literal><ws class="shift"/>
   <literal>#0</literal>
  </phrase>
  <effect>
   <ref name="rm"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01100000</const>
  </pattern>
  <phrase>
   <literal>,</literal><ws/>
   <literal>RRX</literal>
  </phrase>
  <effect>
   <shift width="32" method="extended" carry="C">
    <ref name="rm"/>
    <const>-1</const>
   </shift>
  </effect>
 </fragment>

 <fragment>
  <var name="shift">
   <ref name="shift-opcode"/>
  </var>
  <var name="distance">
   <integer size="5" class="shift"/>
  </var>
  <pattern>
   <const>0</const>
   <ref name="shift"/>
   <ref name="distance"/>
  </pattern>
  <phrase>
   <literal>,</literal><ws/>
   <ref name="shift"/><ws class="shift"/>
   <literal>#</literal>
   <ref name="distance"/>
  </phrase>
  <effect>
   <ref name="shift">
    <bind name="rm" src="rm"/>
    <bind name="distance" src="distance"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="ls-unsigned-offset">
 <fragment>
  <var name="offset">
   <integer size="12" class="offset"/>
  </var>
  <pattern>
   <ref name="offset"/>
  </pattern>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>#</literal>
  </phrase>
  <phrase>
   <ref name="offset"/>
  </phrase>
  <effect>
   <ref name="offset"/>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <var name="shift">
   <ref name="ls-shifted-offset"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <ref name="shift"/>
  </pattern>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase></phrase>
  <phrase>
   <ref name="rm"/>
   <ref name="shift"/>
  </phrase>
  <effect>
   <ref name="shift">
    <bind name="rm" src="rm"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="ls-signed-offset">
 <fragment>
  <var name="offset">
   <ref name="ls-unsigned-offset"/>
  </var>
  <var name="u">
   <ref name="u-bit"/>
  </var>
  <pattern>
   <ref name="offset"/>
  </pattern>
  <pattern>
   <ref name="u"/>
  </pattern>
  <pattern>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <ref name="offset"/>
   <ref name="u"/>
   <ref name="offset"/>
  </phrase>
  <effect>
   <ref name="u">
    <bind name="offset" src="offset"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="ls-operand">
 <fragment>
  <var name="offset">
   <ref name="ls-signed-offset"/>
  </var>
  <var name="rn">
   <ref name="register"/>
  </var>
  <pattern>
   <ref name="offset"/>
  </pattern>
  <pattern>
   <ref name="rn"/>
  </pattern>
  <pattern>
   <const>0</const>
  </pattern>
  <pattern>
   <ref name="offset"/>
   <const>0</const>
   <ref name="offset"/>
  </pattern>
  <phrase></phrase>
  <phrase>
   <literal>[</literal>
   <ref name="rn"/>
   <literal>],</literal><ws/>
   <ref name="offset"/>
  </phrase>
  <effect>
   <memory>
    <add>
     <ref name="rn"/>
     <ref name="offset"/>
    </add>
   </memory>
  </effect>
 </fragment>

 <fragment>
  <var name="offset">
   <ref name="ls-signed-offset"/>
  </var>
  <var name="rn">
   <ref name="register"/>
  </var>
  <pattern>
   <ref name="offset"/>
  </pattern>
  <pattern>
   <ref name="rn"/>
  </pattern>
  <pattern>
   <const>1</const>
  </pattern>
  <pattern>
   <ref name="offset"/>
   <const>0</const>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <literal>T</literal>
  </phrase>
  <phrase>
   <literal>[</literal>
   <ref name="rn"/>
   <literal>],</literal><ws/>
   <ref name="offset"/>
  </phrase>
  <effect>
   <memory>
    <add>
     <ref name="rn"/>
     <ref name="offset"/>
    </add>
   </memory>
  </effect>
 </fragment>

 <fragment>
  <var name="offset">
   <ref name="ls-signed-offset"/>
  </var>
  <var name="rn">
   <ref name="register"/>
  </var>
  <var name="w">
   <ref name="w-bit"/>
  </var>
  <pattern>
   <ref name="offset"/>
  </pattern>
  <pattern>
   <ref name="rn"/>
  </pattern>
  <pattern>
   <ref name="w"/>
  </pattern>
  <pattern>
   <ref name="offset"/>
   <const>1</const>
   <ref name="offset"/>
  </pattern>
  <phrase></phrase>
  <phrase>
   <literal>[</literal>
   <ref name="rn"/>
   <literal>,</literal><ws/>
   <ref name="offset"/>
   <literal>]</literal>
   <ref name="w"/>
  </phrase>
  <effect>
   <memory>
    <add>
     <ref name="rn"/>
     <ref name="offset"/>
    </add>
   </memory>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <and>
     <ref name="rn"/>
     <ref name="operand"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <and>
     <ref name="rn"/>
     <ref name="operand"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="eor-instr">
 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>EOR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <xor>
     <ref name="rn"/>
     <ref name="operand"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sub-instr">
 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>SUB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <sub>
     <ref name="rn"/>
     <ref name="operand"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rsb-instr">
 <fragment>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>RSB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <sub>
     <ref name="operand"/>
     <ref name="rn"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="add-instr">
 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <add>
     <ref name="rn"/>
     <ref name="operand"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="adc-instr">
 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <add>
     <ref name="rn"/>
     <ref name="operand"/>
     <ref name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sbc-instr">
 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>SBC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <sub>
     <ref name="rn"/>
     <ref name="operand"/>
     <xor>
      <ref name="C"/>
      <const>1</const>
     </xor>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rsc-instr">
 <fragment>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>RSC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <sub>
     <ref name="operand"/>
     <ref name="rn"/>
     <xor>
      <ref name="C"/>
      <const>1</const>
     </xor>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tst-instr">
 <fragment>
  <pattern>
   <const>0001</const>
  </pattern>
  <phrase>
   <literal>TST</literal>
  </phrase>
  <effect>
   <and>
    <ref name="operand"/>
    <ref name="rn"/>
   </and>
  </effect>
 </fragment>
</define>

<define name="teq-instr">
 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>TEQ</literal>
  </phrase>
  <effect>
   <xor>
    <ref name="operand"/>
    <ref name="rn"/>
   </xor>
  </effect>
 </fragment>
</define>

<define name="cmp-instr">
 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>CMP</literal>
  </phrase>
  <effect>
   <sub>
    <ref name="operand"/>
    <ref name="rn"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="cmn-instr">
 <fragment>
  <pattern>
   <const>1101</const>
  </pattern>
  <phrase>
   <literal>CMN</literal>
  </phrase>
  <effect>
   <add>
    <ref name="operand"/>
    <ref name="rn"/>
   </add>
  </effect>
 </fragment>
</define>

<define name="orr-instr">
 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>ORR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <or>
     <ref name="rn"/>
     <ref name="operand"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="mov-instr">
 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>MOV</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bic-instr">
 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal>BIC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <and>
     <ref name="rn"/>
     <xor>
      <ref name="operand"/>
      <const>0xFFFFFFFF</const>
     </xor>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="mvn-instr">
 <fragment>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>MVN</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <xor>
     <ref name="operand"/>
     <const>0xFFFFFFFF</const>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="alu-instr">
 <fragment>
  <var name="opcode">
   <ref name="and-instr"/>
   <ref name="eor-instr"/>
   <ref name="sub-instr"/>
   <ref name="rsb-instr"/>
   <ref name="add-instr"/>
   <ref name="adc-instr"/>
   <ref name="sbc-instr"/>
   <ref name="rsc-instr"/>
   <ref name="orr-instr"/>
   <ref name="bic-instr"/>
  </var>
  <var name="rd">
   <ref name="register"/>
  </var>
  <var name="rn">
   <ref name="register"/>
  </var>
  <var name="operand">
   <ref name="alu-operand"/>
  </var>
  <var name="s">
   <ref name="s-bit"/>
  </var>
  <pattern>
   <ref name="operand"/>
   <ref name="rd"/>
   <ref name="rn"/>
   <ref name="s"/>
   <ref name="opcode"/>
   <ref name="operand"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="s"/>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="rn"/>
   <literal>,</literal><ws/>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="rd" src="rd"/>
    <bind name="rn" src="rd"/>
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="tst-instr"/>
   <ref name="teq-instr"/>
   <ref name="cmp-instr"/>
   <ref name="cmn-instr"/>
  </var>
  <var name="p">
   <ref name="p-suffix"/>
  </var>
  <var name="rn">
   <ref name="register"/>
  </var>
  <var name="operand">
   <ref name="alu-operand"/>
  </var>
  <pattern>
   <ref name="operand"/>
   <ref name="p"/>
   <ref name="rn"/>
   <const>1</const>
   <ref name="opcode"/>
   <ref name="operand"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="p"/>
  </phrase>
  <phrase>
   <ref name="rn"/>
   <literal>,</literal><ws/>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="rn" src="rd"/>
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="mov-instr"/>
   <ref name="mvn-instr"/>
  </var>
  <var name="rd">
   <ref name="register"/>
  </var>
  <var name="operand">
   <ref name="alu-operand"/>
  </var>
  <var name="s">
   <ref name="s-bit"/>
  </var>
  <pattern>
   <ref name="operand"/>
   <ref name="rd"/>
   <const>0000</const>
   <ref name="s"/>
   <ref name="opcode"/>
   <ref name="operand"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="s"/>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="rd" src="rd"/>
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="ls-instr">
 <fragment>
  <var name="operand">
   <ref name="ls-operand"/>
  </var>
  <var name="rd">
   <ref name="register"/>
  </var>
  <var name="opcode">
   <ref name="ls-opcode"/>
  </var>
  <var name="b">
   <ref name="b-bit"/>
  </var>
  <pattern>
   <ref name="operand"/>
   <ref name="rd"/>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
   <ref name="b"/>
   <ref name="operand"/>
   <const>10</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
   <literal>R</literal>
  </phrase>
  <phrase>
   <ref name="b"/>
   <ref name="operand"/>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="rd" src="rd"/>
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="lsm-s-bit">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase></phrase>
  <effect>
   <const>0</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>^</literal>
  </phrase>
  <effect>
   <const>0</const>
  </effect>
 </fragment>
</define>

<define name="lsm-mode">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <literal>DA</literal>
  </phrase>
  <effect>
   <mul>
    <sub>
     <add>
      <ref name="i"/>
      <ref name="di"/>
     </add>
     <ref name="n"/>
    </sub>
    <const>4</const>
   </mul>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>IA</literal>
  </phrase>
  <effect>
   <mul>
    <ref name="i"/>
    <const>4</const>
   </mul>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>DB</literal>
  </phrase>
  <effect>
   <mul>
    <sub>
     <ref name="i"/>
     <ref name="n"/>
    </sub>
    <const>4</const>
   </mul>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>IB</literal>
  </phrase>
  <effect>
   <mul>
    <add>
     <ref name="i"/>
     <ref name="di"/>
    </add>
    <const>4</const>
   </mul>
  </effect>
 </fragment>
</define>

<define name="lsm-instr">
 <fragment>
  <var name="registers">
   <ref name="register-list"/>
  </var>
  <var name="rn">
   <ref name="register"/>
  </var>
  <var name="opcode">
   <ref name="ls-opcode"/>
  </var>
  <var name="w">
   <ref name="w-bit"/>
  </var>
  <var name="s">
   <ref name="lsm-s-bit"/>
  </var>
  <var name="mode">
   <ref name="lsm-mode"/>
  </var>
  <pattern>
   <ref name="registers"/>
   <ref name="rn"/>
   <ref name="opcode"/>
   <ref name="w"/>
   <ref name="s"/>
   <ref name="mode"/>
   <const>001</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
   <literal>M</literal>
  </phrase>
  <phrase>
   <ref name="mode"/>
  </phrase>
  <phrase>
   <ref name="rn"/>
   <ref name="w"/>
   <literal>,</literal><ws/>
   <literal>{</literal>
   <ref name="registers"/>
   <literal>}</literal>
   <ref name="s"/>
  </phrase>
  <effect>
   <ref name="registers">
    <bind name="foreach">
     <ref name="opcode">
      <bind name="rd" src="r"/>
      <bind name="operand">
       <memory>
        <add>
         <ref name="rn"/>
         <ref name="mode">
          <bind name="i" src="i"/>
          <bind name="n" src="n"/>
          <bind name="di">
           <const>1</const>
          </bind>
         </ref>
        </add>
       </memory>
      </bind>
     </ref>
    </bind>
   </ref>
   <ref name="w">
    <bind name="rn" src="rn"/>
    <bind name="wrn">
     <add>
      <ref name="rn"/>
      <ref name="mode">
       <bind name="i" src="registers.n"/>
       <bind name="n">
        <add>
         <ref name="registers.n"/>
         <ref name="registers.n"/>
        </add>
       </bind>
       <bind name="di">
        <const>0</const>
       </bind>
      </ref>
     </add>
    </bind>
   </ref>
  </effect>
 </fragment>
</define>

<define name="b-instr">
 <fragment>
  <var name="l">
   <ref name="l-bit"/>
  </var>
  <var name="offset">
   <integer size="24" encoding="2c"/>
  </var>
  <var name="addr">
   <integer class="addr" size="32"/>
  </var>
  <where>
   <equals>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <mul>
      <extend size="32">
       <ref name="offset"/>
      </extend>
      <const>4</const>
     </mul>
     <const>8</const>
    </add>
   </equals>
  </where>
  <pattern>
   <ref name="offset"/>
   <ref name="l"/>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>B</literal>
   <ref name="l"/>
  </phrase>
  <phrase></phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
 </fragment>
 <effect>
  <ref name="l"/>
  <assign>
   <register name="PC"/>
   <add>
    <register name="PC"/>
    <mul>
     <ref name="offset"/>
     <const>4</const>
    </mul>
    <const>8</const>
   </add>
  </assign>
 </effect>
</define>

<define name="swi-instr">
 <fragment>
  <var name="swi">
   <integer class="swi" size="24" encoding="u"/>
  </var>
  <pattern>
   <ref name="swi"/>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>SWI</literal>
  </phrase>
  <phrase></phrase>
  <phrase>
   <ref name="swi"/>
  </phrase>
 </fragment>
</define>

<define name="mul-instr">
 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <var name="rs">
   <ref name="register"/>
  </var>
  <var name="rd">
   <ref name="register"/>
  </var>
  <var name="s">
   <ref name="s-bit"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <const>1001</const>
   <ref name="rs"/>
   <const>0000</const>
   <ref name="rd"/>
   <ref name="s"/>
   <const>0000000</const>
  </pattern>
  <phrase>
   <literal>MUL</literal>
  </phrase>
  <phrase>
   <ref name="s"/>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <ref name="rs"/>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <mul>
     <ref name="rm"/>
     <ref name="rs"/>
    </mul>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="rm">
   <ref name="register"/>
  </var>
  <var name="rs">
   <ref name="register"/>
  </var>
  <var name="rn">
   <ref name="register"/>
  </var>
  <var name="rd">
   <ref name="register"/>
  </var>
  <var name="s">
   <ref name="s-bit"/>
  </var>
  <pattern>
   <ref name="rm"/>
   <const>1001</const>
   <ref name="rs"/>
   <ref name="rn"/>
   <ref name="rd"/>
   <ref name="s"/>
   <const>1000000</const>
  </pattern>
  <phrase>
   <literal>MLA</literal>
  </phrase>
  <phrase>
   <ref name="s"/>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="rm"/>
   <literal>,</literal><ws/>
   <ref name="rs"/>
   <literal>,</literal><ws/>
   <ref name="rn"/>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <add>
     <mul>
      <ref name="rm"/>
      <ref name="rs"/>
     </mul>
     <ref name="rn"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<start>
 <fragment>
  <var name="opcode">
   <ref name="alu-instr"/>
   <ref name="ls-instr"/>
   <ref name="lsm-instr"/>
   <ref name="b-instr"/>
   <ref name="swi-instr"/>
   <require name="armv2">
    <ref name="mul-instr"/>
   </require>
  </var>
  <var name="cc">
   <ref name="cc"/>
  </var>
  <pattern>
   <ref name="opcode"/>
   <ref name="cc"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
   <ref name="cc"/>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <effect>
   <ref name="opcode"/>
  </effect>
 </fragment>
</start>
</cpudl>
