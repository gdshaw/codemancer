<!--
This file is part of Codemancer.
Copyright 2014 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="big">
<cpu name="6800"/>

<style>
 <property name="base" value="16"/>
 <property name="prefix" value="$"/>
 <property name="suffix" value=""/>
 <property name="whitespace" value=""/>
</style>

<register name="ACCA" size="8"/>
<register name="ACCB" size="8"/>
<register name="IX" size="16"/>
<register name="PC" size="16"/>
<register name="PC+" size="16"/>
<register name="SP" size="16"/>
<register name="SR" size="8"/>

<register name="C" size="1"/>
<register name="O" size="1"/>
<register name="Z" size="1"/>
<register name="S" size="1"/>
<register name="I" size="1"/>
<register name="AC" size="1"/>

<define name="cc">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>RA</literal>
  </phrase>
  <effect>
   <const>1</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>HI</literal>
  </phrase>
  <effect>
   <is-equal>
    <xor>
     <register name="C"/>
     <register name="Z"/>
    </xor>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>LS</literal>
  </phrase>
  <effect>
   <is-equal>
    <xor>
     <register name="C"/>
     <register name="Z"/>
    </xor>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>CC</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="C"/>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>CS</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="C"/>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>NE</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="Z"/>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal>EQ</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="Z"/>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>VC</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="O"/>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>VS</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="O"/>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>PL</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="S"/>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>MI</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="S"/>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>GE</literal>
  </phrase>
  <effect>
   <is-equal>
    <xor>
     <register name="S"/>
     <register name="O"/>
    </xor>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1101</const>
  </pattern>
  <phrase>
   <literal>LT</literal>
  </phrase>
  <effect>
   <is-equal>
    <xor>
     <register name="S"/>
     <register name="O"/>
    </xor>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>GT</literal>
  </phrase>
  <effect>
   <is-equal>
    <or>
     <xor>
      <register name="S"/>
      <register name="O"/>
     </xor>
     <register name="Z"/>
    </or>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>LE</literal>
  </phrase>
  <effect>
   <is-equal>
    <or>
     <xor>
      <register name="S"/>
      <register name="O"/>
     </xor>
     <register name="Z"/>
    </or>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>
</define>

<define name="accumulator">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>A</literal>
  </phrase>
  <effect>
   <register name="ACCA"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>B</literal>
  </phrase>
  <effect>
   <register name="ACCB"/>
  </effect>
 </fragment>
</define>

<define name="imm8-mode">
 <fragment>
  <var name="imm">
   <integer class="imm8" size="8"/>
  </var>
  <pattern>
   <const>00</const>
  </pattern>
  <pattern>
   <ref name="imm"/>
  </pattern>
  <phrase>
   <literal>#</literal>
   <ref name="imm"/>
  </phrase>
  <effect>
   <ref name="imm"/>
  </effect>
 </fragment>
</define>

<define name="imm16-mode">
 <fragment>
  <var name="imm">
   <integer class="imm16" size="16"/>
  </var>
  <pattern>
   <const>00</const>
  </pattern>
  <pattern>
   <ref name="imm"/>
  </pattern>
  <phrase>
   <literal>#</literal>
   <ref name="imm"/>
  </phrase>
  <effect>
   <ref name="imm"/>
  </effect>
 </fragment>
</define>

<define name="dir-mode-ea">
 <fragment>
  <var name="addr">
   <integer class="dir" size="8"/>
  </var>
  <pattern>
   <const>01</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="addr"/>
  </effect>
 </fragment>
</define>

<define name="ind-mode-ea">
 <fragment>
  <var name="addr">
   <integer class="dir" size="8"/>
  </var>
  <pattern>
   <const>10</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>X</literal>
  </phrase>
  <effect>
   <add>
    <ref name="addr"/>
    <register name="IX"/>
   </add>
  </effect>
 </fragment>
</define>

<define name="ext-mode-ea">
 <fragment>
  <var name="addr">
   <integer class="ext" size="16"/>
  </var>
  <pattern>
   <const>11</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="addr"/>
  </effect>
 </fragment>
</define>

<define name="impa-mode">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>A</literal>
  </phrase>
  <effect>
   <register name="ACCA"/>
  </effect>
 </fragment>
</define>

<define name="impb-mode">
 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>B</literal>
  </phrase>
  <effect>
   <register name="ACCB"/>
  </effect>
 </fragment>
</define>

<define name="sub-instr">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>SUB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <sub>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cmp-instr">
 <fragment>
  <pattern>
   <const>0001</const>
  </pattern>
  <phrase>
   <literal>CMP</literal>
  </phrase>
  <effect>
   <sub>
    <ref name="accumulator"/>
    <ref name="operand"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="sbc-instr">
 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>SBC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <sub>
     <ref name="accumulator"/>
     <ref name="operand"/>
     <register name="C"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <and>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bit-instr">
 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>BIT</literal>
  </phrase>
  <effect>
   <and>
    <ref name="accumulator"/>
    <ref name="operand"/>
   </and>
  </effect>
 </fragment>
</define>

<define name="lda-instr">
 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>LDA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sta-instr">
 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal>STA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <ref name="accumulator"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="eor-instr">
 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>EOR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <xor>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="adc-instr">
 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <add>
     <ref name="accumulator"/>
     <ref name="operand"/>
     <register name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ora-instr">
 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>ORA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <or>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="add-instr">
 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <add>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cpx-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>CPX</literal>
  </phrase>
  <effect>
   <sub>
    <register name="IX"/>
    <ref name="operand"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="lds-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>LDS</literal>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sts-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>STS</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <register name="SP"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ldx-instr">
 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>LDX</literal>
  </phrase>
  <effect>
   <assign>
    <register name="IX"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="stx-instr">
 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>STX</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <register name="IX"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="neg-instr">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>NEG</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <sub>
     <const>0</const>
     <ref name="operand"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="com-instr">
 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>COM</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <xor>
     <ref name="operand"/>
     <const>0xff</const>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="lsr-instr">
 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>LSR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="logical" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ror-instr">
 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>ROR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="rotation">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="asr-instr">
 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal>ASR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="arithmetic" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="asl-instr">
 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>ASL</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="arithmetic" carry="C">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rol-instr">
 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>ROL</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="rotation">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="dec-instr">
 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>DEC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <sub>
     <ref name="operand"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="inc-instr">
 <fragment>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>INC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <add>
     <ref name="operand"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tst-instr">
 <fragment>
  <pattern>
   <const>1101</const>
  </pattern>
  <phrase>
   <literal>TST</literal>
  </phrase>
  <effect>
   <ref name="operand"/>
  </effect>
 </fragment>
</define>

<define name="clr-instr">
 <fragment>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>CLR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tap-instr">
 <fragment>
  <pattern>
   <const>00000110</const>
  </pattern>
  <phrase>
   <literal>TAP</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="ACCA"/>
    <register name="SR"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tpa-instr">
 <fragment>
  <pattern>
   <const>00000111</const>
  </pattern>
  <phrase>
   <literal>TPA</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="SR"/>
    <register name="ACCA"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="clv-instr">
 <fragment>
  <pattern>
   <const>00001010</const>
  </pattern>
  <phrase>
   <literal>CLV</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="O"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sev-instr">
 <fragment>
  <pattern>
   <const>00001011</const>
  </pattern>
  <phrase>
   <literal>SEV</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="O"/>
    <const>1</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="clc-instr">
 <fragment>
  <pattern>
   <const>00001100</const>
  </pattern>
  <phrase>
   <literal>CLC</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="C"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sec-instr">
 <fragment>
  <pattern>
   <const>00001101</const>
  </pattern>
  <phrase>
   <literal>SEC</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="C"/>
    <const>1</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cli-instr">
 <fragment>
  <pattern>
   <const>00001110</const>
  </pattern>
  <phrase>
   <literal>CLI</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="I"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sei-instr">
 <fragment>
  <pattern>
   <const>00001111</const>
  </pattern>
  <phrase>
   <literal>SEI</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="I"/>
    <const>1</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tab-instr">
 <fragment>
  <pattern>
   <const>00010110</const>
  </pattern>
  <phrase>
   <literal>TAB</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="ACCB"/>
    <register name="ACCA"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tba-instr">
 <fragment>
  <pattern>
   <const>00010111</const>
  </pattern>
  <phrase>
   <literal>TBA</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="ACCA"/>
    <register name="ACCB"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tsx-instr">
 <fragment>
  <pattern>
   <const>00110000</const>
  </pattern>
  <phrase>
   <literal>TSX</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <register name="IX"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="txs-instr">
 <fragment>
  <pattern>
   <const>00110101</const>
  </pattern>
  <phrase>
   <literal>TXS</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="IX"/>
    <register name="SP"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sba-instr">
 <fragment>
  <pattern>
   <const>00010000</const>
  </pattern>
  <phrase>
   <literal>SBA</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="ACCA"/>
    <sub>
     <register name="ACCA"/>
     <register name="ACCB"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cba-instr">
 <fragment>
  <pattern>
   <const>00010001</const>
  </pattern>
  <phrase>
   <literal>CBA</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <sub>
    <register name="ACCA"/>
    <register name="ACCB"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="daa-instr">
 <fragment>
  <pattern>
   <const>00011001</const>
  </pattern>
  <phrase>
   <literal>DAA</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<define name="aba-instr">
 <fragment>
  <pattern>
   <const>00011011</const>
  </pattern>
  <phrase>
   <literal>ABA</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="ACCA"/>
    <add>
     <register name="ACCA"/>
     <register name="ACCB"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="pul-instr">
 <fragment>
  <var name="accumulator">
   <ref name="accumulator"/>
  </var>
  <pattern>
   <const>0011001</const>
   <ref name="accumulator"/>
  </pattern>
  <phrase>
   <literal>PUL</literal>
  </phrase>
  <phrase>
   <ref name="accumulator"/>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <ref name="accumulator"/>
    <memory size="8">
     <register name="SP"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="psh-instr">
 <fragment>
  <var name="accumulator">
   <ref name="accumulator"/>
  </var>
  <pattern>
   <const>0011011</const>
   <ref name="accumulator"/>
  </pattern>
  <phrase>
   <literal>PSH</literal>
  </phrase>
  <phrase>
   <ref name="accumulator"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <register name="SP"/>
    </memory>
    <ref name="accumulator"/>
   </assign>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="inx-instr">
 <fragment>
  <pattern>
   <const>00001000</const>
  </pattern>
  <phrase>
   <literal>INX</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <register name="IX"/>
   <add>
    <register name="IX"/>
    <const>1</const>
   </add>
  </effect>
 </fragment>
</define>

<define name="dex-instr">
 <fragment>
  <pattern>
   <const>00001001</const>
  </pattern>
  <phrase>
   <literal>DEX</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <register name="IX"/>
   <sub>
    <register name="IX"/>
    <const>1</const>
   </sub>
  </effect>
 </fragment>
</define>

<define name="ins-instr">
 <fragment>
  <pattern>
   <const>00110001</const>
  </pattern>
  <phrase>
   <literal>INS</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <register name="SP"/>
   <add>
    <register name="SP"/>
    <const>1</const>
   </add>
  </effect>
 </fragment>
</define>

<define name="des-instr">
 <fragment>
  <pattern>
   <const>00110100</const>
  </pattern>
  <phrase>
   <literal>DES</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <register name="SP"/>
   <sub>
    <register name="SP"/>
    <const>1</const>
   </sub>
  </effect>
 </fragment>
</define>

<define name="nop-instr">
 <fragment>
  <pattern>
   <const>00000001</const>
  </pattern>
  <phrase>
   <literal>NOP</literal>
  </phrase>
  <phrase></phrase>
  <effect></effect>
 </fragment>
</define>

<define name="wai-instr">
 <fragment>
  <pattern>
   <const>00111110</const>
  </pattern>
  <phrase>
   <literal>WAI</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<define name="swi-instr">
 <fragment>
  <pattern>
   <const>00111111</const>
  </pattern>
  <phrase>
   <literal>SWI</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <memory size="16">
     <sub>
      <register name="SP"/>
      <const>1</const>
     </sub>
    </memory>
    <register name="PC+"/>
   </assign>
   <assign>
    <memory size="16">
     <sub>
      <register name="SP"/>
      <const>3</const>
     </sub>
    </memory>
    <register name="IX"/>
   </assign>
   <assign>
    <memory size="8">
     <sub>
      <register name="SP"/>
      <const>4</const>
     </sub>
    </memory>
    <register name="ACCA"/>
   </assign>
   <assign>
    <memory size="8">
     <sub>
      <register name="SP"/>
      <const>5</const>
     </sub>
    </memory>
    <register name="ACCB"/>
   </assign>
   <assign>
    <memory size="8">
     <sub>
      <register name="SP"/>
      <const>6</const>
     </sub>
    </memory>
    <register name="SR"/>
   </assign>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>7</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <memory size="16">
     <const>0xFFFA</const>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rts-instr">
 <fragment>
  <pattern>
   <const>00111001</const>
  </pattern>
  <phrase>
   <literal>RTS</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <memory size="16">
     <add>
      <register name="SP"/>
      <const>1</const>
     </add>
    </memory>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>2</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rti-instr">
 <fragment>
  <pattern>
   <const>00111011</const>
  </pattern>
  <phrase>
   <literal>RTI</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="SR"/>
    <memory size="8">
     <add>
      <register name="SP"/>
      <const>1</const>
     </add>
    </memory>
   </assign>
   <assign>
    <register name="ACCB"/>
    <memory size="8">
     <add>
      <register name="SP"/>
      <const>2</const>
     </add>
    </memory>
   </assign>
   <assign>
    <register name="ACCA"/>
    <memory size="8">
     <add>
      <register name="SP"/>
      <const>3</const>
     </add>
    </memory>
   </assign>
   <assign>
    <register name="IX"/>
    <memory size="16">
     <add>
      <register name="SP"/>
      <const>4</const>
     </add>
    </memory>
   </assign>
   <assign>
    <register name="PC"/>
    <memory size="16">
     <add>
      <register name="SP"/>
      <const>6</const>
     </add>
    </memory>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>7</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="jmp-instr">
 <fragment>
  <var name="operand">
   <ref name="ind-mode-ea"/>
   <ref name="ext-mode-ea"/>
  </var>
  <pattern>
   <const>01</const>
   <ref name="operand"/>
   <const>1110</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <literal>JMP</literal>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="jsr-instr">
 <fragment>
  <var name="operand">
   <ref name="ind-mode-ea"/>
   <ref name="ext-mode-ea"/>
  </var>
  <pattern>
   <const>10</const>
   <ref name="operand"/>
   <const>1101</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <literal>JSR</literal>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <assign>
    <memory size="16">
     <sub>
      <register name="SP"/>
      <const>1</const>
     </sub>
    </memory>
    <register name="PC+"/>
   </assign>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>2</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="b-instr">
 <fragment>
  <var name="cc">
   <ref name="cc"/>
  </var>
  <var name="offset">
   <integer size="8" encoding="2c"/>
  </var>
  <var name="addr">
   <integer size="16"/>
  </var>
  <where>
   <is-equal>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <ref name="offset"/>
     <const>2</const>
    </add>
   </is-equal>
  </where>
  <pattern>
   <const>0010</const>
   <ref name="cc"/>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <literal>B</literal>
   <ref name="cc"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <if>
    <test>
     <ref name="cc"/>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <ref name="addr"/>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="bsr-instr">
 <fragment>
  <var name="offset">
   <integer size="8" encoding="2c"/>
  </var>
  <var name="addr">
   <integer size="16"/>
  </var>
  <where>
   <is-equal>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <ref name="offset"/>
     <const>2</const>
    </add>
   </is-equal>
  </where>
  <pattern>
   <const>10001101</const>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <literal>BSR</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <memory size="16">
     <sub>
      <register name="SP"/>
      <const>1</const>
     </sub>
    </memory>
    <register name="PC+"/>
   </assign>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>2</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <ref name="addr"/>
   </assign>
  </effect>
 </fragment>
</define>

<start>
 <fragment>
  <var name="opcode">
   <ref name="sub-instr"/>
   <ref name="cmp-instr"/>
   <ref name="sbc-instr"/>
   <ref name="and-instr"/>
   <ref name="bit-instr"/>
   <ref name="lda-instr"/>
   <ref name="eor-instr"/>
   <ref name="adc-instr"/>
   <ref name="ora-instr"/>
   <ref name="add-instr"/>
  </var>
  <var name="accumulator">
   <ref name="accumulator"/>
  </var>
  <var name="operand">
   <ref name="imm8-mode"/>
  </var>
  <pattern>
   <const>1</const>
   <ref name="accumulator"/>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
   <ref name="accumulator"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="operand"/>
    <bind name="accumulator" src="accumulator"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="cpx-instr"/>
   <ref name="lds-instr"/>
   <ref name="ldx-instr"/>
  </var>
  <var name="operand">
   <ref name="imm16-mode"/>
  </var>
  <pattern>
   <const>1</const>
   <ref name="opcode"/>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="sub-instr"/>
   <ref name="cmp-instr"/>
   <ref name="sbc-instr"/>
   <ref name="and-instr"/>
   <ref name="bit-instr"/>
   <ref name="lda-instr"/>
   <ref name="sta-instr"/>
   <ref name="eor-instr"/>
   <ref name="adc-instr"/>
   <ref name="ora-instr"/>
   <ref name="add-instr"/>
  </var>
  <var name="accumulator">
   <ref name="accumulator"/>
  </var>
  <var name="operand">
   <ref name="dir-mode-ea"/>
   <ref name="ind-mode-ea"/>
   <ref name="ext-mode-ea"/>
  </var>
  <pattern>
   <const>1</const>
   <ref name="accumulator"/>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
   <ref name="accumulator"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand">
     <memory size="8">
      <ref name="operand"/>
     </memory>
    </bind>
    <bind name="accumulator" src="accumulator"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="cpx-instr"/>
   <ref name="lds-instr"/>
   <ref name="sts-instr"/>
   <ref name="ldx-instr"/>
   <ref name="stx-instr"/>
  </var>
  <var name="operand">
   <ref name="dir-mode-ea"/>
   <ref name="ind-mode-ea"/>
   <ref name="ext-mode-ea"/>
  </var>
  <pattern>
   <const>1</const>
   <ref name="opcode"/>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand">
     <memory size="16">
      <ref name="operand"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="com-instr"/>
   <ref name="neg-instr"/>
   <ref name="lsr-instr"/>
   <ref name="ror-instr"/>
   <ref name="asr-instr"/>
   <ref name="asl-instr"/>
   <ref name="rol-instr"/>
   <ref name="dec-instr"/>
   <ref name="inc-instr"/>
   <ref name="tst-instr"/>
   <ref name="clr-instr"/>
  </var>
  <var name="operand">
   <ref name="impa-mode"/>
   <ref name="impb-mode"/>
  </var>
  <pattern>
   <const>01</const>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="com-instr"/>
   <ref name="neg-instr"/>
   <ref name="lsr-instr"/>
   <ref name="ror-instr"/>
   <ref name="asr-instr"/>
   <ref name="asl-instr"/>
   <ref name="rol-instr"/>
   <ref name="dec-instr"/>
   <ref name="inc-instr"/>
   <ref name="tst-instr"/>
   <ref name="clr-instr"/>
  </var>
  <var name="operand">
   <ref name="ind-mode-ea"/>
   <ref name="ext-mode-ea"/>
  </var>
  <pattern>
   <const>01</const>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand">
     <memory size="8">
      <ref name="operand"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <ref name="tap-instr"/>
 <ref name="tpa-instr"/>
 <ref name="inx-instr"/>
 <ref name="dex-instr"/>
 <ref name="clv-instr"/>
 <ref name="sev-instr"/>
 <ref name="clc-instr"/>
 <ref name="sec-instr"/>
 <ref name="cli-instr"/>
 <ref name="sei-instr"/>
 <ref name="sba-instr"/>
 <ref name="cba-instr"/>
 <ref name="tab-instr"/>
 <ref name="tba-instr"/>
 <ref name="daa-instr"/>
 <ref name="aba-instr"/>

 <ref name="tsx-instr"/>
 <ref name="ins-instr"/>
 <ref name="des-instr"/>
 <ref name="txs-instr"/>
 <ref name="pul-instr"/>
 <ref name="psh-instr"/>

 <ref name="nop-instr"/>
 <ref name="rts-instr"/>
 <ref name="rti-instr"/>
 <ref name="wai-instr"/>
 <ref name="swi-instr"/>
 <ref name="jmp-instr"/>
 <ref name="jsr-instr"/>
 <ref name="b-instr"/>
 <ref name="bsr-instr"/>
</start>
</cpudl>
