<!--
This file is part of Codemancer.
Copyright 2014 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="big">
<style>
 <property name="base" value="16"/>
 <property name="prefix" value="$"/>
 <property name="suffix" value=""/>
 <property name="whitespace" value=""/>
</style>

<register name="ACCA" size="8"/>
<register name="ACCB" size="8"/>
<register name="IX" size="16"/>
<register name="PC" size="16"/>
<register name="SP" size="16"/>

<register name="C" size="1"/>
<register name="V" size="1"/>
<register name="Z" size="1"/>
<register name="N" size="1"/>
<register name="I" size="1"/>
<register name="H" size="1"/>

<define name="accumulator">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>A</literal>
  </phrase>
  <effect>
   <register name="ACCA"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>B</literal>
  </phrase>
  <effect>
   <register name="ACCB"/>
  </effect>
 </fragment>
</define>

<define name="imm-mode">
 <fragment>
  <var name="imm">
   <integer class="imm" size="8"/>
  </var>
  <pattern>
   <const>00</const>
  </pattern>
  <pattern>
   <ref name="imm"/>
  </pattern>
  <phrase>
   <literal>#</literal>
   <ref name="imm"/>
  </phrase>
  <effect>
   <ref name="imm"/>
  </effect>
 </fragment>
</define>

<define name="dir-mode">
 <fragment>
  <var name="addr">
   <integer class="dir" size="8"/>
  </var>
  <pattern>
   <const>01</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <memory size="8">
    <ref name="addr"/>
   </memory>
  </effect>
 </fragment>
</define>

<define name="ind-mode">
 <fragment>
  <var name="addr">
   <integer class="dir" size="8"/>
  </var>
  <pattern>
   <const>10</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>X</literal>
  </phrase>
  <effect>
   <memory size="8">
    <add>
     <ref name="addr"/>
     <register name="IX"/>
    </add>
   </memory>
  </effect>
 </fragment>
</define>

<define name="ext-mode">
 <fragment>
  <var name="addr">
   <integer class="ext" size="16"/>
  </var>
  <pattern>
   <const>11</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <memory size="8">
    <ref name="addr"/>
   </memory>
  </effect>
 </fragment>
</define>

<define name="sub-instr">
 <fragment>
  <pattern>
   <const>0000</const>
  </pattern>
  <phrase>
   <literal>SUB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <sub>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cmp-instr">
 <fragment>
  <pattern>
   <const>0001</const>
  </pattern>
  <phrase>
   <literal>CMP</literal>
  </phrase>
  <effect>
   <sub>
    <ref name="accumulator"/>
    <ref name="operand"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="sbc-instr">
 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>SBC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <sub>
     <ref name="accumulator"/>
     <ref name="operand"/>
     <register name="C"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <and>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bit-instr">
 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>BIT</literal>
  </phrase>
  <effect>
   <and>
    <ref name="accumulator"/>
    <ref name="operand"/>
   </and>
  </effect>
 </fragment>
</define>

<define name="lda-instr">
 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>LDA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="eor-instr">
 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>EOR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <xor>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="adc-instr">
 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <add>
     <ref name="accumulator"/>
     <ref name="operand"/>
     <register name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ora-instr">
 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>ORA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <or>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="add-instr">
 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="accumulator"/>
    <add>
     <ref name="accumulator"/>
     <ref name="operand"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<start>
 <fragment>
  <var name="opcode">
   <ref name="sub-instr"/>
   <ref name="cmp-instr"/>
   <ref name="sbc-instr"/>
   <ref name="and-instr"/>
   <ref name="bit-instr"/>
   <ref name="lda-instr"/>
   <ref name="eor-instr"/>
   <ref name="adc-instr"/>
   <ref name="ora-instr"/>
   <ref name="add-instr"/>
  </var>
  <var name="accumulator">
   <ref name="accumulator"/>
  </var>
  <var name="operand">
   <ref name="imm-mode"/>
   <ref name="dir-mode"/>
   <ref name="ind-mode"/>
   <ref name="ext-mode"/>
  </var>
  <pattern>
   <const>1</const>
   <ref name="accumulator"/>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
   <ref name="accumulator"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="operand"/>
    <bind name="accumulator" src="accumulator"/>
   </ref>
  </effect>
 </fragment>
</start>
</cpudl>
