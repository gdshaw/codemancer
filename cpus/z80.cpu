<!--
This file is part of Codemancer.
Copyright 2014 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<!--
Note: 0x76 currently decodes incorrectly as LD (HL),(HL).
-->

<cpudl>
<style>
 <property name="base" value="16"/>
 <property name="prefix" value=""/>
 <property name="suffix" value="H"/>
 <property name="whitespace" value=" "/>
 <select class="bit">
  <property name="suffix" value=""/>
 </select>
</style>

<register name="B" size="8"/>
<register name="C" size="8"/>
<register name="D" size="8"/>
<register name="E" size="8"/>
<register name="H" size="8"/>
<register name="L" size="8"/>
<register name="A" size="8"/>
<register name="F" size="8"/>
<register name="BC" size="16"/>
<register name="DE" size="16"/>
<register name="HL" size="16"/>
<register name="AF" size="16"/>
<register name="SP" size="16"/>
<register name="PC" size="16"/>
<register name="PC+" size="16"/>

<register name="CF" size="1"/>
<register name="NF" size="1"/>
<register name="PVF" size="1"/>
<register name="HF" size="1"/>
<register name="ZF" size="1"/>
<register name="SF" size="1"/>

<define name="cc">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>NZ</literal>
  </phrase>
  <effect>
   <equals>
    <register name="ZF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>Z</literal>
  </phrase>
  <effect>
   <equals>
    <register name="ZF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>NC</literal>
  </phrase>
  <effect>
   <equals>
    <register name="CF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <equals>
    <register name="CF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>PO</literal>
  </phrase>
  <effect>
   <equals>
    <register name="PVF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>PE</literal>
  </phrase>
  <effect>
   <equals>
    <register name="PVF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>P</literal>
  </phrase>
  <effect>
   <equals>
    <register name="SF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>M</literal>
  </phrase>
  <effect>
   <equals>
    <register name="SF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>
</define>

<define name="reg8">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>B</literal>
  </phrase>
  <effect>
   <register name="B"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <register name="C"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>D</literal>
  </phrase>
  <effect>
   <register name="D"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>E</literal>
  </phrase>
  <effect>
   <register name="E"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>H</literal>
  </phrase>
  <effect>
   <register name="H"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>L</literal>
  </phrase>
  <effect>
   <register name="L"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>(HL)</literal>
  </phrase>
  <effect>
   <memory>
    <register name="HL"/>
   </memory>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>A</literal>
  </phrase>
  <effect>
   <register name="A"/>
  </effect>
 </fragment>
</define>

<define name="reg16">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>BC</literal>
  </phrase>
  <effect>
   <register name="BC"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>DE</literal>
  </phrase>
  <effect>
   <register name="DE"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>HL</literal>
  </phrase>
  <effect>
   <register name="HL"/>
  </effect>
 </fragment>
</define>

<define name="sp16">
 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>SP</literal>
  </phrase>
  <effect>
   <register name="SP"/>
  </effect>
 </fragment>
</define>

<define name="af16">
 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>AF</literal>
  </phrase>
  <effect>
   <register name="AF"/>
  </effect>
 </fragment>
</define>

<define name="addr16">
 <fragment>
  <var name="addr">
   <integer size="16"/>
  </var>
  <pattern>
   <const>11</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="addr"/>
  </effect>
 </fragment>
</define>

<define name="add-instr">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <add>
     <register name="A"/>
     <ref name="operand"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="adc-instr">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <add>
     <register name="A"/>
     <ref name="operand"/>
     <register name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sub-instr">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>SUB</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <sub>
     <register name="A"/>
     <ref name="operand"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sbc-instr">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>SBC</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <sub>
     <register name="A"/>
     <ref name="operand"/>
     <register name="C"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <and>
     <register name="A"/>
     <ref name="operand"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xor-instr">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>XOR</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <xor>
     <register name="A"/>
     <ref name="operand"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="or-instr">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>OR</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <or>
     <register name="A"/>
     <ref name="operand"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cp-instr">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>CP</literal>
  </phrase>
  <effect>
   <sub>
    <register name="A"/>
    <ref name="operand"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="inc-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>INC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <add>
     <ref name="operand"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="dec-instr">
 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>DEC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <sub>
     <ref name="operand"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="pop-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>POP</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <memory size="16">
     <register name="SP"/>
    </memory>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>2</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="push-instr">
 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>PUSH</literal>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>2</const>
    </sub>
   </assign>
   <assign>
    <memory size="16">
     <register name="SP"/>
    </memory>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rlc-instr">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>RLC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="rotation" carry="C">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rrc-instr">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>RRC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="rotation" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rl-instr">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>RL</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="extended" carry="C">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rr-instr">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>RR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="extended" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sla-instr">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>SLA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="arithmetic" carry="C">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sra-instr">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>SRA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="arithmetic" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="srl-instr">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>SRL</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="logical" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bit-instr">
 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>BIT</literal>
  </phrase>
  <effect>
   <and>
    <ref name="operand"/>
    <shift width="8" method="logical">
     <const>1</const>
     <ref name="bit"/>
    </shift>
   </and>
  </effect>
 </fragment>
</define>

<define name="res-instr">
 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>RES</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <and>
     <ref name="operand"/>
     <xor>
      <shift width="8" method="logical">
       <const>1</const>
       <ref name="bit"/>
      </shift>
      <const>11111111</const>
     </xor>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="set-instr">
 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>SET</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <or>
     <ref name="operand"/>
     <shift width="8" method="logical">
      <const>1</const>
      <ref name="bit"/>
     </shift>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<start>
 <fragment>
  <var name="rs">
   <ref name="reg8"/>
  </var>
  <var name="rd">
   <ref name="reg8"/>
  </var>
  <pattern>
   <ref name="rs"/>
   <ref name="rd"/>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="rs"/>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <ref name="rs"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="reg8"/>
  </var>
  <var name="opcode">
   <ref name="add-instr"/>
   <ref name="adc-instr"/>
   <ref name="sbc-instr"/>
  </var>
  <pattern>
   <ref name="r"/>
   <ref name="opcode"/>
   <const>01</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <literal>A,</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="reg8"/>
  </var>
  <var name="opcode">
   <ref name="sub-instr"/>
   <ref name="and-instr"/>
   <ref name="xor-instr"/>
   <ref name="or-instr"/>
   <ref name="cp-instr"/>
  </var>
  <pattern>
   <ref name="r"/>
   <ref name="opcode"/>
   <const>01</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="reg8"/>
  </var>
  <var name="opcode">
   <ref name="inc-instr"/>
   <ref name="dec-instr"/>
  </var>
  <pattern>
   <ref name="opcode"/>
   <const>01</const>
   <ref name="r"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="reg8"/>
  </var>
  <var name="imm">
   <integer size="8"/>
  </var>
  <pattern>
   <const>011</const>
   <ref name="r"/>
   <const>00</const>
   <ref name="imm"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <ref name="imm"/>
  </phrase>
  <effect>
   <assign>
    <ref name="r"/>
    <ref name="imm"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="rlc-instr"/>
   <ref name="rrc-instr"/>
   <ref name="rl-instr"/>
   <ref name="rr-instr"/>
  </var>
  <pattern>
   <const>111</const>
   <ref name="opcode"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
   <literal>A</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand">
     <register name="A"/>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="reg16"/>
   <ref name="sp16"/>
  </var>
  <var name="imm">
   <integer size="16"/>
  </var>
  <pattern>
   <const>1000</const>
   <ref name="dd"/>
   <const>00</const>
   <ref name="imm"/>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="dd"/>
   <literal>,</literal><ws/>
   <ref name="imm"/>
  </phrase>
  <effect>
   <assign>
    <ref name="dd"/>
    <ref name="imm"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="reg16"/>
   <ref name="addr16"/>
  </var>
  <pattern>
   <const>0100</const>
   <ref name="dd"/>
   <const>00</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <literal>(</literal>
   <ref name="dd"/>
   <literal>),</literal><ws/>
   <literal>A</literal>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="dd"/>
    </memory>
    <register name="A"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="reg16"/>
   <ref name="addr16"/>
  </var>
  <pattern>
   <const>0101</const>
   <ref name="dd"/>
   <const>00</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <literal>A</literal>
   <literal>,</literal><ws/>
   <literal>(</literal>
   <ref name="dd"/>
   <literal>)</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <memory size="8">
     <ref name="dd"/>
    </memory>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10011111</const>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <literal>SP,</literal><ws/>
   <literal>HL</literal>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <register name="HL"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="reg16"/>
   <ref name="sp16"/>
  </var>
  <pattern>
   <const>1001</const>
   <ref name="dd"/>
   <const>00</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <phrase>
   <literal>HL,</literal><ws/>
   <ref name="dd"/>
  </phrase>
  <effect>
   <assign>
    <register name="HL"/>
    <add>
     <register name="HL"/>
     <ref name="dd"/>
    </add>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="reg16"/>
   <ref name="sp16"/>
  </var>
  <var name="opcode">
   <ref name="inc-instr"/>
   <ref name="dec-instr"/>
  </var>
  <pattern>
   <const>110</const>
   <ref name="opcode"/>
   <ref name="dd"/>
   <const>00</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="dd"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="dd"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="reg16"/>
   <ref name="af16"/>
  </var>
  <var name="opcode">
   <ref name="pop-instr"/>
   <ref name="push-instr"/>
  </var>
  <pattern>
   <const>10</const>
   <ref name="opcode"/>
   <const>0</const>
   <ref name="dd"/>
   <const>11</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="dd"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="dd"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="cc">
   <ref name="cc"/>
  </var>
  <pattern>
   <const>000</const>
   <ref name="cc"/>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>RET</literal>
  </phrase>
  <phrase>
   <ref name="cc"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <memory size="16">
     <register name="SP"/>
    </memory>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>2</const>
    </add>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="cc">
   <ref name="cc"/>
  </var>
  <var name="nn">
   <integer size="16"/>
  </var>
  <pattern>
   <const>010</const>
   <ref name="cc"/>
   <const>11</const>
   <ref name="nn"/>
  </pattern>
  <phrase>
   <literal>JP</literal>
  </phrase>
  <phrase>
   <ref name="cc"/>
   <literal>,</literal><ws/>
   <ref name="nn"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="nn"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="cc">
   <ref name="cc"/>
  </var>
  <var name="nn">
   <integer size="16"/>
  </var>
  <pattern>
   <const>001</const>
   <ref name="cc"/>
   <const>11</const>
   <ref name="nn"/>
  </pattern>
  <phrase>
   <literal>CALL</literal>
  </phrase>
  <phrase>
   <ref name="cc"/>
   <literal>,</literal><ws/>
   <ref name="nn"/>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>2</const>
    </sub>
   </assign>
   <assign>
    <memory size="16">
     <register name="SP"/>
    </memory>
    <register name="PC+"/>
   </assign>
   <assign>
    <register name="PC"/>
    <ref name="nn"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="reg8"/>
  </var>
  <var name="opcode">
   <ref name="rlc-instr"/>
   <ref name="rrc-instr"/>
   <ref name="rl-instr"/>
   <ref name="rr-instr"/>
   <ref name="sla-instr"/>
   <ref name="sra-instr"/>
   <ref name="srl-instr"/>
  </var>
  <pattern>
   <const>11010011</const>
   <ref name="r"/>
   <ref name="opcode"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="bit">
   <integer class="bit" size="3"/>
  </var>
  <var name="r">
   <ref name="reg8"/>
  </var>
  <var name="opcode">
   <ref name="bit-instr"/>
   <ref name="res-instr"/>
   <ref name="set-instr"/>
  </var>
  <pattern>
   <const>11010011</const>
   <ref name="r"/>
   <ref name="bit"/>
   <ref name="opcode"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="bit"/>
   <literal>,</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="bit" src="bit"/>
    <bind name="operand" src="r"/>
   </ref>
  </effect>
 </fragment>
</start>
</cpudl>
