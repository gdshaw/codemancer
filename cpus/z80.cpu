<!--
This file is part of Codemancer.
Copyright 2014 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="little">
<style>
 <property name="base" value="16"/>
 <property name="prefix" value=""/>
 <property name="suffix" value="H"/>
 <property name="whitespace" value=" "/>
 <select class="bit">
  <property name="suffix" value=""/>
 </select>
 <select class="addr">
  <property name="width" value="4"/>
 </select>
 <select class="rst">
  <property name="width" value="2"/>
 </select>
</style>

<register name="B" size="8"/>
<register name="C" size="8"/>
<register name="D" size="8"/>
<register name="E" size="8"/>
<register name="H" size="8"/>
<register name="L" size="8"/>
<register name="A" size="8"/>
<register name="F" size="8"/>
<register name="BC" size="16"/>
<register name="DE" size="16"/>
<register name="HL" size="16"/>
<register name="AF" size="16"/>
<register name="BC'" size="16"/>
<register name="DE'" size="16"/>
<register name="HL'" size="16"/>
<register name="AF'" size="16"/>
<register name="IX" size="16"/>
<register name="IY" size="16"/>
<register name="SP" size="16"/>
<register name="PC" size="16"/>
<register name="PC+" size="16"/>

<register name="CF" size="1"/>
<register name="NF" size="1"/>
<register name="PVF" size="1"/>
<register name="HF" size="1"/>
<register name="ZF" size="1"/>
<register name="SF" size="1"/>

<register name="I" size="8"/>
<register name="R" size="8"/>
<register name="IFF" size="1"/>

<define name="cc2">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <literal>NZ</literal>
  </phrase>
  <effect>
   <equals>
    <register name="ZF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>Z</literal>
  </phrase>
  <effect>
   <equals>
    <register name="ZF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>NC</literal>
  </phrase>
  <effect>
   <equals>
    <register name="CF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <equals>
    <register name="CF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>
</define>

<define name="cc3">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>NZ</literal>
  </phrase>
  <effect>
   <equals>
    <register name="ZF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>Z</literal>
  </phrase>
  <effect>
   <equals>
    <register name="ZF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>NC</literal>
  </phrase>
  <effect>
   <equals>
    <register name="CF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <equals>
    <register name="CF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>PO</literal>
  </phrase>
  <effect>
   <equals>
    <register name="PVF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>PE</literal>
  </phrase>
  <effect>
   <equals>
    <register name="PVF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>P</literal>
  </phrase>
  <effect>
   <equals>
    <register name="SF"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>M</literal>
  </phrase>
  <effect>
   <equals>
    <register name="SF"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>
</define>

<define name="reg8">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>B</literal>
  </phrase>
  <effect>
   <register name="B"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <register name="C"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>D</literal>
  </phrase>
  <effect>
   <register name="D"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>E</literal>
  </phrase>
  <effect>
   <register name="E"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>H</literal>
  </phrase>
  <effect>
   <register name="H"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>L</literal>
  </phrase>
  <effect>
   <register name="L"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>A</literal>
  </phrase>
  <effect>
   <register name="A"/>
  </effect>
 </fragment>
</define>

<define name="ind8">
 <require name="!ix">
  <require name="!iy">
   <fragment>
    <pattern>
     <const>011</const>
    </pattern>
    <pattern></pattern>
    <phrase>
     <literal>(HL)</literal>
    </phrase>
    <effect>
     <memory>
      <register name="HL"/>
     </memory>
    </effect>
   </fragment>
  </require>
 </require>

 <require name="ix">
  <fragment>
   <var name="disp">
    <integer size="8" encoding="2c"/>
   </var>
   <pattern>
    <const>011</const>
   </pattern>
   <pattern>
    <ref name="disp"/>
   </pattern>
   <phrase>
    <literal>(IX+</literal>
    <ref name="disp"/>
    <literal>)</literal>
   </phrase>
   <effect>
    <memory>
     <register name="IX"/>
    </memory>
   </effect>
  </fragment>
 </require>

 <require name="iy">
  <fragment>
   <var name="disp">
    <integer size="8" encoding="2c"/>
   </var>
   <pattern>
    <const>011</const>
   </pattern>
   <pattern>
    <ref name="disp"/>
   </pattern>
   <phrase>
    <literal>(IY+</literal>
    <ref name="disp"/>
    <literal>)</literal>
   </phrase>
   <effect>
    <memory>
     <register name="IY"/>
    </memory>
   </effect>
  </fragment>
 </require>
</define>

<define name="regind8">
 <require name="!ix">
  <require name="!iy">
   <ref name="reg8"/>
  </require>
 </require>
 <ref name="ind8"/>
</define>

<define name="bc16">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>BC</literal>
  </phrase>
  <effect>
   <register name="BC"/>
  </effect>
 </fragment>
</define>

<define name="de16">
 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>DE</literal>
  </phrase>
  <effect>
   <register name="DE"/>
  </effect>
 </fragment>
</define>

<define name="hl16">
 <require name="!ix">
  <require name="!iy">
   <fragment>
    <pattern>
     <const>01</const>
    </pattern>
    <pattern></pattern>
    <phrase>
     <literal>HL</literal>
    </phrase>
    <effect>
     <register name="HL"/>
    </effect>
   </fragment>
  </require>
 </require>

 <require name="ix">
  <fragment>
   <pattern>
    <const>01</const>
   </pattern>
   <pattern></pattern>
   <phrase>
    <literal>IX</literal>
   </phrase>
   <effect>
    <register name="IX"/>
   </effect>
  </fragment>
 </require>

 <require name="iy">
  <fragment>
   <pattern>
    <const>01</const>
   </pattern>
   <pattern></pattern>
   <phrase>
    <literal>IY</literal>
   </phrase>
   <effect>
    <register name="IY"/>
   </effect>
  </fragment>
 </require>
</define>

<define name="sp16">
 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>SP</literal>
  </phrase>
  <effect>
   <register name="SP"/>
  </effect>
 </fragment>
</define>

<define name="af16">
 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>AF</literal>
  </phrase>
  <effect>
   <register name="AF"/>
  </effect>
 </fragment>
</define>

<define name="addr16">
 <fragment>
  <var name="addr">
   <integer size="16"/>
  </var>
  <pattern>
   <const>11</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="addr"/>
  </effect>
 </fragment>
</define>

<define name="bc-de-hl-sp16">
 <require name="!ix">
  <require name="!iy">
   <ref name="bc16"/>
   <ref name="de16"/>
   <ref name="sp16"/>
  </require>
 </require>
 <ref name="hl16"/>
</define>

<define name="bc-de-hl-af16">
 <require name="!ix">
  <require name="!iy">
   <ref name="bc16"/>
   <ref name="de16"/>
   <ref name="af16"/>
  </require>
 </require>
 <ref name="hl16"/>
</define>

<define name="bc-de-addr16">
 <require name="!ix">
  <require name="!iy">
   <ref name="bc16"/>
   <ref name="de16"/>
   <ref name="addr16"/>
  </require>
 </require>
</define>

<define name="ir">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>I</literal>
  </phrase>
  <effect>
   <register name="I"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>R</literal>
  </phrase>
  <effect>
   <register name="R"/>
  </effect>
 </fragment>
</define>

<define name="im">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <literal>0</literal>
  </phrase>
  <effect>
   <const>0</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>1</literal>
  </phrase>
  <effect>
   <const>1</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>2</literal>
  </phrase>
  <effect>
   <const>2</const>
  </effect>
 </fragment>
</define>

<define name="add-instr">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <phrase>
   <literal>A,</literal><ws/>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <add>
     <register name="A"/>
     <ref name="operand"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="adc-instr">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <phrase>
   <literal>A,</literal><ws/>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <add>
     <register name="A"/>
     <ref name="operand"/>
     <register name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sub-instr">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>SUB</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="A"/>
    <sub>
     <register name="A"/>
     <ref name="operand"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sbc-instr">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>SBC</literal>
  </phrase>
  <phrase>
   <literal>A,</literal><ws/>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <sub>
     <register name="A"/>
     <ref name="operand"/>
     <register name="C"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="A"/>
    <and>
     <register name="A"/>
     <ref name="operand"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xor-instr">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>XOR</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="A"/>
    <xor>
     <register name="A"/>
     <ref name="operand"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="or-instr">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>OR</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="A"/>
    <or>
     <register name="A"/>
     <ref name="operand"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cp-instr">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>CP</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <sub>
    <register name="A"/>
    <ref name="operand"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="inc-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>INC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <add>
     <ref name="operand"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="dec-instr">
 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>DEC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <sub>
     <ref name="operand"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="pop-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>POP</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <memory size="16">
     <register name="SP"/>
    </memory>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>2</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="push-instr">
 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>PUSH</literal>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>2</const>
    </sub>
   </assign>
   <assign>
    <memory size="16">
     <register name="SP"/>
    </memory>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rlc-instr">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>RLC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="rotation" carry="C">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rrc-instr">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>RRC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="rotation" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rl-instr">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>RL</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="extended" carry="C">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rr-instr">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>RR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="extended" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sla-instr">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>SLA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="arithmetic" carry="C">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sra-instr">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>SRA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="arithmetic" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="srl-instr">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>SRL</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="logical" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bit-opcode">
 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>BIT</literal>
  </phrase>
  <effect>
   <and>
    <ref name="operand"/>
    <shift width="8" method="logical">
     <const>1</const>
     <ref name="bit"/>
    </shift>
   </and>
  </effect>
 </fragment>
</define>

<define name="res-opcode">
 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>RES</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <and>
     <ref name="operand"/>
     <xor>
      <shift width="8" method="logical">
       <const>1</const>
       <ref name="bit"/>
      </shift>
      <const>11111111</const>
     </xor>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="set-opcode">
 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>SET</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <or>
     <ref name="operand"/>
     <shift width="8" method="logical">
      <const>1</const>
      <ref name="bit"/>
     </shift>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ld-op">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
 </fragment>
 <effect>
  <assign>
   <memory size="8">
    <register name="DE"/>
   </memory>
   <memory size="8">
    <register name="HL"/>
   </memory>
  </assign>
  <assign>
   <register name="DE"/>
   <add>
    <register name="DE"/>
    <ref name="step"/>
   </add>
  </assign>
  <assign>
   <register name="HL"/>
   <add>
    <register name="HL"/>
    <ref name="step"/>
   </add>
  </assign>
  <assign>
   <register name="BC"/>
   <sub>
    <register name="BC"/>
    <const>1</const>
   </sub>
  </assign>
 </effect>
</define>

<define name="cp-op">
 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>CP</literal>
  </phrase>
 <effect>
  <sub>
   <register name="A"/>
   <memory size="8">
    <register name="HL"/>
   </memory>
  </sub>
  <assign>
   <register name="HL"/>
   <add>
    <register name="HL"/>
    <ref name="step"/>
   </add>
  </assign>
  <assign>
   <register name="BC"/>
   <sub>
    <register name="BC"/>
    <const>1</const>
   </sub>
  </assign>
 </effect>
 </fragment>
</define>

<define name="in-op">
 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>IN</literal>
  </phrase>
 </fragment>
</define>

<define name="out-op">
 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>OUT</literal>
  </phrase>
 </fragment>
</define>

<define name="ot-op">
 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>OT</literal>
  </phrase>
 </fragment>
</define>

<define name="step">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>I</literal>
  </phrase>
  <effect>
   <const>1</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>D</literal>
  </phrase>
  <effect>
   <const>-1</const>
  </effect>
 </fragment>
</define>

<define name="ld8-instr">
 <fragment>
  <var name="rs">
   <ref name="reg8"/>
  </var>
  <var name="rd">
   <ref name="regind8"/>
  </var>
  <pattern>
   <ref name="rs"/>
   <ref name="rd"/>
   <const>10</const>
   <ref name="rs"/>
   <ref name="rd"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="rs"/>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <ref name="rs"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="rs">
   <ref name="ind8"/>
  </var>
  <var name="rd">
   <ref name="reg8"/>
  </var>
  <pattern>
   <ref name="rs"/>
   <ref name="rd"/>
   <const>10</const>
   <ref name="rs"/>
   <ref name="rd"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="rd"/>
   <literal>,</literal><ws/>
   <ref name="rs"/>
  </phrase>
  <effect>
   <assign>
    <ref name="rd"/>
    <ref name="rs"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="regind8"/>
  </var>
  <var name="imm">
   <integer size="8"/>
  </var>
  <pattern>
   <const>011</const>
   <ref name="r"/>
   <const>00</const>
   <ref name="r"/>
   <ref name="imm"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <ref name="imm"/>
  </phrase>
  <effect>
   <assign>
    <ref name="r"/>
    <ref name="imm"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="ir"/>
  </var>
  <pattern>
   <const>10110111</const>
   <const>111</const>
   <ref name="r"/>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <literal>A</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="r"/>
    <register name="A"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="ir"/>
  </var>
  <pattern>
   <const>10110111</const>
   <const>111</const>
   <ref name="r"/>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <literal>A,</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <ref name="r"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ld16-instr">
 <fragment>
  <var name="dd">
   <ref name="bc-de-hl-sp16"/>
  </var>
  <var name="imm">
   <integer size="16"/>
  </var>
  <pattern>
   <const>1000</const>
   <ref name="dd"/>
   <const>00</const>
   <ref name="imm"/>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="dd"/>
   <literal>,</literal><ws/>
   <ref name="imm"/>
  </phrase>
  <effect>
   <assign>
    <ref name="dd"/>
    <ref name="imm"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="bc-de-addr16"/>
  </var>
  <pattern>
   <const>0100</const>
   <ref name="dd"/>
   <const>00</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <literal>(</literal>
   <ref name="dd"/>
   <literal>),</literal><ws/>
   <literal>A</literal>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="dd"/>
    </memory>
    <register name="A"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="bc-de-addr16"/>
  </var>
  <pattern>
   <const>0101</const>
   <ref name="dd"/>
   <const>00</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <literal>A</literal>
   <literal>,</literal><ws/>
   <literal>(</literal>
   <ref name="dd"/>
   <literal>)</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <memory size="8">
     <ref name="dd"/>
    </memory>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="hl16"/>
  </var>
  <var name="addr">
   <integer class="addr" size="16" encoding="u"/>
  </var>
  <pattern>
   <const>0100</const>
   <ref name="dd"/>
   <const>00</const>
   <ref name="dd"/>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <literal>(</literal>
   <ref name="addr"/>
   <literal>),</literal><ws/>
   <ref name="dd"/>
  </phrase>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="hl16"/>
  </var>
  <var name="addr">
   <integer class="addr" size="16" encoding="u"/>
  </var>
  <pattern>
   <const>0101</const>
   <ref name="dd"/>
   <const>00</const>
   <ref name="dd"/>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="dd"/>
   <literal>,</literal><ws/>
   <literal>(</literal>
   <ref name="addr"/>
   <literal>)</literal>
  </phrase>
 </fragment>

 <fragment>
  <var name="ss">
   <ref name="bc-de-hl-sp16"/>
  </var>
  <var name="nn">
   <integer class="addr" size="16"/>
  </var>
  <pattern>
   <const>10110111</const>
   <const>1100</const>
   <ref name="ss"/>
   <const>10</const>
   <ref name="ss"/>
   <ref name="nn"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <literal>(</literal>
   <ref name="nn"/>
   <literal>),</literal><ws/>
   <ref name="ss"/>
  </phrase>
  <effect>
   <assign>
    <memory size="16">
     <ref name="nn"/>
    </memory>
    <ref name="ss"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="ss">
   <ref name="bc-de-hl-sp16"/>
  </var>
  <var name="nn">
   <integer class="addr" size="16"/>
  </var>
  <pattern>
   <const>10110111</const>
   <const>1101</const>
   <ref name="ss"/>
   <const>10</const>
   <ref name="ss"/>
   <ref name="nn"/>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <ref name="ss"/>
   <literal>,</literal><ws/>
   <literal>(</literal>
   <ref name="nn"/>
   <literal>)</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="ss"/>
    <memory size="16">
     <ref name="nn"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ld16-sp-hl-instr">
 <fragment>
  <pattern>
   <const>10011111</const>
  </pattern>
  <phrase>
   <literal>LD</literal>
  </phrase>
  <phrase>
   <literal>SP,</literal><ws/>
   <literal>HL</literal>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <register name="HL"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="alu8-instr">
 <fragment>
  <var name="r">
   <ref name="regind8"/>
  </var>
  <var name="opcode">
   <ref name="add-instr"/>
   <ref name="adc-instr"/>
   <ref name="sub-instr"/>
   <ref name="sbc-instr"/>
   <ref name="and-instr"/>
   <ref name="xor-instr"/>
   <ref name="or-instr"/>
   <ref name="cp-instr"/>
  </var>
  <pattern>
   <ref name="r"/>
   <ref name="opcode"/>
   <const>01</const>
   <ref name="r"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="opcode"/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="r"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="regind8"/>
  </var>
  <var name="opcode">
   <ref name="inc-instr"/>
   <ref name="dec-instr"/>
  </var>
  <pattern>
   <ref name="opcode"/>
   <const>01</const>
   <ref name="r"/>
   <const>00</const>
   <ref name="r"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="r"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="alu8-imm-instr">
 <fragment>
  <var name="n">
   <integer size="8" encoding="u"/>
  </var>
  <var name="opcode">
   <ref name="add-instr"/>
   <ref name="adc-instr"/>
   <ref name="sub-instr"/>
   <ref name="sbc-instr"/>
   <ref name="and-instr"/>
   <ref name="xor-instr"/>
   <ref name="or-instr"/>
   <ref name="cp-instr"/>
  </var>
  <pattern>
   <const>011</const>
   <ref name="opcode"/>
   <const>11</const>
   <ref name="n"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="opcode"/>
   <ref name="n"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="n"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="alu8-acc-instr">
 <fragment>
  <pattern>
   <const>10110111</const>
   <const>00100010</const>
  </pattern>
  <phrase>
   <literal>NEG</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="A"/>
    <sub>
     <const>0</const>
     <register name="A"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="shift-instr">
 <fragment>
  <var name="r">
   <ref name="regind8"/>
  </var>
  <var name="opcode">
   <ref name="rlc-instr"/>
   <ref name="rrc-instr"/>
   <ref name="rl-instr"/>
   <ref name="rr-instr"/>
   <ref name="sla-instr"/>
   <ref name="sra-instr"/>
   <ref name="srl-instr"/>
  </var>
  <pattern>
   <const>11010011</const>
   <ref name="r"/>
   <ref name="opcode"/>
   <const>00</const>
   <ref name="r"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="r"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="shift-acc-instr">
 <fragment>
  <var name="opcode">
   <ref name="rlc-instr"/>
   <ref name="rrc-instr"/>
   <ref name="rl-instr"/>
   <ref name="rr-instr"/>
  </var>
  <pattern>
   <const>111</const>
   <ref name="opcode"/>
   <const>00</const>
  </pattern>
  <phrase>
   <ref name="opcode"/>
   <literal>A</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand">
     <register name="A"/>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10110111</const>
   <const>11100110</const>
  </pattern>
  <phrase>
   <literal>RRD</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <temp name="A">
    <register name="A"/>
   </temp>
   <assign>
    <register name="A"/>
    <or>
     <and>
      <temp name="A"/>
      <const>0xF0</const>
     </and>
     <and>
      <memory size="8">
       <register name="HL"/>
      </memory>
      <const>0x0F</const>
     </and>
    </or>
   </assign>
   <assign>
    <memory size="8">
     <register name="HL"/>
    </memory>
    <or>
     <and>
      <shift width="8" method="logical">
       <temp name="A"/>
       <const>4</const>
      </shift>
      <const>0xF0</const>
     </and> 
     <and>
      <shift width="8" method="logical">
       <memory size="8">
        <register name="HL"/>
       </memory>
       <const>-4</const>
      </shift>
      <const>0x0F</const>
     </and> 
    </or>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10110111</const>
   <const>11110110</const>
  </pattern>
  <phrase>
   <literal>RLD</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <temp name="A">
    <register name="A"/>
   </temp>
   <assign>
    <register name="A"/>
    <or>
     <and>
      <temp name="A"/>
      <const>0xF0</const>
     </and>
     <and>
      <shift width="8" method="logical">
       <memory size="8">
        <register name="HL"/>
       </memory>
       <const>-4</const>
      </shift>
      <const>0x0F</const>
     </and> 
    </or>
   </assign>
   <assign>
    <memory size="8">
     <register name="HL"/>
    </memory>
    <or>
     <and>
      <shift width="8" method="logical">
       <memory size="8">
        <register name="HL"/>
       </memory>
       <const>4</const>
      </shift>
      <const>0xF0</const>
     </and>
     <and>
      <temp name="A"/>
      <const>0x0F</const>
     </and>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="alu16-instr">
 <fragment>
  <var name="dd">
   <ref name="hl16"/>
  </var>
  <var name="ss">
   <ref name="bc16"/>
   <ref name="de16"/>
   <ref name="hl16"/>
   <ref name="sp16"/>
  </var>
  <pattern>
   <const>10</const>
   <ref name="dd"/>
   <ref name="ss"/>
   <const>00</const>
   <ref name="dd"/>
   <ref name="ss"/>
  </pattern>
  <phrase>
   <literal>ADD</literal>
  </phrase>
  <phrase>
   <ref name="dd"/>
   <literal>,</literal><ws/>
   <ref name="ss"/>
  </phrase>
  <effect>
   <assign>
    <ref name="dd"/>
    <add>
     <ref name="dd"/>
     <ref name="ss"/>
    </add>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="dd">
   <ref name="bc-de-hl-sp16"/>
  </var>
  <var name="opcode">
   <ref name="inc-instr"/>
   <ref name="dec-instr"/>
  </var>
  <pattern>
   <const>110</const>
   <ref name="opcode"/>
   <ref name="dd"/>
   <const>00</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="dd"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="dd"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="ss">
   <ref name="bc16"/>
   <ref name="de16"/>
   <ref name="hl16"/>
   <ref name="sp16"/>
  </var>
  <pattern>
   <const>10110111</const>
   <const>0100</const>
   <ref name="ss"/>
   <const>10</const>
   <ref name="ss"/>
  </pattern>
  <phrase>
   <literal>SBC</literal>
  </phrase>
  <phrase>
   <literal>HL,</literal><ws/>
   <ref name="ss"/>
  </phrase>
  <effect>
   <assign>
    <register name="HL"/>
    <sub>
     <register name="HL"/>
     <ref name="ss"/>
     <register name="CF"/>
    </sub>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="ss">
   <ref name="bc16"/>
   <ref name="de16"/>
   <ref name="hl16"/>
   <ref name="sp16"/>
  </var>
  <pattern>
   <const>10110111</const>
   <const>0101</const>
   <ref name="ss"/>
   <const>10</const>
   <ref name="ss"/>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <phrase>
   <literal>HL,</literal><ws/>
   <ref name="ss"/>
  </phrase>
  <effect>
   <assign>
    <register name="HL"/>
    <add>
     <register name="HL"/>
     <ref name="ss"/>
     <register name="CF"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="stack-instr">
 <fragment>
  <var name="dd">
   <ref name="bc-de-hl-af16"/>
  </var>
  <var name="opcode">
   <ref name="pop-instr"/>
   <ref name="push-instr"/>
  </var>
  <pattern>
   <const>10</const>
   <ref name="opcode"/>
   <const>0</const>
   <ref name="dd"/>
   <const>11</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="dd"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="dd"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="nop-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
  </pattern>
  <phrase>
   <literal>NOP</literal>
  </phrase>
  <phrase></phrase>
  <effect></effect>
 </fragment>
</define>

<define name="daa-instr">
 <fragment>
  <pattern>
   <const>11100100</const>
  </pattern>
  <phrase>
   <literal>DAA</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<define name="cpl-instr">
 <fragment>
  <pattern>
   <const>11110100</const>
  </pattern>
  <phrase>
   <literal>CPL</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="A"/>
    <xor>
     <register name="A"/>
     <const>0xFF</const>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="carry-instr">
 <fragment>
  <pattern>
   <const>11101100</const>
  </pattern>
  <phrase>
   <literal>SCF</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="CF"/>
    <const>1</const>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11111100</const>
  </pattern>
  <phrase>
   <literal>CCF</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="CF"/>
    <xor>
     <register name="CF"/>
     <const>1</const>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="jr-instr">
 <fragment>
  <var name="offset">
   <integer size="8" encoding="2c"/>
  </var>
  <var name="addr">
   <integer class="addr" size="16"/>
  </var>
  <where>
   <equals>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <const>2</const>
     <ref name="offset"/>
    </add>
   </equals>
  </where>
  <pattern>
   <const>00001000</const>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <literal>DJNZ</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <register name="B"/>
    <sub>
     <register name="B"/>
     <const>1</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <ref name="addr"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="offset">
   <integer size="8" encoding="2c"/>
  </var>
  <var name="addr">
   <integer class="addr" size="16"/>
  </var>
  <where>
   <equals>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <const>2</const>
     <ref name="offset"/>
    </add>
   </equals>
  </where>
  <pattern>
   <const>00011000</const>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <literal>JR</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="addr"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="cc">
   <ref name="cc2"/>
  </var>
  <var name="offset">
   <integer size="8" encoding="2c"/>
  </var>
  <var name="addr">
   <integer class="addr" size="16"/>
  </var>
  <where>
   <equals>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <const>2</const>
     <ref name="offset"/>
    </add>
   </equals>
  </where>
  <pattern>
   <const>000</const>
   <ref name="cc"/>
   <const>100</const>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <literal>JR</literal>
  </phrase>
  <phrase>
   <ref name="cc"/>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="addr"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ret-instr">
 <fragment>
  <pattern>
   <const>10010011</const>
  </pattern>
  <phrase>
   <literal>RET</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <memory size="16">
     <register name="SP"/>
    </memory>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>2</const>
    </add>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="cc">
   <ref name="cc3"/>
  </var>
  <pattern>
   <const>000</const>
   <ref name="cc"/>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>RET</literal>
  </phrase>
  <phrase>
   <ref name="cc"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <memory size="16">
     <register name="SP"/>
    </memory>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>2</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="jp-abs-instr">
 <fragment>
  <var name="nn">
   <integer size="16"/>
  </var>
  <pattern>
   <const>11000011</const>
   <ref name="nn"/>
  </pattern>
  <phrase>
   <literal>JP</literal>
  </phrase>
  <phrase>
   <ref name="nn"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="nn"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="cc">
   <ref name="cc3"/>
  </var>
  <var name="nn">
   <integer size="16"/>
  </var>
  <pattern>
   <const>010</const>
   <ref name="cc"/>
   <const>11</const>
   <ref name="nn"/>
  </pattern>
  <phrase>
   <literal>JP</literal>
  </phrase>
  <phrase>
   <ref name="cc"/>
   <literal>,</literal><ws/>
   <ref name="nn"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="nn"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="jp-ind-instr">
 <fragment>
  <var name="dd">
   <ref name="hl16"/>
  </var>
  <pattern>
   <const>1001</const>
   <ref name="dd"/>
   <const>11</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <literal>JP</literal>
  </phrase>
  <phrase>
   <literal>(</literal>
   <ref name="dd"/>
   <literal>)</literal>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <memory size="16">
     <ref name="dd"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="call-instr">
 <fragment>
  <var name="nn">
   <integer size="16"/>
  </var>
  <pattern>
   <const>10110011</const>
   <ref name="nn"/>
  </pattern>
  <phrase>
   <literal>CALL</literal>
  </phrase>
  <phrase>
   <ref name="nn"/>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>2</const>
    </sub>
   </assign>
   <assign>
    <memory size="16">
     <register name="SP"/>
    </memory>
    <register name="PC+"/>
   </assign>
   <assign>
    <register name="PC"/>
    <ref name="nn"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="cc">
   <ref name="cc3"/>
  </var>
  <var name="nn">
   <integer size="16"/>
  </var>
  <pattern>
   <const>001</const>
   <ref name="cc"/>
   <const>11</const>
   <ref name="nn"/>
  </pattern>
  <phrase>
   <literal>CALL</literal>
  </phrase>
  <phrase>
   <ref name="cc"/>
   <literal>,</literal><ws/>
   <ref name="nn"/>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>2</const>
    </sub>
   </assign>
   <assign>
    <memory size="16">
     <register name="SP"/>
    </memory>
    <register name="PC+"/>
   </assign>
   <assign>
    <register name="PC"/>
    <ref name="nn"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="t">
   <integer size="3"/>
  </var>
  <var name="p">
   <integer class="rst" size="8"/>
  </var>
  <where>
   <equals>
    <ref name="p"/>
    <mul>
     <ref name="t"/>
     <const>8</const>
    </mul>
   </equals>
  </where>
  <pattern>
   <const>111</const>
   <ref name="t"/>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>RST</literal>
  </phrase>
  <phrase>
   <ref name="p"/>
  </phrase>
  <effect>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>2</const>
    </sub>
   </assign>
   <assign>
    <memory size="16">
     <register name="SP"/>
    </memory>
    <register name="PC+"/>
   </assign>
   <assign>
    <register name="PC"/>
    <ref name="p"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10110111</const>
   <const>10100010</const>
  </pattern>
  <phrase>
   <literal>RETN</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <memory size="16">
     <register name="SP"/>
    </memory>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>2</const>
    </add>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10110111</const>
   <const>10110010</const>
  </pattern>
  <phrase>
   <literal>RETI</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <memory size="16">
     <register name="SP"/>
    </memory>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>2</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="halt-instr">
 <fragment>
  <pattern>
   <const>01101110</const>
  </pattern>
  <phrase>
   <literal>HALT</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<define name="ex-reg16-instr">
 <fragment>
  <pattern>
   <const>00010000</const>
  </pattern>
  <phrase>
   <literal>EX</literal>
  </phrase>
  <phrase>
   <literal>AF,</literal><ws/>
   <literal>AF'</literal>
  </phrase>
  <effect>
   <temp name="AF">
    <register name="AF"/>
   </temp>
   <assign>
    <register name="AF"/>
    <register name="AF'"/>
   </assign>
   <assign>
    <register name="AF'"/>
    <temp name="AF"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10011011</const>
  </pattern>
  <phrase>
   <literal>EXX</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <temp name="BC">
    <register name="BC"/>
   </temp>
   <assign>
    <register name="BC"/>
    <register name="BC'"/>
   </assign>
   <assign>
    <register name="BC'"/>
    <temp name="BC"/>
   </assign>
   <temp name="DE">
    <register name="DE"/>
   </temp>
   <assign>
    <register name="DE"/>
    <register name="DE'"/>
   </assign>
   <assign>
    <register name="DE'"/>
    <temp name="DE"/>
   </assign>
   <temp name="HL">
    <register name="HL"/>
   </temp>
   <assign>
    <register name="HL"/>
    <register name="HL'"/>
   </assign>
   <assign>
    <register name="HL'"/>
    <temp name="HL"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11010111</const>
  </pattern>
  <phrase>
   <literal>EX</literal>
  </phrase>
  <phrase>
   <literal>DE,</literal><ws/>
   <literal>HL</literal>
  </phrase>
  <effect>
   <temp name="HL">
    <register name="HL"/>
   </temp>
   <assign>
    <register name="HL"/>
    <register name="DE"/>
   </assign>
   <assign>
    <register name="DE"/>
    <temp name="HL"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ex-ind16-instr">
 <fragment>
  <var name="dd">
   <ref name="hl16"/>
  </var>
  <pattern>
   <const>1100</const>
   <ref name="dd"/>
   <const>11</const>
   <ref name="dd"/>
  </pattern>
  <phrase>
   <literal>EX</literal>
  </phrase>
  <phrase>
   <literal>(SP),</literal><ws/>
   <ref name="dd"/>
  </phrase>
  <effect>
   <temp name="dd">
    <ref name="dd"/>
   </temp>
   <assign>
    <ref name="dd"/>
    <memory size="16">
     <register name="SP"/>
    </memory>
   </assign>
   <assign>
    <memory size="16">
     <register name="SP"/>
    </memory>
    <temp name="dd"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="io-instr">
 <fragment>
  <var name="r">
   <ref name="reg8"/>
  </var>
  <pattern>
   <const>10110111</const>
   <const>000</const>
   <ref name="r"/>
   <const>10</const>
   <ref name="r"/>
  </pattern>
  <phrase>
   <literal>IN</literal>
  </phrase>
  <phrase>
   <ref name="r"/>
   <literal>,</literal><ws/>
   <literal>(C)</literal>
  </phrase>
 </fragment>

 <fragment>
  <var name="r">
   <ref name="reg8"/>
  </var>
  <pattern>
   <const>10110111</const>
   <const>100</const>
   <ref name="r"/>
   <const>10</const>
   <ref name="r"/>
  </pattern>
  <phrase>
   <literal>OUT</literal>
  </phrase>
  <phrase>
   <literal>(C),</literal><ws/>
   <ref name="r"/>
  </phrase>
 </fragment>
</define>

<define name="io-imm-instr">
 <fragment>
  <var name="n">
   <integer size="8"/>
  </var>
  <pattern>
   <const>11001011</const>
   <ref name="n"/>
  </pattern>
  <phrase>
   <literal>OUT</literal>
  </phrase>
  <phrase>
   <literal>(</literal>
   <ref name="n"/>
   <literal>),</literal><ws/>
   <literal>A</literal>
  </phrase>
 </fragment>

 <fragment>
  <var name="n">
   <integer size="8"/>
  </var>
  <pattern>
   <const>11011011</const>
   <ref name="n"/>
  </pattern>
  <phrase>
   <literal>IN</literal>
  </phrase>
  <phrase>
   <literal>A,</literal><ws/>
   <literal>(</literal>
   <ref name="n"/>
   <literal>)</literal>
  </phrase>
 </fragment>
</define>

<define name="irq-instr">
 <fragment>
  <pattern>
   <const>11001111</const>
  </pattern>
  <phrase>
   <literal>DI</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="IFF"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11011111</const>
  </pattern>
  <phrase>
   <literal>EI</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="IFF"/>
    <const>1</const>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="im">
   <ref name="im"/>
  </var>
  <pattern>
   <const>10110111</const>
   <const>011</const>
   <ref name="im"/>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>IM</literal>
  </phrase>
  <phrase>
   <ref name="im"/>
  </phrase>
  <effect></effect>
 </fragment>
</define>

<define name="bit-instr">
 <fragment>
  <var name="bit">
   <integer class="bit" size="3"/>
  </var>
  <var name="r">
   <ref name="regind8"/>
  </var>
  <var name="opcode">
   <ref name="bit-opcode"/>
   <ref name="res-opcode"/>
   <ref name="set-opcode"/>
  </var>
  <pattern>
   <const>11010011</const>
   <ref name="r"/>
   <ref name="bit"/>
   <ref name="opcode"/>
   <ref name="r"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="bit"/>
   <literal>,</literal><ws/>
   <ref name="r"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="bit" src="bit"/>
    <bind name="operand" src="r"/>
   </ref>
  </effect>
 </fragment>
</define>

<define name="repeated-instr">
 <fragment>
  <var name="op">
   <ref name="ld-op"/>
   <ref name="cp-op"/>
   <ref name="in-op"/>
   <ref name="out-op"/>
  </var>
  <var name="step">
   <ref name="step"/>
  </var>
  <pattern>
   <const>10110111</const>
   <ref name="op"/>
   <const>0</const>
   <ref name="step"/>
   <const>0101</const>
  </pattern>
  <phrase>
   <ref name="op"/>
   <ref name="step"/>
  </phrase>
  <phrase></phrase>
  <effect>
   <ref name="op">
    <bind name="step" src="step"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="op">
   <ref name="ld-op"/>
   <ref name="cp-op"/>
   <ref name="in-op"/>
   <ref name="ot-op"/>
  </var>
  <var name="step">
   <ref name="step"/>
  </var>
  <pattern>
   <const>10110111</const>
   <ref name="op"/>
   <const>0</const>
   <ref name="step"/>
   <const>1101</const>
  </pattern>
  <phrase>
   <ref name="op"/>
   <ref name="step"/>
   <literal>R</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<start>
 <prefix name="ix">10111011</prefix>
 <prefix name="iy">10111111</prefix>

 <ref name="ld8-instr"/>
 <ref name="ld16-instr"/>
 <ref name="ex-ind16-instr"/>
 <ref name="alu8-instr"/>
 <ref name="shift-instr"/>
 <ref name="alu16-instr"/>
 <ref name="stack-instr"/>
 <ref name="jp-ind-instr"/>
 <ref name="io-instr"/>
 <ref name="bit-instr"/>

 <require name="!ix">
  <require name="!iy">
   <ref name="ld16-sp-hl-instr"/>
   <ref name="ex-reg16-instr"/>
   <ref name="alu8-imm-instr"/>
   <ref name="alu8-acc-instr"/>
   <ref name="shift-acc-instr"/>
   <ref name="nop-instr"/>
   <ref name="daa-instr"/>
   <ref name="cpl-instr"/>
   <ref name="halt-instr"/>
   <ref name="carry-instr"/>
   <ref name="jr-instr"/>
   <ref name="jp-abs-instr"/>
   <ref name="ret-instr"/>
   <ref name="call-instr"/>
   <ref name="irq-instr"/>
   <ref name="io-imm-instr"/>
   <ref name="repeated-instr"/>
  </require>
 </require>
</start>
</cpudl>
