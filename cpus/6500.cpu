<!--
This file is part of Codemancer.
Copyright 2014 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="little">
<cpu name="6500"/>
<cpu name="65c00" extends="6500">
 <!-- Features common to all 65C00 variants. -->
 <feature name="65c00"/>
</cpu>
<cpu name="r65c00" extends="65c00">
 <!-- Adds RMB, SMB, BBR and BBS instructions. -->
 <feature name="r65c00"/>
</cpu>
<cpu name="w65c00s" extends="r65c00">
 <!-- Adds WAI and STP instructions. -->
 <feature name="w65c00s"/>
</cpu>

<style>
 <property name="base" value="16"/>
 <property name="prefix" value="$"/>
 <property name="suffix" value=""/>
 <property name="whitespace" value=" "/>
 <select class="imm">
  <property name="width" value="2"/>
 </select>
 <select class="zp">
  <property name="width" value="2"/>
 </select>
 <select class="abs">
  <property name="width" value="4"/>
 </select>
 <select class="bit">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
</style>

<register name="A" size="8"/>
<register name="X" size="8"/>
<register name="Y" size="8"/>
<register name="S" size="8"/>
<register name="P" size="8"/>
<register name="PC" size="16"/>

<register name="N" size="1"/>
<register name="V" size="1"/>
<register name="B" size="1"/>
<register name="D" size="1"/>
<register name="I" size="1"/>
<register name="Z" size="1"/>
<register name="C" size="1"/>

<define name="cc">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>PL</literal>
  </phrase>
  <effect>
   <equals>
    <ref name="N"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>MI</literal>
  </phrase>
  <effect>
   <equals>
    <ref name="N"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>VC</literal>
  </phrase>
  <effect>
   <equals>
    <ref name="V"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>VS</literal>
  </phrase>
  <effect>
   <equals>
    <ref name="V"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>CC</literal>
  </phrase>
  <effect>
   <equals>
    <ref name="C"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>CS</literal>
  </phrase>
  <effect>
   <equals>
    <ref name="C"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>NE</literal>
  </phrase>
  <effect>
   <equals>
    <ref name="Z"/>
    <const>0</const>
   </equals>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>EQ</literal>
  </phrase>
  <effect>
   <equals>
    <ref name="Z"/>
    <const>1</const>
   </equals>
  </effect>
 </fragment>
</define>

<define name="bit-value">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>R</literal>
  </phrase>
  <effect>
   <const>0</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>S</literal>
  </phrase>
  <effect>
   <const>1</const>
  </effect>
 </fragment>
</define>

<define name="indx-mode">
 <fragment>
  <var name="addr">
   <integer class="zp" size="8"/>
  </var>
  <pattern>
   <const>000</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <literal>(</literal>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>X)</literal>
  </phrase>
  <effect>
   <memory size="8">
    <memory size="16">
     <add>
      <ref name="addr"/>
      <register name="X"/>
     </add>
    </memory>
   </memory>
  </effect>
 </fragment>
</define>

<define name="zp-mode">
 <fragment>
  <var name="addr">
   <integer class="zp" size="8"/>
  </var>
  <pattern>
   <const>100</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <memory size="8">
    <ref name="addr"/>
   </memory>
  </effect>
 </fragment>
</define>

<define name="imm-mode">
 <fragment>
  <var name="imm">
   <integer class="imm" size="8"/>
  </var>
  <pattern>
   <const>010</const>
  </pattern>
  <pattern>
   <ref name="imm"/>
  </pattern>
  <phrase>
   <literal>#</literal>
   <ref name="imm"/>
  </phrase>
  <effect>
   <ref name="imm"/>
  </effect>
 </fragment>
</define>

<define name="imp-mode">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <pattern></pattern>
  <phrase>
   <literal>A</literal>
  </phrase>
  <effect>
   <register name="A"/>
  </effect>
 </fragment>
</define>

<define name="abs-mode">
 <fragment>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <pattern>
   <const>110</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <memory size="8">
    <ref name="addr"/>
   </memory>
  </effect>
 </fragment>
</define>

<define name="indy-mode">
 <fragment>
  <var name="addr">
   <integer class="zp" size="8"/>
  </var>
  <pattern>
   <const>001</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <literal>(</literal>
   <ref name="addr"/>
   <literal>),</literal><ws/>
   <literal>Y</literal>
  </phrase>
  <effect>
   <memory size="8">
    <add>
     <memory size="16">
      <ref name="addr"/>
     </memory>
     <register name="Y"/>
    </add>
   </memory>
  </effect>
 </fragment>
</define>

<define name="zpx-mode">
 <fragment>
  <var name="addr">
   <integer class="zp" size="8"/>
  </var>
  <pattern>
   <const>101</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>X</literal>
  </phrase>
  <effect>
   <memory size="8">
    <add>
     <ref name="addr"/>
     <register name="X"/>
    </add>
   </memory>
  </effect>
 </fragment>
</define>

<define name="zpy-x-mode">
 <fragment>
  <var name="addr">
   <integer class="zp" size="8"/>
  </var>
  <pattern>
   <const>101</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>Y</literal>
  </phrase>
  <effect>
   <memory>
    <add>
     <ref name="addr"/>
     <register name="Y"/>
    </add>
   </memory>
  </effect>
 </fragment>
</define>

<define name="absy-mode">
 <fragment>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <pattern>
   <const>011</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>Y</literal>
  </phrase>
  <effect>
   <memory size="8">
    <add>
     <ref name="addr"/>
     <register name="Y"/>
    </add>
   </memory>
  </effect>
 </fragment>
</define>

<define name="absx-mode">
 <fragment>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <pattern>
   <const>111</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>X</literal>
  </phrase>
  <effect>
   <memory size="8">
    <add>
     <ref name="addr"/>
     <register name="X"/>
    </add>
   </memory>
  </effect>
 </fragment>
</define>

<define name="absy-x-mode">
 <fragment>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <pattern>
   <const>111</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>Y</literal>
  </phrase>
  <effect>
   <memory>
    <add>
     <ref name="addr"/>
     <register name="Y"/>
    </add>
   </memory>
  </effect>
 </fragment>
</define>

<define name="imm-xy-mode">
 <fragment>
  <var name="value">
   <integer class="imm" size="8"/>
  </var>
  <pattern>
   <const>000</const>
  </pattern>
  <pattern>
   <ref name="value"/>
  </pattern>
  <phrase>
   <literal>#</literal>
   <ref name="value"/>
  </phrase>
  <effect>
   <ref name="value"/>
  </effect>
 </fragment>
</define>

<define name="ind-mode">
 <fragment>
  <var name="addr">
   <integer class="zp" size="8"/>
  </var>
  <pattern>
   <const>001</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <literal>(</literal>
   <ref name="addr"/>
   <literal>)</literal>
  </phrase>
  <effect>
   <memory size="8">
    <memory size="16">
     <ref name="addr"/>
    </memory>
   </memory>
  </effect>
 </fragment>
</define>

<define name="zp-trb-mode">
 <fragment>
  <var name="addr">
   <integer class="zp" size="8"/>
  </var>
  <pattern>
   <const>10</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <memory size="8">
    <ref name="addr"/>
   </memory>
  </effect>
 </fragment>
</define>

<define name="abs-trb-mode">
 <fragment>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <pattern>
   <const>11</const>
  </pattern>
  <pattern>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <memory size="8">
    <ref name="addr"/>
   </memory>
  </effect>
 </fragment>
</define>

<define name="phpl-operand">
 <fragment>
  <pattern>
   <const>00010</const>
  </pattern>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <literal>P</literal>
  </phrase>
  <effect>
   <register name="P"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>00010</const>
  </pattern>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>A</literal>
  </phrase>
  <effect>
   <register name="A"/>
  </effect>
 </fragment>

 <require name="65c00">
  <fragment>
   <pattern>
    <const>01011</const>
   </pattern>
   <pattern>
    <const>10</const>
   </pattern>
   <phrase>
    <literal>Y</literal>
   </phrase>
   <effect>
    <register name="Y"/>
   </effect>
  </fragment>

  <fragment>
   <pattern>
    <const>01011</const>
   </pattern>
   <pattern>
    <const>11</const>
   </pattern>
   <phrase>
    <literal>X</literal>
   </phrase>
   <effect>
    <register name="X"/>
   </effect>
  </fragment>
 </require>
</define>

<define name="clse-operand">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <register name="C"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>I</literal>
  </phrase>
  <effect>
   <register name="I"/>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>11</const>
  </pattern>
  <phrase>
   <literal>D</literal>
  </phrase>
  <effect>
   <register name="D"/>
  </effect>
 </fragment>
</define>

<define name="ora-instr">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>ORA</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <or>
     <register name="A"/>
     <ref name="operand"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="and-instr">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>AND</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <and>
     <register name="A"/>
     <ref name="operand"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xor-instr">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>XOR</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <xor>
     <register name="A"/>
     <ref name="operand"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="adc-instr">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>ADC</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <add>
     <register name="A"/>
     <ref name="operand"/>
     <register name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sta-instr">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>STA</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <register name="A"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="lda-instr">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>LDA</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cmp-instr">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>CMP</literal>
  </phrase>
  <effect>
   <sub>
    <register name="A"/>
    <ref name="operand"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="sbc-instr">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>SBC</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <sub>
     <register name="A"/>
     <ref name="operand"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="asl-instr">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>ASL</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="arithmetic" carry="C">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rol-instr">
 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>ROL</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="rotation">
     <ref name="operand"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="lsr-instr">
 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>LSR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="logical" carry="C">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ror-instr">
 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>ROR</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <shift width="8" method="rotation">
     <ref name="operand"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="dec-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>DEC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <sub>
     <ref name="operand"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="inc-instr">
 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>INC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <add>
     <ref name="operand"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sty-instr">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>STY</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <register name="Y"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ldy-instr">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>LDY</literal>
  </phrase>
  <effect>
   <assign>
    <register name="Y"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cpy-instr">
 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>CPY</literal>
  </phrase>
  <effect>
   <sub>
    <register name="Y"/>
    <ref name="operand"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="cpx-instr">
 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>CPX</literal>
  </phrase>
  <effect>
   <sub>
    <register name="X"/>
    <ref name="operand"/>
   </sub>
  </effect>
 </fragment>
</define>

<define name="stx-instr">
 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>STX</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <register name="X"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ldx-instr">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>LDX</literal>
  </phrase>
  <effect>
   <assign>
    <register name="X"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="txa-instr">
 <fragment>
  <pattern>
   <const>01010001</const>
  </pattern>
  <phrase>
   <literal>TXA</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="A"/>
    <register name="X"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tya-instr">
 <fragment>
  <pattern>
   <const>00011001</const>
  </pattern>
  <phrase>
   <literal>TYA</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="A"/>
    <register name="Y"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="txs-instr">
 <fragment>
  <pattern>
   <const>01011001</const>
  </pattern>
  <phrase>
   <literal>TXS</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="S"/>
    <register name="X"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tay-instr">
 <fragment>
  <pattern>
   <const>00010101</const>
  </pattern>
  <phrase>
   <literal>TAY</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="Y"/>
    <register name="A"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tax-instr">
 <fragment>
  <pattern>
   <const>01010101</const>
  </pattern>
  <phrase>
   <literal>TAX</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="X"/>
    <register name="A"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="tsx-instr">
 <fragment>
  <pattern>
   <const>01011101</const>
  </pattern>
  <phrase>
   <literal>TSX</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="X"/>
    <register name="S"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="dey-instr">
 <fragment>
  <pattern>
   <const>00010001</const>
  </pattern>
  <phrase>
   <literal>DEY</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="Y"/>
    <sub>
     <register name="Y"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="iny-instr">
 <fragment>
  <pattern>
   <const>00010011</const>
  </pattern>
  <phrase>
   <literal>INY</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="Y"/>
    <add>
     <register name="Y"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="dex-instr">
 <fragment>
  <pattern>
   <const>01010011</const>
  </pattern>
  <phrase>
   <literal>DEX</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="X"/>
    <sub>
     <register name="X"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="inx-instr">
 <fragment>
  <pattern>
   <const>00010111</const>
  </pattern>
  <phrase>
   <literal>INX</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="X"/>
    <add>
     <register name="X"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="ph-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>PH</literal>
  </phrase>
  <effect>
   <assign>
    <memory>
     <add>
      <const>256</const>
      <register name="S"/>
     </add>
    </memory>
    <ref name="operand"/>
   </assign>
   <assign>
    <register name="S"/>
    <sub>
     <register name="S"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="pl-instr">
 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>PL</literal>
  </phrase>
  <effect>
   <assign>
    <register name="S"/>
    <add>
     <register name="S"/>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <ref name="operand"/>
    <memory>
     <add>
      <const>256</const>
      <register name="S"/>
     </add>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cl-instr">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>CL</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="se-instr">
 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>SE</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <const>1</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="clv-instr">
 <fragment>
  <pattern>
   <const>00011101</const>
  </pattern>
  <phrase>
   <literal>CLV</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="V"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="brk-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
  </pattern>
  <phrase>
   <literal>BRK</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <memory>
     <add>
      <const>255</const>
      <register name="S"/>
     </add>
    </memory>
    <register name="PC"/>
   </assign>
   <assign>
    <memory>
     <add>
      <const>254</const>
      <register name="S"/>
     </add>
    </memory>
    <register name="P"/>
   </assign>
   <assign>
    <register name="S"/>
    <sub>
     <register name="S"/>
     <const>3</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <const>65534</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="jsr-instr">
 <fragment>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <pattern>
   <const>00000100</const>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <literal>JSR</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <memory>
     <add>
      <const>255</const>
      <register name="S"/>
     </add>
    </memory>
    <register name="PC"/>
   </assign>
   <assign>
    <register name="S"/>
    <sub>
     <register name="S"/>
     <const>2</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <ref name="addr"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rti-instr">
 <fragment>
  <pattern>
   <const>00000010</const>
  </pattern>
  <phrase>
   <literal>RTI</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="P"/>
    <memory>
     <add>
      <const>257</const>
      <register name="S"/>
     </add>
    </memory>
   </assign>
   <assign>
    <register name="PC"/>
    <add>
     <memory>
      <add>
       <const>258</const>
       <register name="S"/>
      </add>
     </memory>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <register name="S"/>
    <add>
     <register name="S"/>
     <const>3</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rts-instr">
 <fragment>
  <pattern>
   <const>00000110</const>
  </pattern>
  <phrase>
   <literal>RTS</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <add>
     <memory>
      <add>
       <const>257</const>
       <register name="S"/>
      </add>
     </memory>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <register name="S"/>
    <add>
     <register name="S"/>
     <const>2</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bra-instr">
 <fragment>
  <var name="offset">
   <integer size="8" encoding="2c"/>
  </var>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <where>
   <equals>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <const>2</const>
     <ref name="offset"/>
    </add>
   </equals>
  </where>
  <pattern>
   <const>00000001</const>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <literal>BRA</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="addr"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="jmp-instr">
 <fragment>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <pattern>
   <const>00110010</const>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <literal>JMP</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="addr"/>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="cc">
   <ref name="cc"/>
  </var>
  <var name="offset">
   <integer size="8" encoding="2c"/>
  </var>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <where>
   <equals>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <const>2</const>
     <ref name="offset"/>
    </add>
   </equals>
  </where>
  <pattern>
   <const>00001</const>
   <ref name="cc"/>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <literal>B</literal>
   <ref name="cc"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <if>
    <test>
     <ref name="cc"/>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <ref name="addr"/>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>

 <fragment>
  <var name="operand">
   <ref name="abs-mode"/>
   <require name="65c00">
    <ref name="absx-mode"/>
   </require>
  </var>
  <pattern>
   <const>00</const>
   <ref name="operand"/>
   <const>110</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <literal>JMP</literal>
  </phrase>
  <phrase>
   <literal>(</literal>
   <ref name="operand"/>
   <literal>)</literal>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="operand"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="nop-instr">
 <fragment>
  <pattern>
   <const>01010111</const>
  </pattern>
  <phrase>
   <literal>NOP</literal>
  </phrase>
  <phrase></phrase>
  <effect></effect>
 </fragment>
</define>

<define name="incdec-imp-instr">
 <fragment>
  <pattern>
   <const>01011000</const>
  </pattern>
  <phrase>
   <literal>INC</literal>
  </phrase>
  <phrase>
   <literal>A</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <add>
     <register name="A"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01011100</const>
  </pattern>
  <phrase>
   <literal>DEC</literal>
  </phrase>
  <phrase>
   <literal>A</literal>
  </phrase>
  <effect>
   <assign>
    <register name="A"/>
    <sub>
     <register name="A"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="stz-instr">
 <fragment>
  <var name="operand">
   <ref name="zp-mode"/>
   <ref name="zpx-mode"/>
  </var>
  <pattern>
   <const>00</const>
   <ref name="operand"/>
   <const>110</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <literal>STZ</literal>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="operand">
   <ref name="absx-mode"/>
  </var>
  <pattern>
   <const>01</const>
   <ref name="operand"/>
   <const>001</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <literal>STZ</literal>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <assign>
    <ref name="operand"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="addr">
   <integer class="abs" size="16"/>
  </var>
  <pattern>
   <const>00111001</const>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <literal>STZ</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="addr"/>
    </memory>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bit-instr">
 <fragment>
  <var name="operand">
   <ref name="zp-mode"/>
   <ref name="abs-mode"/>
   <require name="65c00">
    <ref name="zpx-mode"/>
    <ref name="absx-mode"/>
   </require>
  </var>
  <pattern>
   <const>00</const>
   <ref name="operand"/>
   <const>100</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <literal>BIT</literal>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <and>
    <register name="A"/>
    <ref name="operand"/>
   </and>
  </effect>
 </fragment>

 <fragment>
  <var name="operand">
   <require name="65c00">
    <ref name="imm-mode"/>
   </require>
  </var>
  <pattern>
   <const>10</const>
   <ref name="operand"/>
   <const>001</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <literal>BIT</literal>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <and>
    <register name="A"/>
    <ref name="operand"/>
   </and>
  </effect>
 </fragment>
</define>

<define name="tsb-instr">
 <fragment>
  <var name="operand">
   <ref name="zp-mode"/>
   <ref name="abs-mode"/>
  </var>
  <pattern>
   <const>00</const>
   <ref name="operand"/>
   <const>000</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <literal>TSB</literal>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <and>
    <ref name="operand"/>
    <register name="A"/>
   </and>
   <assign>
    <ref name="operand"/>
    <or>
     <ref name="operand"/>
     <register name="A"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="trb-instr">
 <fragment>
  <var name="operand">
   <ref name="zp-trb-mode"/>
   <ref name="abs-trb-mode"/>
  </var>
  <pattern>
   <const>00</const>
   <ref name="operand"/>
   <const>1000</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <literal>TRB</literal>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <and>
    <ref name="operand"/>
    <register name="A"/>
   </and>
   <assign>
    <ref name="operand"/>
    <and>
     <ref name="operand"/>
     <xor>
      <register name="A"/>
      <const>0x100</const>
     </xor>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rsmb-instr">
 <fragment>
  <var name="bit">
   <integer class="bit" size="3"/>
  </var>
  <var name="value">
   <ref name="bit-value"/>
  </var>
  <var name="addr">
   <integer class="zp" size="8"/>
  </var>
  <pattern>
   <const>1110</const>
   <ref name="bit"/>
   <ref name="value"/>
   <ref name="addr"/>
  </pattern>
  <phrase>
   <ref name="value"/>
   <literal>MB</literal>
   <ref name="bit"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="addr"/>
    </memory>
    <or>
     <and>
      <memory size="8">
       <ref name="addr"/>
      </memory>
      <xor>
       <shift width="8" method="logical">
        <ref name="value"/>
       </shift>
       <const>0xFF</const>
      </xor>
     </and>
     <shift width="8" method="logical">
      <ref name="value"/>
     </shift>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bb-instr">
 <fragment>
  <var name="bit">
   <integer class="bit" size="3"/>
  </var>
  <var name="value">
   <ref name="bit-value"/>
  </var>
  <var name="maddr">
   <integer class="zp" size="8"/>
  </var>
  <var name="offset">
   <integer size="8" encoding="2c"/>
  </var>
  <var name="baddr">
   <integer class="abs" size="16"/>
  </var>
  <where>
   <equals>
    <ref name="baddr"/>
    <add>
     <register name="PC"/>
     <const>3</const>
     <ref name="offset"/>
    </add>
   </equals>
  </where>
  <pattern>
   <const>1111</const>
   <ref name="bit"/>
   <ref name="value"/>
   <ref name="maddr"/>
   <ref name="offset"/>
  </pattern>
  <phrase>
   <literal>BB</literal>
   <ref name="value"/>
   <ref name="bit"/>
  </phrase>
  <phrase>
   <ref name="maddr"/>
   <literal>,</literal><ws/>
   <ref name="baddr"/>
  </phrase>
  <effect>
   <equals>
    <and>
     <shift width="8" method="logical">
      <memory size="8">
       <ref name="maddr"/>
      </memory>
      <ref name="bit"/>
     </shift>
     <const>1</const>
    </and>
    <ref name="value"/>
   </equals>
  </effect>
 </fragment>
</define>

<define name="wai-instr">
 <fragment>
  <pattern>
   <const>11010011</const>
  </pattern>
  <phrase>
   <literal>WAI</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<define name="stp-instr">
 <fragment>
  <pattern>
   <const>11011011</const>
  </pattern>
  <phrase>
   <literal>STP</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<start>
 <fragment>
  <var name="opcode">
   <ref name="ora-instr"/>
   <ref name="and-instr"/>
   <ref name="xor-instr"/>
   <ref name="adc-instr"/>
   <ref name="lda-instr"/>
   <ref name="cmp-instr"/>
   <ref name="sbc-instr"/>
  </var>
  <var name="operand">
   <ref name="indx-mode"/>
   <ref name="zp-mode"/>
   <ref name="imm-mode"/>
   <ref name="abs-mode"/>
   <ref name="indy-mode"/>
   <ref name="zpx-mode"/>
   <ref name="absy-mode"/>
   <ref name="absx-mode"/>
  </var>
  <pattern>
   <const>10</const>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="sta-instr"/>
  </var>
  <var name="operand">
   <ref name="indx-mode"/>
   <ref name="zp-mode"/>
   <ref name="abs-mode"/>
   <ref name="indy-mode"/>
   <ref name="zpx-mode"/>
   <ref name="absy-mode"/>
   <ref name="absx-mode"/>
  </var>
  <pattern>
   <const>10</const>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <require name="65c00">
  <fragment>
   <var name="opcode">
    <ref name="ora-instr"/>
    <ref name="and-instr"/>
    <ref name="xor-instr"/>
    <ref name="adc-instr"/>
    <ref name="sta-instr"/>
    <ref name="lda-instr"/>
    <ref name="cmp-instr"/>
    <ref name="sbc-instr"/>
   </var>
   <var name="operand">
    <ref name="ind-mode"/>
   </var>
   <pattern>
    <const>01</const>
    <ref name="operand"/>
    <ref name="opcode"/>
    <ref name="operand"/>
   </pattern>
   <phrase>
    <ref name="opcode"/>
   </phrase>
   <phrase>
    <ref name="operand"/>
   </phrase>
   <effect>
    <ref name="opcode">
     <bind name="operand" src="operand"/>
    </ref>
   </effect>
  </fragment>
 </require>

 <fragment>
  <var name="opcode">
   <ref name="asl-instr"/>
   <ref name="rol-instr"/>
   <ref name="lsr-instr"/>
   <ref name="ror-instr"/>
  </var>
  <var name="operand">
   <ref name="zp-mode"/>
   <ref name="imp-mode"/>
   <ref name="abs-mode"/>
   <ref name="zpx-mode"/>
   <ref name="absx-mode"/>
  </var>
  <pattern>
   <const>01</const>
   <ref name="operand"/>
   <ref name="opcode"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="dec-instr"/>
   <ref name="inc-instr"/>
  </var>
  <var name="operand">
   <ref name="zp-mode"/>
   <ref name="abs-mode"/>
   <ref name="zpx-mode"/>
   <ref name="absx-mode"/>
  </var>
  <pattern>
   <const>01</const>
   <ref name="operand"/>
   <ref name="opcode"/>
   <const>11</const>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="operand">
   <choice>
    <ref name="imm-xy-mode"/>
    <ref name="zp-mode"/>
    <ref name="abs-mode"/>
   </choice>
  </var>
  <var name="operation">
   <choice>
    <ref name="ldy-instr"/>
    <ref name="cpy-instr"/>
    <ref name="cpx-instr"/>
   </choice>
  </var>
  <pattern>
   <const>00</const>
   <ref name="operand"/>
   <ref name="operation"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="operation"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operation">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="operand">
   <choice>
    <ref name="zpx-mode"/>
    <ref name="absx-mode"/>
   </choice>
  </var>
  <var name="operation">
   <choice>
    <ref name="ldy-instr"/>
   </choice>
  </var>
  <pattern>
   <const>00</const>
   <ref name="operand"/>
   <ref name="operation"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="operation"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operation">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="operand">
   <choice>
    <ref name="zp-mode"/>
    <ref name="abs-mode"/>
    <ref name="zpx-mode"/>
   </choice>
  </var>
  <var name="operation">
   <choice>
    <ref name="sty-instr"/>
   </choice>
  </var>
  <pattern>
   <const>00</const>
   <ref name="operand"/>
   <ref name="operation"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="operation"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operation">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="operand">
   <choice>
    <ref name="zp-mode"/>
    <ref name="abs-mode"/>
    <ref name="zpy-x-mode"/>
   </choice>
  </var>
  <var name="operation">
   <choice>
    <ref name="stx-instr"/>
   </choice>
  </var>
  <pattern>
   <const>01</const>
   <ref name="operand"/>
   <ref name="operation"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="operation"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operation">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="operand">
   <choice>
    <ref name="imm-xy-mode"/>
    <ref name="zp-mode"/>
    <ref name="abs-mode"/>
    <ref name="zpy-x-mode"/>
    <ref name="absy-x-mode"/>
   </choice>
  </var>
  <var name="operation">
   <choice>
    <ref name="ldx-instr"/>
   </choice>
  </var>
  <pattern>
   <const>01</const>
   <ref name="operand"/>
   <ref name="operation"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="operation"/>
  </phrase>
  <phrase>
   <ref name="operand"/>
  </phrase>
  <effect>
   <ref name="operation">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <ref name="txa-instr"/>
 <ref name="tya-instr"/>
 <ref name="txs-instr"/>
 <ref name="tay-instr"/>
 <ref name="tax-instr"/>
 <ref name="tsx-instr"/>

 <ref name="dey-instr"/>
 <ref name="iny-instr"/>
 <ref name="dex-instr"/>
 <ref name="inx-instr"/>

 <fragment>
  <var name="operation">
   <ref name="ph-instr"/>
   <ref name="pl-instr"/>
  </var>
  <var name="operand">
   <ref name="phpl-operand"/>
  </var>
  <pattern>
   <ref name="operand"/>
   <ref name="operation"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="operation"/>
   <ref name="operand"/>
  </phrase>
  <phrase></phrase>
  <effect>
   <ref name="operation">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="operation">
   <ref name="cl-instr"/>
   <ref name="se-instr"/>
  </var>
  <var name="operand">
   <ref name="clse-operand"/>
  </var>
  <pattern>
   <const>00011</const>
   <ref name="operation"/>
   <ref name="operand"/>
  </pattern>
  <phrase>
   <ref name="operation"/>
   <ref name="operand"/>
  </phrase>
  <phrase></phrase>
  <effect>
   <ref name="operation">
    <bind name="operand" src="operand"/>
   </ref>
  </effect>
 </fragment>

 <ref name="bit-instr"/>
 <ref name="clv-instr"/>
 <ref name="brk-instr"/>
 <ref name="jsr-instr"/>
 <ref name="rti-instr"/>
 <ref name="rts-instr"/>
 <ref name="jmp-instr"/>
 <ref name="nop-instr"/>

 <require name="65c00">
  <ref name="bra-instr"/>
  <ref name="incdec-imp-instr"/>
  <ref name="stz-instr"/>
  <ref name="tsb-instr"/>
  <ref name="trb-instr"/>
 </require>

 <require name="r65c00">
  <ref name="rsmb-instr"/>
  <ref name="bb-instr"/>
 </require>

 <require name="w65c00s">
  <ref name="wai-instr"/>
  <ref name="stp-instr"/>
 </require>
</start>
</cpudl>
