<!--
This file is part of Codemancer.
Copyright 2015 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="little">
<cpu name="pic18"/>

<style>
 <property name="base" value="16"/>
 <property name="prefix" value="0x"/>
 <property name="suffix" value=""/>
 <property name="whitespace" value=" "/>
 <select class="daddr">
  <property name="width" value="2"/>
 </select>
 <select class="paddr">
  <property name="width" value="4"/>
 </select>
 <select class="imm">
  <property name="width" value="2"/>
 </select>
 <select class="inc">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
 <select class="bit">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
</style>

<register name="W" size="8"/>
<register name="PC" size="21"/>
<register name="C" size="1"/>

<define name="daddr">
 <fragment>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="f"/>
   <const>0</const>
  </pattern>
  <phrase>
   <ref name="f"/>
  </phrase>
  <phrase>
   <literal>0</literal>
  </phrase>
  <effect>
   <memory as="access">
    <ref name="f"/>
   </memory>
  </effect>
 </fragment>

 <fragment>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="f"/>
   <const>1</const>
  </pattern>
  <phrase>
   <ref name="f"/>
  </phrase>
  <phrase>
   <literal>1</literal>
  </phrase>
  <effect>
   <memory as="data">
    <ref name="f"/>
   </memory>
  </effect>
 </fragment>
</define>

<define name="decf-op">
 <fragment>
  <pattern>
   <const>100000</const>
  </pattern>
  <phrase>
   <literal>DECF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="iorwf-op">
 <fragment>
  <pattern>
   <const>001000</const>
  </pattern>
  <phrase>
   <literal>IORWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <or>
     <register name="W"/>
     <ref name="src"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="andwf-op">
 <fragment>
  <pattern>
   <const>101000</const>
  </pattern>
  <phrase>
   <literal>ANDWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <and>
     <register name="W"/>
     <ref name="src"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xorwf-op">
 <fragment>
  <pattern>
   <const>011000</const>
  </pattern>
  <phrase>
   <literal>XORWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <xor>
     <register name="W"/>
     <ref name="src"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="comf-op">
 <fragment>
  <pattern>
   <const>111000</const>
  </pattern>
  <phrase>
   <literal>COMF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <xor>
     <ref name="src"/>
     <const>0xFF</const>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="addwfc-op">
 <fragment>
  <pattern>
   <const>000100</const>
  </pattern>
  <phrase>
   <literal>ADDWFC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <register name="W"/>
     <ref name="src"/>
     <register name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="addwf-op">
 <fragment>
  <pattern>
   <const>100100</const>
  </pattern>
  <phrase>
   <literal>ADDWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <register name="W"/>
     <ref name="src"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="incf-op">
 <fragment>
  <pattern>
   <const>010100</const>
  </pattern>
  <phrase>
   <literal>INCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="decfsz-op">
 <fragment>
  <pattern>
   <const>110100</const>
  </pattern>
  <phrase>
   <literal>DECFSZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="rrcf-op">
 <fragment>
  <pattern>
   <const>001100</const>
  </pattern>
  <phrase>
   <literal>RRCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="extended">
     <ref name="src"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rlcf-op">
 <fragment>
  <pattern>
   <const>101100</const>
  </pattern>
  <phrase>
   <literal>RLCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="extended">
     <ref name="src"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="swapf-op">
 <fragment>
  <pattern>
   <const>011100</const>
  </pattern>
  <phrase>
   <literal>SWAPF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <or>
     <shift width="8" method="logical">
      <and>
       <ref name="src"/>
       <const>0x0F</const>
      </and>
      <const>4</const>
     </shift>
     <shift width="8" method="logical">
      <and>
       <ref name="src"/>
       <const>0xF0</const>
      </and>
      <const>-4</const>
     </shift>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="incfsz-op">
 <fragment>
  <pattern>
   <const>111100</const>
  </pattern>
  <phrase>
   <literal>INCFSZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="rrncf-op">
 <fragment>
  <pattern>
   <const>000010</const>
  </pattern>
  <phrase>
   <literal>RRNCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="rotation">
     <ref name="src"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rlncf-op">
 <fragment>
  <pattern>
   <const>100010</const>
  </pattern>
  <phrase>
   <literal>RLNCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="rotation">
     <ref name="src"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="infsnz-op">
 <fragment>
  <pattern>
   <const>010010</const>
  </pattern>
  <phrase>
   <literal>INFSNZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <else>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </else>
   </if>
  </effect>
 </fragment>
</define>

<define name="dcfsnz-op">
 <fragment>
  <pattern>
   <const>110010</const>
  </pattern>
  <phrase>
   <literal>DCFSNZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <else>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </else>
   </if>
  </effect>
 </fragment>
</define>

<define name="movf-op">
 <fragment>
  <pattern>
   <const>001010</const>
  </pattern>
  <phrase>
   <literal>MOVF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <ref name="src"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="subfwb-op">
 <fragment>
  <pattern>
   <const>101010</const>
  </pattern>
  <phrase>
   <literal>SUBFWB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <register name="W"/>
     <ref name="src"/>
     <register name="C"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="subwfb-op">
 <fragment>
  <pattern>
   <const>011010</const>
  </pattern>
  <phrase>
   <literal>SUBWFB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <register name="W"/>
     <register name="C"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="subwf-op">
 <fragment>
  <pattern>
   <const>111010</const>
  </pattern>
  <phrase>
   <literal>SUBWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <register name="W"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cpfslt-op">
 <fragment>
  <pattern>
   <const>0000110</const>
  </pattern>
  <phrase>
   <literal>CPFSLT</literal>
  </phrase>
  <effect>
   <if>
    <test>
     <is-less>
      <ref name="dst"/>
      <register name="W"/>
     </is-less>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="cpfseq-op">
 <fragment>
  <pattern>
   <const>1000110</const>
  </pattern>
  <phrase>
   <literal>CPFSEQ</literal>
  </phrase>
  <effect>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <register name="W"/>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="cpfsgt-op">
 <fragment>
  <pattern>
   <const>0100110</const>
  </pattern>
  <phrase>
   <literal>CPFSGT</literal>
  </phrase>
  <effect>
   <if>
    <test>
     <is-greater>
      <ref name="dst"/>
      <register name="W"/>
     </is-greater>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="tstfsz-op">
 <fragment>
  <pattern>
   <const>1100110</const>
  </pattern>
  <phrase>
   <literal>TSTFSZ</literal>
  </phrase>
  <effect>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="setf-op">
 <fragment>
  <pattern>
   <const>0010110</const>
  </pattern>
  <phrase>
   <literal>SETF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <const>0xFF</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="clrf-op">
 <fragment>
  <pattern>
   <const>1010110</const>
  </pattern>
  <phrase>
   <literal>CLRF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="negf-op">
 <fragment>
  <pattern>
   <const>0110110</const>
  </pattern>
  <phrase>
   <literal>NEGF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <const>0</const>
     <ref name="dst"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movwf-op">
 <fragment>
  <pattern>
   <const>1110110</const>
  </pattern>
  <phrase>
   <literal>MOVWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <register name="W"/>
   </assign>
  </effect>
 </fragment>
</define>

<start>
 <fragment>
  <var name="opcode">
   <ref name="addwf-op"/>
   <ref name="comf-op"/>
   <ref name="andwf-op"/>
   <ref name="decf-op"/>
   <ref name="iorwf-op"/>
   <ref name="xorwf-op"/>
   <ref name="addwfc-op"/>
   <ref name="incf-op"/>
   <ref name="decfsz-op"/>
   <ref name="rrcf-op"/>
   <ref name="rlcf-op"/>
   <ref name="swapf-op"/>
   <ref name="incfsz-op"/>
   <ref name="rrncf-op"/>
   <ref name="rlncf-op"/>
   <ref name="infsnz-op"/>
   <ref name="dcfsnz-op"/>
   <ref name="movf-op"/>
   <ref name="subfwb-op"/>
   <ref name="subwfb-op"/>
   <ref name="subwf-op"/>
  </var>
  <var name="addr">
   <ref name="daddr"/>
  </var>
  <pattern>
   <ref name="addr"/>
   <const>0</const>
   <ref name="opcode"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>0</literal>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <register name="W"/>
    </bind>
    <bind name="src">
     <ref name="addr"/>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="addwf-op"/>
   <ref name="comf-op"/>
   <ref name="andwf-op"/>
   <ref name="decf-op"/>
   <ref name="iorwf-op"/>
   <ref name="xorwf-op"/>
   <ref name="addwfc-op"/>
   <ref name="incf-op"/>
   <ref name="decfsz-op"/>
   <ref name="rrcf-op"/>
   <ref name="rlcf-op"/>
   <ref name="swapf-op"/>
   <ref name="incfsz-op"/>
   <ref name="rrncf-op"/>
   <ref name="rlncf-op"/>
   <ref name="infsnz-op"/>
   <ref name="dcfsnz-op"/>
   <ref name="movf-op"/>
   <ref name="subfwb-op"/>
   <ref name="subwfb-op"/>
   <ref name="subwf-op"/>
  </var>
  <var name="addr">
   <ref name="daddr"/>
  </var>
  <pattern>
   <ref name="addr"/>
   <const>1</const>
   <ref name="opcode"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>1</literal>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <ref name="addr"/>
    </bind>
    <bind name="src">
     <ref name="addr"/>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="cpfslt-op"/>
   <ref name="cpfseq-op"/>
   <ref name="cpfsgt-op"/>
   <ref name="tstfsz-op"/>
   <ref name="setf-op"/>
   <ref name="clrf-op"/>
   <ref name="negf-op"/>
   <ref name="movwf-op"/>
  </var>
  <var name="addr">
   <ref name="daddr"/>
  </var>
  <pattern>
   <ref name="addr"/>
   <ref name="opcode"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <ref name="addr"/>
    </bind>
   </ref>
  </effect>
 </fragment>
</start>
</cpudl>
