<!--
This file is part of Codemancer.
Copyright 2015 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="little">
<cpu name="pic18"/>

<style>
 <property name="base" value="16"/>
 <property name="prefix" value="0x"/>
 <property name="suffix" value=""/>
 <property name="whitespace" value=" "/>
 <select class="daddr">
  <property name="width" value="2"/>
 </select>
 <select class="paddr">
  <property name="width" value="6"/>
 </select>
 <select class="imm8">
  <property name="width" value="2"/>
 </select>
 <select class="imm12">
  <property name="width" value="3"/>
 </select>
 <select class="inc">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
 <select class="bit">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
</style>

<register name="W" size="8"/>
<register name="PC" size="21"/>
<register name="SP" size="5"/>
<register name="BSR" size="8"/>
<register name="STATUS" size="8"/>
<register name="Z" size="1"/>
<register name="C" size="1"/>
<register name="OV" size="1"/>
<register name="N" size="1"/>

<register name="WS" size="8"/>
<register name="BSRS" size="8"/>
<register name="STATUSS" size="8"/>

<define name="daddr">
 <fragment>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="f"/>
   <const>0</const>
  </pattern>
  <phrase>
   <ref name="f"/>
  </phrase>
  <phrase>
   <literal>0</literal>
  </phrase>
  <effect>
   <memory as="access">
    <ref name="f"/>
   </memory>
  </effect>
 </fragment>

 <fragment>
  <var name="f">
   <integer class="daddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="f"/>
   <const>1</const>
  </pattern>
  <phrase>
   <ref name="f"/>
  </phrase>
  <phrase>
   <literal>1</literal>
  </phrase>
  <effect>
   <memory as="data">
    <add>
     <slice index="0" size="8" offset="8">
      <register name="BSR"/>
     </slice>
     <ref name="f"/>
    </add>
   </memory>
  </effect>
 </fragment>
</define>

<define name="fsr-reg">
 <fragment>
  <pattern>
   <const>00</const>
  </pattern>
  <phrase>
   <literal>0</literal>
  </phrase>
  <effect>
   <memory size="16" encoding="u">
    <const>0xFE9</const>
   </memory>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>10</const>
  </pattern>
  <phrase>
   <literal>1</literal>
  </phrase>
  <effect>
   <memory size="16" encoding="u">
    <const>0xFE1</const>
   </memory>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>01</const>
  </pattern>
  <phrase>
   <literal>2</literal>
  </phrase>
  <effect>
   <memory size="16" encoding="u">
    <const>0xFD9</const>
   </memory>
  </effect>
 </fragment>
</define>

<define name="mulwf-op">
 <fragment>
  <pattern>
   <const>1000000</const>
  </pattern>
  <phrase>
   <literal>MULWF</literal>
  </phrase>
  <effect>
   <assign>
    <memory size="16" encoding="u">
     <const>0xFF3</const>
    </memory>
    <mul>
     <register name="W"/>
     <ref name="dst"/>
    </mul>
   </assign>
  </effect>
 </fragment>
</define>

<define name="decf-op">
 <fragment>
  <pattern>
   <const>100000</const>
  </pattern>
  <phrase>
   <literal>DECF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="iorwf-op">
 <fragment>
  <pattern>
   <const>001000</const>
  </pattern>
  <phrase>
   <literal>IORWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <or>
     <register name="W"/>
     <ref name="src"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="andwf-op">
 <fragment>
  <pattern>
   <const>101000</const>
  </pattern>
  <phrase>
   <literal>ANDWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <and>
     <register name="W"/>
     <ref name="src"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xorwf-op">
 <fragment>
  <pattern>
   <const>011000</const>
  </pattern>
  <phrase>
   <literal>XORWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <xor>
     <register name="W"/>
     <ref name="src"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="comf-op">
 <fragment>
  <pattern>
   <const>111000</const>
  </pattern>
  <phrase>
   <literal>COMF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <xor>
     <ref name="src"/>
     <const>0xFF</const>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="addwfc-op">
 <fragment>
  <pattern>
   <const>000100</const>
  </pattern>
  <phrase>
   <literal>ADDWFC</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <register name="W"/>
     <ref name="src"/>
     <register name="C"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="addwf-op">
 <fragment>
  <pattern>
   <const>100100</const>
  </pattern>
  <phrase>
   <literal>ADDWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <register name="W"/>
     <ref name="src"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="incf-op">
 <fragment>
  <pattern>
   <const>010100</const>
  </pattern>
  <phrase>
   <literal>INCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="decfsz-op">
 <fragment>
  <pattern>
   <const>110100</const>
  </pattern>
  <phrase>
   <literal>DECFSZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="rrcf-op">
 <fragment>
  <pattern>
   <const>001100</const>
  </pattern>
  <phrase>
   <literal>RRCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="extended">
     <ref name="src"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rlcf-op">
 <fragment>
  <pattern>
   <const>101100</const>
  </pattern>
  <phrase>
   <literal>RLCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="extended">
     <ref name="src"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="swapf-op">
 <fragment>
  <pattern>
   <const>011100</const>
  </pattern>
  <phrase>
   <literal>SWAPF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <or>
     <shift width="8" method="logical">
      <and>
       <ref name="src"/>
       <const>0x0F</const>
      </and>
      <const>4</const>
     </shift>
     <shift width="8" method="logical">
      <and>
       <ref name="src"/>
       <const>0xF0</const>
      </and>
      <const>-4</const>
     </shift>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="incfsz-op">
 <fragment>
  <pattern>
   <const>111100</const>
  </pattern>
  <phrase>
   <literal>INCFSZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="rrncf-op">
 <fragment>
  <pattern>
   <const>000010</const>
  </pattern>
  <phrase>
   <literal>RRNCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="rotation">
     <ref name="src"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rlncf-op">
 <fragment>
  <pattern>
   <const>100010</const>
  </pattern>
  <phrase>
   <literal>RLNCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="rotation">
     <ref name="src"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="infsnz-op">
 <fragment>
  <pattern>
   <const>010010</const>
  </pattern>
  <phrase>
   <literal>INFSNZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <else>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </else>
   </if>
  </effect>
 </fragment>
</define>

<define name="dcfsnz-op">
 <fragment>
  <pattern>
   <const>110010</const>
  </pattern>
  <phrase>
   <literal>DCFSNZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <else>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </else>
   </if>
  </effect>
 </fragment>
</define>

<define name="movf-op">
 <fragment>
  <pattern>
   <const>001010</const>
  </pattern>
  <phrase>
   <literal>MOVF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <ref name="src"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="subfwb-op">
 <fragment>
  <pattern>
   <const>101010</const>
  </pattern>
  <phrase>
   <literal>SUBFWB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <register name="W"/>
     <ref name="src"/>
     <register name="C"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="subwfb-op">
 <fragment>
  <pattern>
   <const>011010</const>
  </pattern>
  <phrase>
   <literal>SUBWFB</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <register name="W"/>
     <register name="C"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="subwf-op">
 <fragment>
  <pattern>
   <const>111010</const>
  </pattern>
  <phrase>
   <literal>SUBWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <register name="W"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="cpfslt-op">
 <fragment>
  <pattern>
   <const>0000110</const>
  </pattern>
  <phrase>
   <literal>CPFSLT</literal>
  </phrase>
  <effect>
   <if>
    <test>
     <is-less>
      <ref name="dst"/>
      <register name="W"/>
     </is-less>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="cpfseq-op">
 <fragment>
  <pattern>
   <const>1000110</const>
  </pattern>
  <phrase>
   <literal>CPFSEQ</literal>
  </phrase>
  <effect>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <register name="W"/>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="cpfsgt-op">
 <fragment>
  <pattern>
   <const>0100110</const>
  </pattern>
  <phrase>
   <literal>CPFSGT</literal>
  </phrase>
  <effect>
   <if>
    <test>
     <is-greater>
      <ref name="dst"/>
      <register name="W"/>
     </is-greater>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="tstfsz-op">
 <fragment>
  <pattern>
   <const>1100110</const>
  </pattern>
  <phrase>
   <literal>TSTFSZ</literal>
  </phrase>
  <effect>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="setf-op">
 <fragment>
  <pattern>
   <const>0010110</const>
  </pattern>
  <phrase>
   <literal>SETF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <const>0xFF</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="clrf-op">
 <fragment>
  <pattern>
   <const>1010110</const>
  </pattern>
  <phrase>
   <literal>CLRF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="negf-op">
 <fragment>
  <pattern>
   <const>0110110</const>
  </pattern>
  <phrase>
   <literal>NEGF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <const>0</const>
     <ref name="dst"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movwf-op">
 <fragment>
  <pattern>
   <const>1110110</const>
  </pattern>
  <phrase>
   <literal>MOVWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <register name="W"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movlb-instr">
 <fragment>
  <var name="k">
   <integer class="imm8" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="k"/>
   <const>10000000</const>
  </pattern>
  <phrase>
   <literal>MOVLB</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8" encoding="u">
     <const>0xFE0</const>
    </memory>
    <ref name="k"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sublw-instr">
 <fragment>
  <var name="k">
   <integer class="imm8" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="k"/>
   <const>00010000</const>
  </pattern>
  <phrase>
   <literal>SUBLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <sub>
     <ref name="k"/>
     <register name="W"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="iorlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm8" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="k"/>
   <const>10010000</const>
  </pattern>
  <phrase>
   <literal>IORLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <or>
     <register name="W"/>
     <ref name="k"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xorlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm8" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="k"/>
   <const>01010000</const>
  </pattern>
  <phrase>
   <literal>XORLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <xor>
     <register name="W"/>
     <ref name="k"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="andlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm8" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="k"/>
   <const>11010000</const>
  </pattern>
  <phrase>
   <literal>ANDLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <and>
     <register name="W"/>
     <ref name="k"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="retlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm8" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="k"/>
   <const>00110000</const>
  </pattern>
  <phrase>
   <literal>RETLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <ref name="k"/>
   </assign>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>1</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <memory as="stack">
     <register name="SP"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="mullw-instr">
 <fragment>
  <var name="k">
   <integer class="imm8" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="k"/>
   <const>10110000</const>
  </pattern>
  <phrase>
   <literal>MULLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <memory size="16" encoding="u">
     <const>0xFF3</const>
    </memory>
    <mul>
     <register name="W"/>
     <ref name="k"/>
    </mul>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm8" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="k"/>
   <const>01110000</const>
  </pattern>
  <phrase>
   <literal>MOVLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <ref name="k"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="addlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm8" size="8" encoding="u"/>
  </var>
  <pattern>
   <ref name="k"/>
   <const>11110000</const>
  </pattern>
  <phrase>
   <literal>ADDLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <add>
     <register name="W"/>
     <ref name="k"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bit-mask">
 <fragment>
  <var name="n">
   <integer class="bit" size="3"/>
  </var>
  <pattern>
   <ref name="n"/>
  </pattern>
  <phrase>
   <ref name="n"/>
  </phrase>
  <effect>
   <shift width="8" mode="logical">
    <ref name="n"/>
   </shift>
  </effect>
 </fragment>
</define>

<define name="bit-value">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>S</literal>
  </phrase>
  <effect>
   <const>0xFF</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <const>0x00</const>
  </effect>
 </fragment>
</define>

<define name="btg-instr">
 <fragment>
  <var name="mask">
   <ref name="bit-mask"/>
  </var>
  <var name="addr">
   <ref name="daddr"/>
  </var>
  <pattern>
   <ref name="addr"/>
   <ref name="mask"/>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>BTG</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <ref name="mask"/>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="addr"/>
    </memory>
    <xor>
     <memory size="8">
      <ref name="addr"/>
     </memory>
     <ref name="mask"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="bscf-instr">
 <fragment>
  <var name="value">
   <ref name="bit-value"/>
  </var>
  <var name="mask">
   <ref name="bit-mask"/>
  </var>
  <var name="addr">
   <ref name="daddr"/>
  </var>
  <pattern>
   <ref name="addr"/>
   <ref name="mask"/>
   <ref name="value"/>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>B</literal>
   <ref name="value"/>
   <literal>F</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <ref name="mask"/>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="addr"/>
    </memory>
    <or>
     <and>
      <memory size="8">
       <ref name="addr"/>
      </memory>
      <xor>
       <ref name="mask"/>
       <const>0xFF</const>
      </xor>
     </and>
     <and>
      <ref name="value"/>
      <ref name="mask"/>
     </and>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="btfssc-instr">
 <fragment>
  <var name="value">
   <ref name="bit-value"/>
  </var>
  <var name="mask">
   <ref name="bit-mask"/>
  </var>
  <var name="addr">
   <ref name="daddr"/>
  </var>
  <pattern>
   <ref name="addr"/>
   <ref name="mask"/>
   <ref name="value"/>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>BTFS</literal>
   <ref name="value"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <ref name="mask"/>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <if>
    <test>
     <is-equal>
      <and>
       <memory size="8">
        <ref name="addr"/>
       </memory>
       <ref name="mask"/>
      </and>
      <and>
       <ref name="value"/>
       <ref name="mask"/>
      </and>
     </is-equal>
    </test>
    <then>
     <register name="PC"/>
     <add>
      <register name="PC"/>
      <const>2</const>
     </add>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="cc">
 <fragment>
  <pattern>
   <const>000</const>
  </pattern>
  <phrase>
   <literal>Z</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="Z"/>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>100</const>
  </pattern>
  <phrase>
   <literal>NZ</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="Z"/>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>010</const>
  </pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="C"/>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>NC</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="C"/>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>001</const>
  </pattern>
  <phrase>
   <literal>OV</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="OV"/>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>NOV</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="OV"/>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>011</const>
  </pattern>
  <phrase>
   <literal>N</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="N"/>
    <const>1</const>
   </is-equal>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>NN</literal>
  </phrase>
  <effect>
   <is-equal>
    <register name="N"/>
    <const>0</const>
   </is-equal>
  </effect>
 </fragment>
</define>

<define name="bra-instr">
 <fragment>
  <var name="offset">
   <integer size="11" encoding="2c"/>
  </var>
  <var name="addr">
   <integer class="paddr" size="21"/>
  </var>
  <where>
   <is-equal>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <const>2</const>
     <ref name="offset"/>
     <ref name="offset"/>
    </add>
   </is-equal>
  </where>
  <pattern>
   <ref name="offset"/>
   <const>01011</const>
  </pattern>
  <phrase>
   <literal>BRA</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <ref name="addr"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rcall-instr">
 <fragment>
  <var name="offset">
   <integer size="11" encoding="2c"/>
  </var>
  <var name="addr">
   <integer class="paddr" size="21"/>
  </var>
  <where>
   <is-equal>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <const>2</const>
     <ref name="offset"/>
     <ref name="offset"/>
    </add>
   </is-equal>
  </where>
  <pattern>
   <ref name="offset"/>
   <const>11011</const>
  </pattern>
  <phrase>
   <literal>RCALL</literal>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <assign>
    <memory as="stack">
     <register name="SP"/>
    </memory>
    <register name="PC"/>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <register name="PC"/>
    <ref name="addr"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="b-instr">
 <fragment>
  <var name="cc">
   <ref name="cc"/>
  </var>
  <var name="offset">
   <integer size="8" encoding="2c"/>
  </var>
  <var name="addr">
   <integer class="paddr" size="21"/>
  </var>
  <where>
   <is-equal>
    <ref name="addr"/>
    <add>
     <register name="PC"/>
     <const>2</const>
     <ref name="offset"/>
     <ref name="offset"/>
    </add>
   </is-equal>
  </where>
  <pattern>
   <ref name="offset"/>
   <ref name="cc"/>
   <const>00111</const>
  </pattern>
  <phrase>
   <literal>B</literal>
   <ref name="cc"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
  </phrase>
  <effect>
   <if>
    <test>
     <ref name="cc"/>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <ref name="addr"/>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="s-bit">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>0</literal>
  </phrase>
  <effect></effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>1</literal>
  </phrase>
  <effect>
   <assign>
    <register name="WS"/>
    <register name="W"/>
   </assign>
   <assign>
    <register name="STATUSS"/>
    <register name="STATUS"/>
   </assign>
   <assign>
    <register name="BSR"/>
    <register name="BSRS"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="call-instr">
 <fragment>
  <var name="k">
   <integer class="paddr" size="8" encoding="u"/>
  </var>
  <var name="k0">
   <integer size="8" encoding="u"/>
  </var>
  <var name="k1">
   <integer size="12" encoding="u"/>
  </var>
  <var name="s">
   <ref name="s-bit"/>
  </var>
  <where>
   <is-equal>
    <ref name="k"/>
    <or>
     <slice index="0" size="8" offset="1">
      <ref name="k0"/>
     </slice>
     <slice index="0" size="12" offset="9">
      <ref name="k1"/>
     </slice>
    </or>
   </is-equal>
  </where>
  <pattern>
   <ref name="k0"/>
   <ref name="s"/>
   <const>0110111</const>
   <ref name="k1"/>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>CALL</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
   <literal>,</literal><ws/>
   <ref name="s"/>
  </phrase>
  <effect>
   <ref name="s"/>
   <assign>
    <memory as="stack">
     <register name="SP"/>
    </memory>
    <register name="PC"/>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <ref name="PC"/>
    <ref name="k"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="lfsr-instr">
 <fragment>
  <var name="fsr">
   <ref name="fsr-reg"/>
  </var>
  <var name="k">
   <integer class="imm12" size="8" encoding="u"/>
  </var>
  <var name="k0">
   <integer size="8" encoding="u"/>
  </var>
  <var name="k1">
   <integer size="4" encoding="u"/>
  </var>
  <where>
   <is-equal>
    <ref name="k"/>
    <or>
     <ref name="k0"/>
     <slice index="0" size="4" offset="8">
      <ref name="k1"/>
     </slice>
    </or>
   </is-equal>
  </where>
  <pattern>
   <ref name="k1"/>
   <ref name="fsr"/>
   <const>00</const>
   <const>01110111</const>
   <ref name="k0"/>
   <const>00001111</const>
  </pattern>
  <phrase>
   <literal>LFSR</literal>
  </phrase>
  <phrase>
   <ref name="fsr"/>
   <literal>,</literal><ws/>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <ref name="fsr"/>
    <ref name="k"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="goto-instr">
 <fragment>
  <var name="k">
   <integer class="paddr" size="8" encoding="u"/>
  </var>
  <var name="k0">
   <integer size="8" encoding="u"/>
  </var>
  <var name="k1">
   <integer size="12" encoding="u"/>
  </var>
  <where>
   <is-equal>
    <ref name="k"/>
    <or>
     <slice index="0" size="8" offset="1">
      <ref name="k0"/>
     </slice>
     <slice index="0" size="12" offset="9">
      <ref name="k1"/>
     </slice>
    </or>
   </is-equal>
  </where>
  <pattern>
   <ref name="k0"/>
   <const>11110111</const>
   <ref name="k1"/>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>GOTO</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <ref name="PC"/>
    <ref name="k"/>
   </assign>
  </effect>
 </fragment>
</define>

<start>
 <fragment>
  <var name="opcode">
   <ref name="addwf-op"/>
   <ref name="comf-op"/>
   <ref name="andwf-op"/>
   <ref name="decf-op"/>
   <ref name="iorwf-op"/>
   <ref name="xorwf-op"/>
   <ref name="addwfc-op"/>
   <ref name="incf-op"/>
   <ref name="decfsz-op"/>
   <ref name="rrcf-op"/>
   <ref name="rlcf-op"/>
   <ref name="swapf-op"/>
   <ref name="incfsz-op"/>
   <ref name="rrncf-op"/>
   <ref name="rlncf-op"/>
   <ref name="infsnz-op"/>
   <ref name="dcfsnz-op"/>
   <ref name="movf-op"/>
   <ref name="subfwb-op"/>
   <ref name="subwfb-op"/>
   <ref name="subwf-op"/>
  </var>
  <var name="addr">
   <ref name="daddr"/>
  </var>
  <pattern>
   <ref name="addr"/>
   <const>0</const>
   <ref name="opcode"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>0</literal>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <register name="W"/>
    </bind>
    <bind name="src">
     <ref name="addr"/>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="addwf-op"/>
   <ref name="comf-op"/>
   <ref name="andwf-op"/>
   <ref name="decf-op"/>
   <ref name="iorwf-op"/>
   <ref name="xorwf-op"/>
   <ref name="addwfc-op"/>
   <ref name="incf-op"/>
   <ref name="decfsz-op"/>
   <ref name="rrcf-op"/>
   <ref name="rlcf-op"/>
   <ref name="swapf-op"/>
   <ref name="incfsz-op"/>
   <ref name="rrncf-op"/>
   <ref name="rlncf-op"/>
   <ref name="infsnz-op"/>
   <ref name="dcfsnz-op"/>
   <ref name="movf-op"/>
   <ref name="subfwb-op"/>
   <ref name="subwfb-op"/>
   <ref name="subwf-op"/>
  </var>
  <var name="addr">
   <ref name="daddr"/>
  </var>
  <pattern>
   <ref name="addr"/>
   <const>1</const>
   <ref name="opcode"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <literal>1</literal>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <ref name="addr"/>
    </bind>
    <bind name="src">
     <ref name="addr"/>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="mulwf-op"/>
   <ref name="cpfslt-op"/>
   <ref name="cpfseq-op"/>
   <ref name="cpfsgt-op"/>
   <ref name="tstfsz-op"/>
   <ref name="setf-op"/>
   <ref name="clrf-op"/>
   <ref name="negf-op"/>
   <ref name="movwf-op"/>
  </var>
  <var name="addr">
   <ref name="daddr"/>
  </var>
  <pattern>
   <ref name="addr"/>
   <ref name="opcode"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="addr"/>
   <literal>,</literal><ws/>
   <ref name="addr"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <ref name="addr"/>
    </bind>
   </ref>
  </effect>
 </fragment>

 <ref name="movlb-instr"/>
 <ref name="sublw-instr"/>
 <ref name="iorlw-instr"/>
 <ref name="xorlw-instr"/>
 <ref name="andlw-instr"/>
 <ref name="retlw-instr"/>
 <ref name="mullw-instr"/>
 <ref name="movlw-instr"/>
 <ref name="addlw-instr"/>

 <ref name="btg-instr"/>
 <ref name="bscf-instr"/>
 <ref name="btfssc-instr"/>

 <ref name="bra-instr"/>
 <ref name="rcall-instr"/>
 <ref name="b-instr"/>

 <ref name="call-instr"/>
 <ref name="lfsr-instr"/>
 <ref name="goto-instr"/>
</start>
</cpudl>
