<!--
This file is part of Codemancer.
Copyright 2015 Graham Shaw.
Distribution and modification are permitted within the terms of the
GNU General Public License (version 3 or any later version).
-->

<cpudl endian="big">
<cpu name="pic-bl"/>

<style>
 <property name="base" value="16"/>
 <property name="prefix" value="0x"/>
 <property name="suffix" value=""/>
 <property name="whitespace" value=" "/>
 <select class="daddr">
  <property name="width" value="2"/>
 </select>
 <select class="paddr">
  <property name="width" value="3"/>
 </select>
 <select class="imm">
  <property name="width" value="2"/>
 </select>
 <select class="bit">
  <property name="base" value="10"/>
  <property name="prefix" value=""/>
 </select>
</style>

<register name="W" size="8"/>
<register name="SP" size="3" role="SP"/>
<register name="PC" size="13" role="PC"/>
<register name="OPTION" size="6"/>

<define name="tris-reg">
 <fragment>
  <pattern>
   <const>101</const>
  </pattern>
  <phrase>
   <literal>5</literal>
  </phrase>
  <effect>
   <const>5</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>110</const>
  </pattern>
  <phrase>
   <literal>6</literal>
  </phrase>
  <effect>
   <const>6</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>111</const>
  </pattern>
  <phrase>
   <literal>7</literal>
  </phrase>
  <effect>
   <const>7</const>
  </effect>
 </fragment>
</define>

<define name="nop-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
   <const>00000000</const>
  </pattern>
  <phrase>
   <literal>NOP</literal>
  </phrase>
  <phrase></phrase>
  <effect></effect>
 </fragment>
</define>

<define name="option-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
   <const>00000010</const>
  </pattern>
  <phrase>
   <literal>OPTION</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="OPTION"/>
    <register name="W"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="sleep-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
   <const>00000011</const>
  </pattern>
  <phrase>
   <literal>SLEEP</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<define name="clrwdt-instr">
 <fragment>
  <pattern>
   <const>00000000</const>
   <const>00000100</const>
  </pattern>
  <phrase>
   <literal>CLRWDT</literal>
  </phrase>
  <phrase></phrase>
 </fragment>
</define>

<define name="tris-instr">
 <fragment>
  <var name="tris">
   <ref name="tris-reg"/>
  </var>
  <pattern>
   <const>00000000</const>
   <const>00000</const>
   <ref name="tris"/>
  </pattern>
  <phrase>
   <literal>TRIS</literal>
  </phrase>
  <phrase>
   <ref name="tris"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="tris"/>
    </memory>
    <register name="W"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movwf-op">
 <fragment>
  <pattern>
   <const>00001</const>
  </pattern>
  <phrase>
   <literal>MOVWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <register name="W"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="clrf-op">
 <fragment>
  <pattern>
   <const>00011</const>
  </pattern>
  <phrase>
   <literal>CLRF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>
</define>

<define name="subwf-op">
 <fragment>
  <pattern>
   <const>0010</const>
  </pattern>
  <phrase>
   <literal>SUBWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <register name="W"/>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="decf-op">
 <fragment>
  <pattern>
   <const>0011</const>
  </pattern>
  <phrase>
   <literal>DECF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
  </effect>
 </fragment>
</define>

<define name="iorwf-op">
 <fragment>
  <pattern>
   <const>0100</const>
  </pattern>
  <phrase>
   <literal>IORWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <or>
     <register name="W"/>
     <ref name="src"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="andwf-op">
 <fragment>
  <pattern>
   <const>0101</const>
  </pattern>
  <phrase>
   <literal>ANDWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <and>
     <register name="W"/>
     <ref name="src"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xorwf-op">
 <fragment>
  <pattern>
   <const>0110</const>
  </pattern>
  <phrase>
   <literal>XORWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <xor>
     <register name="W"/>
     <ref name="src"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="addwf-op">
 <fragment>
  <pattern>
   <const>0111</const>
  </pattern>
  <phrase>
   <literal>ADDWF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <register name="W"/>
     <ref name="src"/>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movf-op">
 <fragment>
  <pattern>
   <const>1000</const>
  </pattern>
  <phrase>
   <literal>MOVF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <ref name="src"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="comf-op">
 <fragment>
  <pattern>
   <const>1001</const>
  </pattern>
  <phrase>
   <literal>COMF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <xor>
     <ref name="src"/>
     <const>0xFF</const>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<define name="incf-op">
 <fragment>
  <pattern>
   <const>1010</const>
  </pattern>
  <phrase>
   <literal>INCF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
  </effect>
 </fragment>
</define>

<define name="decfsz-op">
 <fragment>
  <pattern>
   <const>1011</const>
  </pattern>
  <phrase>
   <literal>DECFSZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <sub>
     <ref name="src"/>
     <const>1</const>
    </sub>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="rrf-op">
 <fragment>
  <pattern>
   <const>1100</const>
  </pattern>
  <phrase>
   <literal>RRF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="extended">
     <ref name="src"/>
     <const>-1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="rlf-op">
 <fragment>
  <pattern>
   <const>1101</const>
  </pattern>
  <phrase>
   <literal>RLF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <shift width="8" method="extended">
     <ref name="src"/>
     <const>1</const>
    </shift>
   </assign>
  </effect>
 </fragment>
</define>

<define name="swapf-op">
 <fragment>
  <pattern>
   <const>1110</const>
  </pattern>
  <phrase>
   <literal>SWAPF</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <or>
     <shift width="8" method="logical">
      <and>
       <ref name="src"/>
       <const>0x0F</const>
      </and>
      <const>4</const>
     </shift>
     <shift width="8" method="logical">
      <and>
       <ref name="src"/>
       <const>0xF0</const>
      </and>
      <const>-4</const>
     </shift>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="incfsz-op">
 <fragment>
  <pattern>
   <const>1111</const>
  </pattern>
  <phrase>
   <literal>INCFSZ</literal>
  </phrase>
  <effect>
   <assign>
    <ref name="dst"/>
    <add>
     <ref name="src"/>
     <const>1</const>
    </add>
   </assign>
   <if>
    <test>
     <is-equal>
      <ref name="dst"/>
      <const>0</const>
     </is-equal>
    </test>
    <then>
     <assign>
      <register name="PC"/>
      <add>
       <register name="PC"/>
       <const>2</const>
      </add>
     </assign>
    </then>
   </if>
  </effect>
 </fragment>
</define>

<define name="bit-mask">
 <fragment>
  <var name="n">
   <integer class="bit" size="3"/>
  </var>
  <pattern>
   <ref name="n"/>
  </pattern>
  <phrase>
   <ref name="n"/>
  </phrase>
  <effect>
   <shift width="8" mode="logical">
    <ref name="n"/>
   </shift>
  </effect>
 </fragment>
</define>

<define name="bit-value">
 <fragment>
  <pattern>
   <const>0</const>
  </pattern>
  <phrase>
   <literal>C</literal>
  </phrase>
  <effect>
   <const>0x00</const>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>1</const>
  </pattern>
  <phrase>
   <literal>S</literal>
  </phrase>
  <effect>
   <const>0xFF</const>
  </effect>
 </fragment>
</define>

<define name="call-instr">
 <fragment>
  <var name="k">
   <integer class="paddr" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00001001</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>CALL</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <memory size="16" as="stack">
     <register name="SP"/>
    </memory>
    <register name="PC"/>
   </assign>
   <assign>
    <register name="SP"/>
    <add>
     <register name="SP"/>
     <const>1</const>
    </add>
   </assign>
   <assign>
    <register name="PC"/>
    <or>
     <shift width="11" method="logical">
      <and>
       <memory size="8">
        <const>0x03</const>
       </memory>
       <const>0x60</const>
      </and>
      <const>4</const>
     </shift>
     <ref name="k"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="goto-instr">
 <fragment>
  <var name="k">
   <integer class="paddr" size="9" encoding="u"/>
  </var>
  <pattern>
   <const>0000101</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>GOTO</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="PC"/>
    <or>
     <shift width="11" method="logical">
      <and>
       <memory size="8">
        <const>0x03</const>
       </memory>
       <const>0x60</const>
      </and>
      <const>4</const>
     </shift>
     <ref name="k"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="retlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00001000</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>RETLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <ref name="k"/>
   </assign>
   <assign>
    <register name="SP"/>
    <sub>
     <register name="SP"/>
     <const>1</const>
    </sub>
   </assign>
   <assign>
    <register name="PC"/>
    <memory size="16" as="stack">
     <register name="SP"/>
    </memory>
   </assign>
  </effect>
 </fragment>
</define>

<define name="movlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00001100</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>MOVLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <ref name="k"/>
   </assign>
  </effect>
 </fragment>
</define>

<define name="iorlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00001101</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>IORLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <or>
     <register name="W"/>
     <ref name="k"/>
    </or>
   </assign>
  </effect>
 </fragment>
</define>

<define name="andlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00001110</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>ANDLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <and>
     <register name="W"/>
     <ref name="k"/>
    </and>
   </assign>
  </effect>
 </fragment>
</define>

<define name="xorlw-instr">
 <fragment>
  <var name="k">
   <integer class="imm" size="8" encoding="u"/>
  </var>
  <pattern>
   <const>00001111</const>
   <ref name="k"/>
  </pattern>
  <phrase>
   <literal>XORLW</literal>
  </phrase>
  <phrase>
   <ref name="k"/>
  </phrase>
  <effect>
   <assign>
    <register name="W"/>
    <xor>
     <register name="W"/>
     <ref name="k"/>
    </xor>
   </assign>
  </effect>
 </fragment>
</define>

<start>
 <ref name="nop-instr"/>
 <ref name="option-instr"/>
 <ref name="sleep-instr"/>
 <ref name="clrwdt-instr"/>
 <ref name="tris-instr"/>

 <fragment>
  <var name="opcode">
   <ref name="movwf-op"/>
   <ref name="clrf-op"/>
  </var>
  <var name="f">
   <integer class="daddr" size="5" encoding="u"/>
  </var>
  <pattern>
   <const>000000</const>
   <ref name="opcode"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="f"/>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <memory size="8">
      <ref name="f"/>
     </memory>
    </bind>
    <bind name="src">
     <memory size="8">
      <ref name="f"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <pattern>
   <const>00000000</const>
   <const>01000000</const>
  </pattern>
  <phrase>
   <literal>CLRW</literal>
  </phrase>
  <phrase></phrase>
  <effect>
   <assign>
    <register name="W"/>
    <const>0</const>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="subwf-op"/>
   <ref name="decf-op"/>
   <ref name="iorwf-op"/>
   <ref name="andwf-op"/>
   <ref name="xorwf-op"/>
   <ref name="addwf-op"/>
   <ref name="movf-op"/>
   <ref name="comf-op"/>
   <ref name="incf-op"/>
   <ref name="decfsz-op"/>
   <ref name="rrf-op"/>
   <ref name="rlf-op"/>
   <ref name="swapf-op"/>
   <ref name="incfsz-op"/>
  </var>
  <var name="f">
   <integer class="daddr" size="5" encoding="u"/>
  </var>
  <pattern>
   <const>000000</const>
   <ref name="opcode"/>
   <const>0</const>
   <ref name="f"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <literal>0</literal>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <register name="W"/>
    </bind>
    <bind name="src">
     <memory size="8">
      <ref name="f"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="opcode">
   <ref name="subwf-op"/>
   <ref name="decf-op"/>
   <ref name="iorwf-op"/>
   <ref name="andwf-op"/>
   <ref name="xorwf-op"/>
   <ref name="addwf-op"/>
   <ref name="movf-op"/>
   <ref name="comf-op"/>
   <ref name="incf-op"/>
   <ref name="decfsz-op"/>
   <ref name="rrf-op"/>
   <ref name="rlf-op"/>
   <ref name="swapf-op"/>
   <ref name="incfsz-op"/>
  </var>
  <var name="f">
   <integer class="daddr" size="5" encoding="u"/>
  </var>
  <pattern>
   <const>000000</const>
   <ref name="opcode"/>
   <const>1</const>
   <ref name="f"/>
  </pattern>
  <phrase>
   <ref name="opcode"/>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <literal>1</literal>
  </phrase>
  <effect>
   <ref name="opcode">
    <bind name="dst">
     <memory size="8">
      <ref name="f"/>
     </memory>
    </bind>
    <bind name="src">
     <memory size="8">
      <ref name="f"/>
     </memory>
    </bind>
   </ref>
  </effect>
 </fragment>

 <fragment>
  <var name="value">
   <ref name="bit-value"/>
  </var>
  <var name="mask">
   <ref name="bit-mask"/>
  </var>
  <var name="f">
   <integer class="daddr" size="5" encoding="u"/>
  </var>
  <pattern>
   <const>0000010</const>
   <ref name="value"/>
   <ref name="mask"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>B</literal>
   <ref name="value"/>
   <literal>F</literal>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <ref name="mask"/>
  </phrase>
  <effect>
   <assign>
    <memory size="8">
     <ref name="f"/>
    </memory>
    <or>
     <and>
      <memory size="8">
       <ref name="f"/>
      </memory>
      <xor>
       <ref name="mask"/>
       <const>0xFF</const>
      </xor>
     </and>
     <and>
      <ref name="value"/>
      <ref name="mask"/>
     </and>
    </or>
   </assign>
  </effect>
 </fragment>

 <fragment>
  <var name="value">
   <ref name="bit-value"/>
  </var>
  <var name="mask">
   <ref name="bit-mask"/>
  </var>
  <var name="f">
   <integer class="daddr" size="5" encoding="u"/>
  </var>
  <pattern>
   <const>0000011</const>
   <ref name="value"/>
   <ref name="mask"/>
   <ref name="f"/>
  </pattern>
  <phrase>
   <literal>BTFS</literal>
   <ref name="value"/>
  </phrase>
  <phrase>
   <ref name="f"/>
   <literal>,</literal><ws/>
   <ref name="mask"/>
  </phrase>
  <effect>
   <if>
    <test>
     <is-equal>
      <and>
       <memory size="8">
        <ref name="f"/>
       </memory>
       <ref name="mask"/>
      </and>
      <and>
       <ref name="value"/>
       <ref name="mask"/>
      </and>
     </is-equal>
    </test>
    <then>
     <register name="PC"/>
     <add>
      <register name="PC"/>
      <const>2</const>
     </add>
    </then>
   </if>
  </effect>
 </fragment>

 <ref name="call-instr"/>
 <ref name="goto-instr"/>

 <ref name="retlw-instr"/>
 <ref name="movlw-instr"/>
 <ref name="iorlw-instr"/>
 <ref name="andlw-instr"/>
 <ref name="xorlw-instr"/>
</start>
</cpudl>
